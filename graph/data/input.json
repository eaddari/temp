[
  {
    "file": ".pre-commit-config.yaml",
    "type": "yaml",
    "content": {
      "default_language_version": {
        "python": "python3.10"
      },
      "repos": [
        {
          "repo": "https://github.com/pre-commit/pre-commit-hooks",
          "rev": "v6.0.0",
          "hooks": [
            {
              "id": "check-added-large-files"
            },
            {
              "id": "check-toml"
            },
            {
              "id": "check-yaml",
              "args": [
                "--unsafe"
              ]
            },
            {
              "id": "end-of-file-fixer"
            },
            {
              "id": "trailing-whitespace"
            }
          ]
        },
        {
          "repo": "https://github.com/astral-sh/ruff-pre-commit",
          "rev": "v0.13.0",
          "hooks": [
            {
              "id": "ruff",
              "args": [
                "--fix"
              ]
            },
            {
              "id": "ruff-format"
            }
          ]
        }
      ],
      "ci": {
        "autofix_commit_msg": "\ud83c\udfa8 [pre-commit.ci] Auto format from pre-commit.com hooks",
        "autoupdate_commit_msg": "\u2b06 [pre-commit.ci] pre-commit autoupdate"
      }
    }
  },
  {
    "file": "CONTRIBUTING.md",
    "type": "markdown",
    "content": "Please read the [Development - Contributing](https://typer.tiangolo.com/contributing/) guidelines in the documentation site.\n"
  },
  {
    "file": "SECURITY.md",
    "type": "markdown",
    "content": "# Security Policy\n\nSecurity is very important for Typer and its community. \ud83d\udd12\n\nLearn more about it below. \ud83d\udc47\n\n## Versions\n\nThe latest versions of Typer are supported.\n\nYou are encouraged to [write tests](https://typer.tiangolo.com/tutorial/testing/) for your application and update your Typer version frequently after ensuring that your tests are passing. This way you will benefit from the latest features, bug fixes, and **security fixes**.\n\n## Reporting a Vulnerability\n\nIf you think you found a vulnerability, and even if you are not sure about it, please report it right away by sending an email to: security@tiangolo.com. Please try to be as explicit as possible, describing all the steps and example code to reproduce the security issue.\n\nI (the author, [@tiangolo](https://twitter.com/tiangolo)) will review it thoroughly and get back to you.\n\n## Public Discussions\n\nPlease restrain from publicly discussing a potential security vulnerability. \ud83d\ude4a\n\nIt's better to discuss privately and try to find a solution first, to limit the potential impact as much as possible.\n\n---\n\nThanks for your help!\n\nThe Typer community and I thank you for that. \ud83d\ude47\n"
  },
  {
    "file": "data/members.yml",
    "type": "yaml",
    "content": {
      "members": [
        {
          "login": "tiangolo"
        },
        {
          "login": "svlandeg"
        },
        {
          "login": "patrick91"
        }
      ]
    }
  },
  {
    "file": "docs/about/index.md",
    "type": "markdown",
    "content": "# About\n\nAbout **Typer**, its design, inspiration, and more. \ud83e\udd13\n"
  },
  {
    "file": "docs/alternatives.md",
    "type": "markdown",
    "content": "# Alternatives, Inspiration and Comparisons\n\nWhat inspired **Typer**, how it compares to other alternatives and what it learned from them.\n\n## Intro\n\n**Typer** wouldn't exist if not for the previous work of others.\n\nThere have been many tools created before that have helped inspire its creation.\n\n## Previous tools\n\n### <a href=\"https://docs.python.org/3/library/argparse.html\" class=\"external-link\" target=\"_blank\">`argparse`</a>\n\n`argparse` is the Python standard library's module to write CLIs.\n\nIt provides a better alternative than reading the *CLI Parameters* as a `list` of `str` and parsing everything by hand.\n\n/// check | Inspired **Typer** to\n\nProvide a better development experience than just reading *CLI Parameters* by hand.\n\n///\n\n### <a href=\"https://hugapi.github.io/hug/\" class=\"external-link\" target=\"_blank\">Hug</a>\n\nHug is a library to create APIs and CLIs, it uses parameters in functions to declare the required data.\n\nIt inspired a lot of the ideas in **FastAPI** and **Typer**.\n\n/// check | Inspired **Typer** to\n\nUse function parameters to declare *CLI arguments* and *CLI options* as it simplifies a lot the development experience.\n\n///\n\n### <a href=\"https://plac.readthedocs.io/en/latest/\" class=\"external-link\" target=\"_blank\">Plac</a>\n\nPlac is another library to create CLIs using parameters in functions, similar to Hug.\n\n/// check | Inspired **Typer** to\n\nProvide a simple way to use a function as a command line app, without having to create a complete app, with `typer.run(some_function)`.\n\n///\n\n### <a href=\"https://pydantic-docs.helpmanual.io/\" class=\"external-link\" target=\"_blank\">Pydantic</a>\n\nPydantic is a library to handle data validation using standard modern Python type annotations.\n\nIt powers **FastAPI** underneath.\n\nIt is not used by **Typer**, but it inspired a lot of the design (through **FastAPI**).\n\n/// check | Inspired **Typer** to\n\nUse standard Python type annotations to declare types instead of library-specific types or classes and use them for data validation and documentation.\n\n///\n\n### <a href=\"https://click.palletsprojects.com\" class=\"external-link\" target=\"_blank\">Click</a>\n\nClick is one of the most widely used libraries to create CLIs in Python.\n\nIt's a very powerful tool and there are many CLIs built with it. It is what powers **Typer** underneath.\n\nIt also uses functions with parameters for *CLI arguments* and *CLI options*, but the declaration of the specific *CLI arguments*, *CLI options*, types, etc, is done in decorators on top of the function. This requires some code repetition (e.g. a *CLI Option* name `--verbose` and a variable name `verbose`) and synchronization between two places related to the same information (the decorator and the parameter function).\n\nIt uses decorators on top of functions to modify the actual value of those functions, converting them to instances of a specific class. This is a clever trick, but code editors can't provide great support for autocompletion that way.\n\nIt was built with some great ideas and design using the features available in the language at the time (Python 2.x).\n\n/// check | **Typer** uses it for\n\nEverything. \ud83d\ude80\n\n**Typer** mainly adds a layer on top of Click, making the code simpler and easier to use, with autocompletion everywhere, etc, but providing all the powerful features of Click underneath.\n\nAs someone pointed out: <em><a href=\"https://twitter.com/fishnets88/status/1210126833745838080\" class=\"external-link\" target=\"_blank\">\"Nice to see it is built on Click but adds the type stuff. Me gusta!\"</a></em>\n\n///\n\n### <a href=\"https://github.com/click-contrib/click-completion\" class=\"external-link\" target=\"_blank\">`click-completion`</a>\n\n`click-completion` is a plug-in for Click. It was created to extend completion support for shells when Click only had support for Bash completion.\n\nPrevious versions of **Typer** had deep integrations with `click-completion` and used it as an optional dependency. But now all the completion logic is implemented internally in **Typer** itself, the internal logic was heavily inspired and using some parts of `click-completion`.\n\nAnd now **Typer** improved it to have new features, tests, some bug fixes (for issues in plain `click-completion` and Click), and better support for shells, including modern versions of PowerShell (e.g. the default versions that come with Windows 10).\n\n/// check | Inspired **Typer** to\n\nProvide auto completion for all the shells.\n\n///\n\n### <a href=\"https://fastapi.tiangolo.com/\" class=\"external-link\" target=\"_blank\">FastAPI</a>\n\nI created **FastAPI** to provide an easy way to build APIs with autocompletion for everything in the code (and some other <a href=\"https://fastapi.tiangolo.com/features/\" class=\"external-link\" target=\"_blank\">features</a>).\n\n**Typer** is the \"FastAPI of CLIs\".\n\nIt uses the same design and usage of FastAPI as much as possible. So, if you have used FastAPI, you know how to use Typer.\n"
  },
  {
    "file": "docs/contributing.md",
    "type": "markdown",
    "content": "# Development - Contributing\n\nFirst, you might want to see the basic ways to [help Typer and get help](help-typer.md){.internal-link target=_blank}.\n\n## Developing\n\nIf you already cloned the <a href=\"https://github.com/fastapi/typer\" class=\"external-link\" target=\"_blank\">typer repository</a> and you want to deep dive in the code, here are some guidelines to set up your environment.\n\n### Virtual Environment\n\nFollow the instructions to create and activate a [virtual environment](virtual-environments.md){.internal-link target=_blank} for the internal code of `typer`.\n\n### Install Requirements Using `pip`\n\nAfter activating the environment, install the required packages:\n\n<div class=\"termy\">\n\n```console\n$ pip install -r requirements.txt\n\n---> 100%\n```\n\n</div>\n\nIt will install all the dependencies and your local Typer in your local environment.\n\n### Using your Local Typer\n\nIf you create a Python file that imports and uses Typer, and run it with the Python from your local environment, it will use your cloned local Typer source code.\n\nAnd if you update that local Typer source code when you run that Python file again, it will use the fresh version of Typer you just edited.\n\nThat way, you don't have to \"install\" your local version to be able to test every change.\n\n/// note | \"Technical Details\"\n\nThis only happens when you install using this included `requirements.txt` instead of running `pip install typer` directly.\n\nThat is because inside the `requirements.txt` file, the local version of Typer is marked to be installed in \"editable\" mode, with the `-e` option.\n\n///\n\n### Format\n\nThere is a script that you can run that will format and clean all your code:\n\n<div class=\"termy\">\n\n```console\n$ bash scripts/format.sh\n```\n\n</div>\n\nIt will also auto-sort all your imports.\n\n## Tests\n\nThere is a script that you can run locally to test all the code and generate coverage reports in HTML:\n\n<div class=\"termy\">\n\n```console\n$ bash scripts/test-cov-html.sh\n```\n\n</div>\n\nThis command generates a directory `./htmlcov/`, if you open the file `./htmlcov/index.html` in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.\n\n## Completion\n\nTo try and test the completion for different shells and check that they are working you can use a Docker container.\n\nThere's a `Dockerfile` and a Docker Compose file `compose.yaml` at `./scripts/docker/`.\n\nIt has installed `bash`, `zsh`, `fish`, and `pwsh` (PowerShell for Linux).\n\nIt also has installed `nano` and `vim`, so that you can check the modified configuration files for the shells (for example `.bashrc`, `.zshrc`, etc).\n\nIt also has `uv` installed, so you can install the dependencies and the project quickly.\n\nThe Docker Compose file mounts the main directory as `/code` inside the container, so you can change things and try them out.\n\nGo to the `./scripts/docker/` directory:\n\n```console\n$ cd scripts/docker/\n```\n\nThen run an interactive session with `bash` inside the container:\n\n```console\n$ docker compose run typer bash\n\nroot@79c4b9b70cbe:/code#\n```\n\nThen inside the container, you can install `typer` with:\n\n```console\n$ uv pip install -r requirements.txt\n```\n\nThen, you can start the shell you want to use, the one where you want to try out completion:\n\n* `bash`\n* `fish`\n* `pwsh`\n* `zsh`\n\nFor example:\n\n```console\n$ zsh\n```\n\nThen install `typer` completion:\n\n```console\n$ typer --install-completion\n```\n\n/// info\n\nIn `pwsh` you will probably get a warning of:\n\n```plaintext\nSet-ExecutionPolicy: Operation is not supported on this platform.\n```\n\nthis is because that configuration is only available in Windows (and needed there), not in PowerShell for Linux.\n\n///\n\nFor completion to take effect, you need to restart the shell. So, exit the current shell:\n\n```console\n$ exit\n```\n\nand start a new shell (for the same shell you installed completion in) again. For example:\n\n```console\n$ zsh\n```\n\nNow you could create a demo file on the same Typer directory in your editor, for example `demo.py`:\n\n```python\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello():\n    print(\"Hello\")\n\n\n@app.command()\ndef goodbye():\n    print(\"Goodbye\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\nBecause the directory is mounted as a volume, you will be able to access the file from inside the container.\n\nSo, you can try running it with the `typer` command, that will use the installed shell completion:\n\n```console\n$ typer demo.py <TAB>\n```\n\nAnd you should see the completion working:\n\n```console\nrun    -- Run the provided Typer app.\nutils  -- Extra utility commands for Typer apps.\n```\n\nAnd the same for the commands in your `demo.py` file:\n\n```console\n$ typer demo.py run <TAB>\n\nhello    goodbye\n```\n\nYou can also check the configuration file using `nano` or `vim`, for example:\n\n```bash\nnano ~/.zshrc\n```\n\nIt will show some content like:\n\n```bash\nfpath+=~/.zfunc; autoload -Uz compinit; compinit\n\n\nzstyle ':completion:*' menu select\n```\n\nIf you exit from the container, you can start a new one, you will probably have to install the packages again and install completion again.\n\nUsing this process, you can test all the shells, with their completions, being able to start from scratch quickly in a fresh container, and verifying that everything works as expected.\n\n## Docs\n\nFirst, make sure you set up your environment as described above, that will install all the requirements.\n\n### Docs live\n\nDuring local development, there is a script that builds the site and checks for any changes, live-reloading:\n\n<div class=\"termy\">\n\n```console\n$ python ./scripts/docs.py live\n\n<span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008\n<span style=\"color: green;\">[INFO]</span> Start watching changes\n<span style=\"color: green;\">[INFO]</span> Start detecting changes\n```\n\n</div>\n\nIt will serve the documentation on `http://127.0.0.1:8008`.\n\nThat way, you can edit the documentation/source files and see the changes live.\n\n/// tip\n\nAlternatively, you can perform the same steps that script does manually.\n\nGo into the docs directory at `docs/`:\n\n```console\n$ cd docs/\n```\n\nThen run `mkdocs` in that directory:\n\n```console\n$ mkdocs serve --dev-addr 8008\n```\n\n///\n\n#### Typer CLI (optional)\n\nThe instructions here show you how to use the script at `./scripts/docs.py` with the `python` program directly.\n\nBut you can also use <a href=\"https://typer.tiangolo.com/typer-cli/\" class=\"external-link\" target=\"_blank\">Typer CLI</a>, and you will get autocompletion in your terminal for the commands after installing completion.\n\nIf you install Typer CLI, you can install completion with:\n\n<div class=\"termy\">\n\n```console\n$ typer --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n```\n\n</div>\n\n### Docs Structure\n\nThe documentation uses <a href=\"https://www.mkdocs.org/\" class=\"external-link\" target=\"_blank\">MkDocs</a>.\n\nAnd there are extra tools/scripts in place in `./scripts/docs.py`.\n\n/// tip\n\nYou don't need to see the code in `./scripts/docs.py`, you just use it in the command line.\n\n///\n\nAll the documentation is in Markdown format in the directory `./docs`.\n\nMany of the tutorials have blocks of code.\n\nIn most of the cases, these blocks of code are actual complete applications that can be run as is.\n\nIn fact, those blocks of code are not written inside the Markdown, they are Python files in the `./docs_src/` directory.\n\nAnd those Python files are included/injected in the documentation when generating the site.\n\n### Docs for Tests\n\nMost of the tests actually run against the example source files in the documentation.\n\nThis helps to make sure that:\n\n* The documentation is up-to-date.\n* The documentation examples can be run as is.\n* Most of the features are covered by the documentation, ensured by test coverage.\n"
  },
  {
    "file": "docs/environment-variables.md",
    "type": "markdown",
    "content": "# Environment Variables\n\nBefore we jump into **Typer** code, let's cover a bit some of the **basics** that we'll need to understand how to work with Python (and programming) in general. Let's check a bit about **environment variables**.\n\n/// tip\n\nIf you already know what \"environment variables\" are and how to use them, feel free to skip this.\n\n///\n\nAn environment variable (also known as \"**env var**\") is a variable that lives **outside** of the Python code, in the **operating system**, and could be read by your Python code (or by other programs as well).\n\nEnvironment variables could be useful for handling application **settings**, as part of the **installation** of Python, etc.\n\n## Create and Use Env Vars\n\nYou can **create** and use environment variables in the **shell (terminal)**, without needing Python:\n\n//// tab | Linux, macOS, Windows Bash\n\n<div class=\"termy\">\n\n```console\n// You could create an env var MY_NAME with\n$ export MY_NAME=\"Wade Wilson\"\n\n// Then you could use it with other programs, like\n$ echo \"Hello $MY_NAME\"\n\nHello Wade Wilson\n```\n\n</div>\n\n////\n\n//// tab | Windows PowerShell\n\n<div class=\"termy\">\n\n```console\n// Create an env var MY_NAME\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// Use it with other programs, like\n$ echo \"Hello $Env:MY_NAME\"\n\nHello Wade Wilson\n```\n\n</div>\n\n////\n\n## Read env vars in Python\n\nYou could also create environment variables **outside** of Python, in the terminal (or with any other method), and then **read them in Python**.\n\nFor example you could have a file `main.py` with:\n\n```Python hl_lines=\"3\"\nimport os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n```\n\n/// tip\n\nThe second argument to <a href=\"https://docs.python.org/3.8/library/os.html#os.getenv\" class=\"external-link\" target=\"_blank\">`os.getenv()`</a> is the default value to return.\n\nIf not provided, it's `None` by default, here we provide `\"World\"` as the default value to use.\n\n///\n\nThen you could call that Python program:\n\n//// tab | Linux, macOS, Windows Bash\n\n<div class=\"termy\">\n\n```console\n// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ export MY_NAME=\"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n```\n\n</div>\n\n////\n\n//// tab | Windows PowerShell\n\n<div class=\"termy\">\n\n```console\n// Here we don't set the env var yet\n$ python main.py\n\n// As we didn't set the env var, we get the default value\n\nHello World from Python\n\n// But if we create an environment variable first\n$ $Env:MY_NAME = \"Wade Wilson\"\n\n// And then call the program again\n$ python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n```\n\n</div>\n\n////\n\nAs environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to `git`) with the rest of the files, it's common to use them for configurations or **settings**.\n\nYou can also create an environment variable only for a **specific program invocation**, that is only available to that program, and only for its duration.\n\nTo do that, create it right before the program itself, on the same line:\n\n<div class=\"termy\">\n\n```console\n// Create an env var MY_NAME in line for this program call\n$ MY_NAME=\"Wade Wilson\" python main.py\n\n// Now it can read the environment variable\n\nHello Wade Wilson from Python\n\n// The env var no longer exists afterwards\n$ python main.py\n\nHello World from Python\n```\n\n</div>\n\n/// tip\n\nYou can read more about it at <a href=\"https://12factor.net/config\" class=\"external-link\" target=\"_blank\">The Twelve-Factor App: Config</a>.\n\n///\n\n## Types and Validation\n\nThese environment variables can only handle **text strings**, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).\n\nThat means that **any value** read in Python from an environment variable **will be a `str`**, and any conversion to a different type or any validation has to be done in code.\n\nYou will learn more about using environment variables for your <abbr title=\"command line interface\">CLI</abbr> applications later in the section about [CLI Arguments with Environment Variables](./tutorial/arguments/envvar.md){.internal-link target=_blank}.\n\n## `PATH` Environment Variable\n\nThere is a **special** environment variable called **`PATH`** that is used by the operating systems (Linux, macOS, Windows) to find programs to run.\n\nThe value of the variable `PATH` is a long string that is made of directories separated by a colon `:` on Linux and macOS, and by a semicolon `;` on Windows.\n\nFor example, the `PATH` environment variable could look like this:\n\n//// tab | Linux, macOS\n\n```plaintext\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\nThis means that the system should look for programs in the directories:\n\n* `/usr/local/bin`\n* `/usr/bin`\n* `/bin`\n* `/usr/sbin`\n* `/sbin`\n\n////\n\n//// tab | Windows\n\n```plaintext\nC:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n```\n\nThis means that the system should look for programs in the directories:\n\n* `C:\\Program Files\\Python312\\Scripts`\n* `C:\\Program Files\\Python312`\n* `C:\\Windows\\System32`\n\n////\n\nWhen you type a **command** in the terminal, the operating system **looks for** the program in **each of those directories** listed in the `PATH` environment variable.\n\nFor example, when you type `python` in the terminal, the operating system looks for a program called `python` in the **first directory** in that list.\n\nIf it finds it, then it will **use it**. Otherwise it keeps looking in the **other directories**.\n\n### Installing Python and Updating the `PATH`\n\nWhen you install Python, you might be asked if you want to update the `PATH` environment variable.\n\n//// tab | Linux, macOS\n\nLet's say you install Python and it ends up in a directory `/opt/custompython/bin`.\n\nIf you say yes to update the `PATH` environment variable, then the installer will add `/opt/custompython/bin` to the `PATH` environment variable.\n\nIt could look like this:\n\n```plaintext\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n```\n\nThis way, when you type `python` in the terminal, the system will find the Python program in `/opt/custompython/bin` (the last directory) and use that one.\n\n////\n\n//// tab | Windows\n\nLet's say you install Python and it ends up in a directory `C:\\opt\\custompython\\bin`.\n\nIf you say yes to update the `PATH` environment variable, then the installer will add `C:\\opt\\custompython\\bin` to the `PATH` environment variable.\n\n```plaintext\nC:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n```\n\nThis way, when you type `python` in the terminal, the system will find the Python program in `C:\\opt\\custompython\\bin` (the last directory) and use that one.\n\n////\n\nSo, if you type:\n\n<div class=\"termy\">\n\n```console\n$ python\n```\n\n</div>\n\n//// tab | Linux, macOS\n\nThe system will **find** the `python` program in `/opt/custompython/bin` and run it.\n\nIt would be roughly equivalent to typing:\n\n<div class=\"termy\">\n\n```console\n$ /opt/custompython/bin/python\n```\n\n</div>\n\n////\n\n//// tab | Windows\n\nThe system will **find** the `python` program in `C:\\opt\\custompython\\bin\\python` and run it.\n\nIt would be roughly equivalent to typing:\n\n<div class=\"termy\">\n\n```console\n$ C:\\opt\\custompython\\bin\\python\n```\n\n</div>\n\n////\n\nThis information will be useful when learning about [Virtual Environments](virtual-environments.md){.internal-link target=_blank}.\n\nIt will also be useful when you **create your own CLI programs** as, for them to be available for your users, they will need to be somewhere in the `PATH` environment variable.\n\n## Conclusion\n\nWith this you should have a basic understanding of what **environment variables** are and how to use them in Python.\n\nYou can also read more about them in the <a href=\"https://en.wikipedia.org/wiki/Environment_variable\" class=\"external-link\" target=\"_blank\">Wikipedia for Environment Variable</a>.\n\nIn many cases it's not very obvious how environment variables would be useful and applicable right away. But they keep showing up in many different scenarios when you are developing, so it's good to know about them.\n\nFor example, you will need this information in the next section, about [Virtual Environments](virtual-environments.md).\n"
  },
  {
    "file": "docs/features.md",
    "type": "markdown",
    "content": "# Features\n\n## Design based on **FastAPI**\n\n<a href=\"https://fastapi.tiangolo.com\" target=\"_blank\"><img src=\"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" style=\"width: 20%;\"></a>\n\n**Typer** is <a href=\"https://fastapi.tiangolo.com\" class=\"external-link\" target=\"_blank\">FastAPI</a>'s little sibling.\n\nIt follows the same design and ideas. If you know **FastAPI**, you already know **Typer**... more or less.\n\n## Just Modern Python\n\nIt's all based on standard **Python type** declarations. No new syntax to learn. Just standard modern Python.\n\nIf you need a 2 minute refresher of how to use Python types (even if you don't use FastAPI or Typer), check the FastAPI tutorial section: <a href=\"https://fastapi.tiangolo.com/python-types/\" class=\"external-link\" target=\"_blank\">Python types intro</a>.\n\nYou will also see a 20 seconds refresher on the section [Tutorial - User Guide: First Steps](tutorial/first-steps.md){.internal-link target=_blank}.\n\n## Editor support\n\n**Typer** was designed to be easy and intuitive to use, to ensure the best development experience. With autocompletion everywhere.\n\nYou will rarely need to come back to the docs.\n\nHere's how your editor might help you:\n\n* in <a href=\"https://code.visualstudio.com/\" class=\"external-link\" target=\"_blank\">Visual Studio Code</a>:\n\n![editor support](img/vscode-completion.png)\n\n* in <a href=\"https://www.jetbrains.com/pycharm/\" class=\"external-link\" target=\"_blank\">PyCharm</a>:\n\n![editor support](img/pycharm-completion.png)\n\nYou will get completion for everything. That's something no other CLI library provides right now.\n\nNo more guessing what type was that variable, if it could be `None`, etc.\n\n### Short\n\nIt has sensible **defaults** for everything, with optional configurations everywhere. All the parameters can be fine-tuned to do what you need, customize the help, callbacks per parameter, make them required or not, etc.\n\nBut by default, it all **\"just works\"**.\n\n## User friendly CLI apps\n\nThe resulting CLI apps created with **Typer** have the nice features of many \"pro\" command line programs you probably already love.\n\n* Automatic help options for the main CLI program and all its subcommands.\n* Automatic command and subcommand structure handling (you will see more about subcommands in the Tutorial - User Guide).\n* Automatic completion for the CLI app in all operating systems, in all the shells (Bash, Zsh, Fish, PowerShell), so that the final user of your app can just hit <kbd>TAB</kbd> and get the available options or subcommands. *\n\n/// note | * Auto completion\n\nAuto completion works when you create a package (installable with `pip`). Or when using the `typer` command.\n\n**Typer** uses `shellingham` to auto-detect the current shell when installing completion. If you don't want to include `shellingham`, install `typer-slim`.\n\n**Typer** will automatically create 2 *CLI options*:\n\n* `--install-completion`: Install completion for the current shell.\n* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.\n\nIf you didn't add `shellingham` (if you installed `pip install typer-slim`) those *CLI options* take a value with the name of the shell to install completion for, e.g.:\n\n* `--install-completion bash`.\n* `--show-completion powershell`.\n\nThen you can tell the user to install completion after installing your CLI program and the rest will just work.\n\n///\n\n/// tip\n\n**Typer**'s completion is implemented internally, it uses ideas and components from Click and ideas from `click-completion`, but it doesn't use `click-completion` and re-implements some of the relevant parts of Click.\n\nThen it extends those ideas with features and bug fixes. For example, **Typer** programs also support modern versions of PowerShell (e.g. in Windows 10) among all the other shells.\n\n///\n\n## The power of Click\n\n<a href=\"https://click.palletsprojects.com\" class=\"external-link\" target=\"_blank\">Click</a> is one of the most popular tools for building CLIs in Python.\n\n**Typer** is based on it, so you get all its benefits.\n\nBut you can write simpler code with the benefits of modern Python.\n\n## Tested\n\n* 100% <abbr title=\"The amount of code that is automatically tested\">test coverage</abbr>.\n* 100% <abbr title=\"Python type annotations, with this your editor and external tools can give you better support\">type annotated</abbr> code base.\n* Used in production applications.\n"
  },
  {
    "file": "docs/help-typer.md",
    "type": "markdown",
    "content": "# Help Typer - Get Help\n\nAre you liking **Typer**?\n\nWould you like to help Typer, other users, and the author?\n\nOr would you like to get help with **Typer**?\n\nThere are very simple ways to help (several involve just one or two clicks).\n\nAnd there are several ways to get help too.\n\n## Subscribe to the newsletter\n\nYou can subscribe to the (infrequent) [**FastAPI and friends** newsletter](/newsletter/){.internal-link target=_blank} to stay updated about:\n\n* News about FastAPI and friends, including Typer \ud83d\ude80\n* Guides \ud83d\udcdd\n* Features \u2728\n* Breaking changes \ud83d\udea8\n* Tips and tricks \u2705\n\n## Star **Typer** in GitHub\n\nYou can \"star\" Typer in GitHub (clicking the star button at the top right): <a href=\"https://github.com/fastapi/typer\" class=\"external-link\" target=\"_blank\">https://github.com/fastapi/typer</a>.\n\nBy adding a star, other users will be able to find it more easily and see that it has been already useful for others.\n\n## Watch the GitHub repository for releases\n\nYou can \"watch\" Typer in GitHub (clicking the \"watch\" button at the top right): <a href=\"https://github.com/fastapi/typer\" class=\"external-link\" target=\"_blank\">https://github.com/fastapi/typer</a>.\n\nThere you can select \"Releases only\".\n\nBy doing it, you will receive notifications (in your email) whenever there's a new release (a new version) of **Typer** with bug fixes and new features.\n\n## Connect with the author\n\nYou can connect with <a href=\"https://tiangolo.com\" class=\"external-link\" target=\"_blank\">me (Sebasti\u00e1n Ram\u00edrez / `tiangolo`)</a>, the author.\n\nYou can:\n\n* <a href=\"https://github.com/tiangolo\" class=\"external-link\" target=\"_blank\">Follow me on **GitHub**</a>.\n    * See other Open Source projects I have created that could help you.\n    * Follow me to see when I create a new Open Source project.\n* <a href=\"https://twitter.com/tiangolo\" class=\"external-link\" target=\"_blank\">Follow me on **Twitter**</a>.\n    * Tell me how you use Typer (I love to hear that).\n    * Hear when I make announcements or release new tools.\n* <a href=\"https://www.linkedin.com/in/tiangolo/\" class=\"external-link\" target=\"_blank\">Connect with me on **Linkedin**</a>.\n    * Hear when I make announcements or release new tools (although I use Twitter more often \ud83e\udd37\u200d\u2642).\n* Read what I write (or follow me) on <a href=\"https://dev.to/tiangolo\" class=\"external-link\" target=\"_blank\">**Dev.to**</a> or <a href=\"https://medium.com/@tiangolo\" class=\"external-link\" target=\"_blank\">**Medium**</a>.\n    * Read other ideas, articles, and read about tools I have created.\n    * Follow me to read when I publish something new.\n\n## Tweet about **Typer**\n\n<a href=\"https://twitter.com/compose/tweet?text=I'm loving Typer because... https://github.com/fastapi/typer cc @tiangolo\" class=\"external-link\" target=\"_blank\">Tweet about **Typer**</a> and let me and others know why you like it.\n\nI love to hear about how **Typer** is being used, what have you liked in it, in which project/company you are using it, etc.\n\n## Help others with questions in GitHub\n\nYou can try and help others with their questions in:\n\n* <a href=\"https://github.com/fastapi/typer/discussions/categories/questions?discussions_q=category%3AQuestions+is%3Aunanswered\" class=\"external-link\" target=\"_blank\">GitHub Discussions</a>\n* <a href=\"https://github.com/fastapi/typer/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aquestion+-label%3Aanswered+\" class=\"external-link\" target=\"_blank\">GitHub Issues</a>\n\nIn many cases you might already know the answer for those questions. \ud83e\udd13\n\nJust remember, the most important point is: try to be kind. People come with their frustrations and in many cases don't ask in the best way, but try as best as you can to be kind. \ud83e\udd17\n\nThe idea is for the **Typer** community to be kind and welcoming. At the same time, don't accept bullying or disrespectful behavior towards others. We have to take care of each other.\n\n---\n\nHere's how to help others with questions (in discussions or issues):\n\n### Understand the question\n\n* Check if you can understand what is the **purpose** and use case of the person asking.\n\n* Then check if the question (the vast majority are questions) is **clear**.\n\n* In many cases the question asked is about an imaginary solution from the user, but there might be a **better** one. If you can understand the problem and use case better, you might be able to suggest a better **alternative solution**.\n\n* If you can't understand the question, ask for more **details**.\n\n### Reproduce the problem\n\nFor most of the cases and most of the questions there's something related to the person's **original code**.\n\nIn many cases they will only copy a fragment of the code, but that's not enough to **reproduce the problem**.\n\n* You can ask them to provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\" class=\"external-link\" target=\"_blank\">minimal, reproducible, example</a>, that you can **copy-paste** and run locally to see the same error or behavior they are seeing, or to understand their use case better.\n\n* If you are feeling too generous, you can try to **create an example** like that yourself, just based on the description of the problem. Just have in mind that this might take a lot of time and it might be better to ask them to clarify the problem first.\n\n### Suggest solutions\n\n* After being able to understand the question, you can give them a possible **answer**.\n\n* In many cases, it's better to understand their **underlying problem or use case**, because there might be a better way to solve it than what they are trying to do.\n\n### Ask to close\n\nIf they reply, there's a high chance you would have solved their problem, congrats, **you're a hero**! \ud83e\uddb8\n\n* Now, if that solved their problem, you can ask them to:\n\n    * In GitHub Discussions: mark the comment as the **answer**.\n    * In GitHub Issues: **close** the issue**.\n\n## Watch the GitHub repository\n\nYou can \"watch\" Typer in GitHub (clicking the \"watch\" button at the top right): <a href=\"https://github.com/fastapi/typer\" class=\"external-link\" target=\"_blank\">https://github.com/fastapi/typer</a>.\n\nIf you select \"Watching\" instead of \"Releases only\" you will receive notifications when someone creates a new issue or question. You can also specify that you only want to be notified about new issues, or discussions, or PRs, etc.\n\nThen you can try and help them solve those questions.\n\n## Ask Questions\n\nYou can <a href=\"https://github.com/fastapi/typer/discussions/new?category=questions\" class=\"external-link\" target=\"_blank\">create a new question</a> in the GitHub repository, for example to:\n\n* Ask a **question** or ask about a **problem**.\n* Suggest a new **feature**.\n\n**Note**: if you do it, then I'm going to ask you to also help others. \ud83d\ude09\n\n## Review Pull Requests\n\nYou can help me review pull requests from others.\n\nAgain, please try your best to be kind. \ud83e\udd17\n\n---\n\nHere's what to have in mind and how to review a pull request:\n\n### Understand the problem\n\n* First, make sure you **understand the problem** that the pull request is trying to solve. It might have a longer discussion in a GitHub Discussion or issue.\n\n* There's also a good chance that the pull request is not actually needed because the problem can be solved in a **different way**. Then you can suggest or ask about that.\n\n### Don't worry about style\n\n* Don't worry too much about things like commit message styles, I will squash and merge customizing the commit manually.\n\n* Also don't worry about style rules, there are already automated tools checking that.\n\nAnd if there's any other style or consistency need, I'll ask directly for that, or I'll add commits on top with the needed changes.\n\n### Check the code\n\n* Check and read the code, see if it makes sense, **run it locally** and see if it actually solves the problem.\n\n* Then **comment** saying that you did that, that's how I will know you really checked it.\n\n/// info\n\nUnfortunately, I can't simply trust PRs that just have several approvals.\n\nSeveral times it has happened that there are PRs with 3, 5 or more approvals, probably because the description is appealing, but when I check the PRs, they are actually broken, have a bug, or don't solve the problem they claim to solve. \ud83d\ude05\n\nSo, it's really important that you actually read and run the code, and let me know in the comments that you did. \ud83e\udd13\n\n///\n\n* If the PR can be simplified in a way, you can ask for that, but there's no need to be too picky, there might be a lot of subjective points of view (and I will have my own as well \ud83d\ude48), so it's better if you can focus on the fundamental things.\n\n### Tests\n\n* Help me check that the PR has **tests**.\n\n* Check that the tests **fail** before the PR. \ud83d\udea8\n\n* Then check that the tests **pass** after the PR. \u2705\n\n* Many PRs don't have tests, you can **remind** them to add tests, or you can even **suggest** some tests yourself. That's one of the things that consume most time and you can help a lot with that.\n\n* Then also comment what you tried, that way I'll know that you checked it. \ud83e\udd13\n\n## Create a Pull Request\n\nYou can [contribute](contributing.md){.internal-link target=_blank} to the source code with Pull Requests, for example:\n\n* To fix a typo you found on the documentation.\n* To propose new documentation sections.\n* To fix an existing issue/bug.\n    * Make sure to add tests.\n* To add a new feature.\n    * Make sure to add tests.\n    * Make sure to add documentation if it's relevant.\n\n## Help Maintain Typer\n\nHelp me maintain **Typer**! \ud83e\udd13\n\nThere's a lot of work to do, and for most of it, **YOU** can do it.\n\nThe main tasks that you can do right now are:\n\n* [Help others with questions in GitHub](#help-others-with-questions-in-github){.internal-link target=_blank} (see the section above).\n* [Review Pull Requests](#review-pull-requests){.internal-link target=_blank} (see the section above).\n\nThose two tasks are what **consume time the most**. That's the main work of maintaining Typer.\n\nIf you can help me with that, **you are helping me maintain Typer** and making sure it keeps **advancing faster and better**. \ud83d\ude80\n\n## Join the chat\n\nJoin the \ud83d\udc65 <a href=\"https://discord.gg/VQjSZaeJmf\" class=\"external-link\" target=\"_blank\">FastAPI and Friends Discord chat server</a> \ud83d\udc65 and hang out with others in the community. There's a `#typer` channel.\n\n/// tip\n\nFor questions, ask them in <a href=\"https://github.com/fastapi/typer/discussions/new?category=questions\" class=\"external-link\" target=\"_blank\">GitHub Discussions</a>, there's a much better chance you will receive help there.\n\nUse the chat only for other general conversations.\n\n///\n\n### Don't use the chat for questions\n\nHave in mind that as chats allow more \"free conversation\", it's easy to ask questions that are too general and more difficult to answer, so, you might not receive answers.\n\nIn GitHub, the template will guide you to write the right question so that you can more easily get a good answer, or even solve the problem yourself even before asking. And in GitHub I can make sure I always answer everything, even if it takes some time. I can't personally do that with the chat. \ud83d\ude05\n\nConversations in the chat are also not as easily searchable as in GitHub, so questions and answers might get lost in the conversation.\n\nOn the other side, there are thousands of users in the chat, so there's a high chance you'll find someone to talk to there, almost all the time. \ud83d\ude04\n\n## Sponsor the author\n\nYou can also financially support the author (me) through <a href=\"https://github.com/sponsors/tiangolo\" class=\"external-link\" target=\"_blank\">GitHub sponsors</a>.\n\nThere you could buy me a coffee \u2615\ufe0f to say thanks. \ud83d\ude04\n\n## Sponsor the tools that power Typer\n\nAs you have seen in the documentation, Typer is built on top of Click.\n\nYou can also sponsor:\n\n* Pallets Project (Click maintainers) <a href=\"https://palletsprojects.com/donate\" class=\"external-link\" target=\"_blank\">via the PSF</a> or <a href=\"https://tidelift.com/subscription/pkg/pypi-click\" class=\"external-link\" target=\"_blank\">via Tidelift</a>\n\n---\n\nThanks! \ud83d\ude80\n"
  },
  {
    "file": "docs/index.md",
    "type": "markdown",
    "content": "<style>\n.md-content .md-typeset h1 { display: none; }\n</style>\n\n<p align=\"center\">\n  <a href=\"https://typer.tiangolo.com\"><img src=\"https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg#only-light\" alt=\"Typer\"></a>\n<!-- only-mkdocs -->\n  <a href=\"https://typer.tiangolo.com\"><img src=\"img/logo-margin/logo-margin-white-vector.svg#only-dark\" alt=\"Typer\"></a>\n<!-- /only-mkdocs -->\n</p>\n<p align=\"center\">\n    <em>Typer, build great CLIs. Easy to code. Based on Python type hints.</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/fastapi/typer/actions?query=workflow%3ATest\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/typer/workflows/Test/badge.svg\" alt=\"Test\">\n</a>\n<a href=\"https://github.com/fastapi/typer/actions?query=workflow%3APublish\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/typer/workflows/Publish/badge.svg\" alt=\"Publish\">\n</a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/typer\" target=\"_blank\">\n    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/fastapi/typer.svg\" alt=\"Coverage\">\n<a href=\"https://pypi.org/project/typer\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/typer?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n</p>\n\n---\n\n**Documentation**: <a href=\"https://typer.tiangolo.com\" target=\"_blank\">https://typer.tiangolo.com</a>\n\n**Source Code**: <a href=\"https://github.com/fastapi/typer\" target=\"_blank\">https://github.com/fastapi/typer</a>\n\n---\n\nTyper is a library for building <abbr title=\"command line interface, programs executed from a terminal\">CLI</abbr> applications that users will **love using** and developers will **love creating**. Based on Python type hints.\n\nIt's also a command line tool to run scripts, automatically converting them to CLI applications.\n\nThe key features are:\n\n* **Intuitive to write**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.\n* **Easy to use**: It's easy to use for the final users. Automatic help, and automatic completion for all shells.\n* **Short**: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.\n* **Start simple**: The simplest example adds only 2 lines of code to your app: **1 import, 1 function call**.\n* **Grow large**: Grow in complexity as much as you want, create arbitrarily complex trees of commands and groups of subcommands, with options and arguments.\n* **Run scripts**: Typer includes a `typer` command/program that you can use to run scripts, automatically converting them to CLIs, even if they don't use Typer internally.\n\n## FastAPI of CLIs\n\n**Typer** is <a href=\"https://fastapi.tiangolo.com\" class=\"external-link\" target=\"_blank\">FastAPI</a>'s little sibling, it's the FastAPI of CLIs.\n\n## Installation\n\nCreate and activate a <a href=\"https://typer.tiangolo.com/virtual-environments/\" class=\"external-link\" target=\"_blank\">virtual environment</a> and then install **Typer**:\n\n<div class=\"termy\">\n\n```console\n$ pip install typer\n---> 100%\nSuccessfully installed typer rich shellingham\n```\n\n</div>\n\n## Example\n\n### The absolute minimum\n\n* Create a file `main.py` with:\n\n```Python\ndef main(name: str):\n    print(f\"Hello {name}\")\n```\n\nThis script doesn't even use Typer internally. But you can use the `typer` command to run it as a CLI application.\n\n### Run it\n\nRun your application with the `typer` command:\n\n<div class=\"termy\">\n\n```console\n// Run your application\n$ typer main.py run\n\n// You get a nice error, you are missing NAME\nUsage: typer [PATH_OR_MODULE] run [OPTIONS] NAME\nTry 'typer [PATH_OR_MODULE] run --help' for help.\n\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Missing argument 'NAME'.                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n// You get a --help for free\n$ typer main.py run --help\n\nUsage: typer [PATH_OR_MODULE] run [OPTIONS] NAME\n\nRun the provided Typer app.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]   |\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// Now pass the NAME argument\n$ typer main.py run Camila\n\nHello Camila\n\n// It works! \ud83c\udf89\n```\n\n</div>\n\nThis is the simplest use case, not even using Typer internally, but it can already be quite useful for simple scripts.\n\n**Note**: auto-completion works when you create a Python package and run it with `--install-completion` or when you use the `typer` command.\n\n## Use Typer in your code\n\nNow let's start using Typer in your own code, update `main.py` with:\n\n```Python\nimport typer\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\nNow you could run it with Python directly:\n\n<div class=\"termy\">\n\n```console\n// Run your application\n$ python main.py\n\n// You get a nice error, you are missing NAME\nUsage: main.py [OPTIONS] NAME\nTry 'main.py --help' for help.\n\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Missing argument 'NAME'.                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n// You get a --help for free\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]   |\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// Now pass the NAME argument\n$ python main.py Camila\n\nHello Camila\n\n// It works! \ud83c\udf89\n```\n\n</div>\n\n**Note**: you can also call this same script with the `typer` command, but you don't need to.\n\n## Example upgrade\n\nThis was the simplest example possible.\n\nNow let's see one a bit more complex.\n\n### An example with two subcommands\n\nModify the file `main.py`.\n\nCreate a `typer.Typer()` app, and create two subcommands with their parameters.\n\n```Python hl_lines=\"3  6  11  20\"\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: str):\n    print(f\"Hello {name}\")\n\n\n@app.command()\ndef goodbye(name: str, formal: bool = False):\n    if formal:\n        print(f\"Goodbye Ms. {name}. Have a good day.\")\n    else:\n        print(f\"Bye {name}!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\nAnd that will:\n\n* Explicitly create a `typer.Typer` app.\n    * The previous `typer.run` actually creates one implicitly for you.\n* Add two subcommands with `@app.command()`.\n* Execute the `app()` itself, as if it was a function (instead of `typer.run`).\n\n### Run the upgraded example\n\nCheck the new help:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n Usage: main.py [OPTIONS] COMMAND [ARGS]...\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --install-completion          Install completion  \u2502\n\u2502                               for the current     \u2502\n\u2502                               shell.              \u2502\n\u2502 --show-completion             Show completion for \u2502\n\u2502                               the current shell,  \u2502\n\u2502                               to copy it or       \u2502\n\u2502                               customize the       \u2502\n\u2502                               installation.       \u2502\n\u2502 --help                        Show this message   \u2502\n\u2502                               and exit.           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 goodbye                                           \u2502\n\u2502 hello                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// When you create a package you get \u2728 auto-completion \u2728 for free, installed with --install-completion\n\n// You have 2 subcommands (the 2 functions): goodbye and hello\n```\n\n</div>\n\nNow check the help for the `hello` command:\n\n<div class=\"termy\">\n\n```console\n$ python main.py hello --help\n\n Usage: main.py hello [OPTIONS] NAME\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n```\n\n</div>\n\nAnd now check the help for the `goodbye` command:\n\n<div class=\"termy\">\n\n```console\n$ python main.py goodbye --help\n\n Usage: main.py goodbye [OPTIONS] NAME\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    name      TEXT  [default: None] [required]   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --formal    --no-formal      [default: no-formal] \u2502\n\u2502 --help                       Show this message    \u2502\n\u2502                              and exit.            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n// Automatic --formal and --no-formal for the bool option \ud83c\udf89\n```\n\n</div>\n\nNow you can try out the new command line application:\n\n<div class=\"termy\">\n\n```console\n// Use it with the hello command\n\n$ python main.py hello Camila\n\nHello Camila\n\n// And with the goodbye command\n\n$ python main.py goodbye Camila\n\nBye Camila!\n\n// And with --formal\n\n$ python main.py goodbye --formal Camila\n\nGoodbye Ms. Camila. Have a good day.\n```\n\n</div>\n\n**Note**: If your app only has one command, by default the command name is **omitted** in usage: `python main.py Camila`. However, when there are multiple commands, you must **explicitly include the command name**: `python main.py hello Camila`. See [One or Multiple Commands](https://typer.tiangolo.com/tutorial/commands/one-or-multiple/) for more details.\n\n### Recap\n\nIn summary, you declare **once** the types of parameters (*CLI arguments* and *CLI options*) as function parameters.\n\nYou do that with standard modern Python types.\n\nYou don't have to learn a new syntax, the methods or classes of a specific library, etc.\n\nJust standard **Python**.\n\nFor example, for an `int`:\n\n```Python\ntotal: int\n```\n\nor for a `bool` flag:\n\n```Python\nforce: bool\n```\n\nAnd similarly for **files**, **paths**, **enums** (choices), etc. And there are tools to create **groups of subcommands**, add metadata, extra **validation**, etc.\n\n**You get**: great editor support, including **completion** and **type checks** everywhere.\n\n**Your users get**: automatic **`--help`**, **auto-completion** in their terminal (Bash, Zsh, Fish, PowerShell) when they install your package or when using the `typer` command.\n\nFor a more complete example including more features, see the <a href=\"https://typer.tiangolo.com/tutorial/\">Tutorial - User Guide</a>.\n\n## Dependencies\n\n**Typer** stands on the shoulders of a giant. Its only internal required dependency is <a href=\"https://click.palletsprojects.com/\" class=\"external-link\" target=\"_blank\">Click</a>.\n\nBy default it also comes with extra standard dependencies:\n\n* <a href=\"https://rich.readthedocs.io/en/stable/index.html\" class=\"external-link\" target=\"_blank\"><code>rich</code></a>: to show nicely formatted errors automatically.\n* <a href=\"https://github.com/sarugaku/shellingham\" class=\"external-link\" target=\"_blank\"><code>shellingham</code></a>: to automatically detect the current shell when installing completion.\n    * With `shellingham` you can just use `--install-completion`.\n    * Without `shellingham`, you have to pass the name of the shell to install completion for, e.g. `--install-completion bash`.\n\n### `typer-slim`\n\nIf you don't want the extra standard optional dependencies, install `typer-slim` instead.\n\nWhen you install with:\n\n```bash\npip install typer\n```\n\n...it includes the same code and dependencies as:\n\n```bash\npip install \"typer-slim[standard]\"\n```\n\nThe `standard` extra dependencies are `rich` and `shellingham`.\n\n**Note**: The `typer` command is only included in the `typer` package.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
  },
  {
    "file": "docs/management-tasks.md",
    "type": "markdown",
    "content": "# Repository Management Tasks\n\nThese are the tasks that can be performed to manage the Typer repository by [team members](./management.md#team){.internal-link target=_blank}.\n\n/// tip\n\nThis section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. \ud83d\ude09\n\n///\n\n...so, you are a [team member of Typer](./management.md#team){.internal-link target=_blank}? Wow, you are so cool! \ud83d\ude0e\n\nYou can help with everything on [Help Typer - Get Help](./help-typer.md){.internal-link target=_blank} the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.\n\nHere are the general instructions for the tasks you can perform.\n\nThanks a lot for your help. \ud83d\ude47\n\n## Be Nice\n\nFirst of all, be nice. \ud83d\ude0a\n\nYou probably are super nice if you were added to the team, but it's worth mentioning it. \ud83e\udd13\n\n### When Things are Difficult\n\nWhen things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.\n\nTry to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.\n\nIt's difficult to convey emotion in text, use emojis to help. \ud83d\ude05\n\nIn discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.\n\nTry to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.\n\nTry to be as specific and objective as possible, avoid generalizations.\n\nFor conversations that are more difficult, for example to reject a PR, you can ask me (@tiangolo) to handle it directly.\n\n## Edit PR Titles\n\n* Edit the PR title to start with an emoji from <a href=\"https://gitmoji.dev/\" class=\"external-link\" target=\"_blank\">gitmoji</a>.\n    * Use the emoji character, not the GitHub code. So, use `\ud83d\udc1b` instead of `:bug:`. This is so that it shows up correctly outside of GitHub, for example in the release notes.\n* Start the title with a verb. For example `Add`, `Refactor`, `Fix`, etc. This way the title will say the action that the PR does. Like `Add support for teleporting`, instead of `Teleporting wasn't working, so this PR fixes it`.\n* Edit the text of the PR title to start in \"imperative\", like giving an order. So, instead of `Adding support for teleporting` use `Add support for teleporting`.\n* Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example `Add support for teleporting` instead of `Create TeleportAdapter class`.\n* Do not finish the title with a period (`.`).\n\nOnce the PR is merged, a GitHub Action (<a href=\"https://github.com/tiangolo/latest-changes\" class=\"external-link\" target=\"_blank\">latest-changes</a>) will use the PR title to update the latest changes automatically.\n\nSo, having a nice PR title will not only look nice in GitHub, but also in the release notes. \ud83d\udcdd\n\n## Add Labels to PRs\n\nThe same GitHub Action <a href=\"https://github.com/tiangolo/latest-changes\" class=\"external-link\" target=\"_blank\">latest-changes</a> uses one label in the PR to decide the section in the release notes to put this PR in.\n\nMake sure you use a supported label from the <a href=\"https://github.com/tiangolo/latest-changes#using-labels\" class=\"external-link\" target=\"_blank\">latest-changes list of labels</a>:\n\n* `breaking`: Breaking Changes\n    * Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.\n* `security`: Security Fixes\n    * This is for security fixes, like vulnerabilities. It would almost never be used.\n* `feature`: Features\n    * New features, adding support for things that didn't exist before.\n* `bug`: Fixes\n    * Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.\n* `refactor`: Refactors\n    * This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.\n* `upgrade`: Upgrades\n    * This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in `pyproject.toml`. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in `requirements.txt` files or GitHub Action versions should be marked as `internal`, not `upgrade`.\n* `docs`: Docs\n    * Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.\n    * You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with `docs/en/docs`. The original version of the docs is always in English, so in `docs/en/docs`.\n* `internal`: Internal\n    * Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.\n\n/// tip\n\nSome tools like Dependabot, will add some labels, like `dependencies`, but have in mind that this label is not used by the `latest-changes` GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.\n\n///\n\n## Review PRs\n\nIf a PR doesn't explain what it does or why, ask for more information.\n\nA PR should have a specific use case that it is solving.\n\n* If the PR is for a feature, it should have docs.\n    * Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.\n* The docs should include a source example file, not write Python directly in Markdown.\n* If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.\n* There should be tests testing the source example.\n* Before the PR is applied, the new tests should fail.\n* After applying the PR, the new tests should pass.\n* Coverage should stay at 100%.\n* If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.\n* Feel free to comment in the PR to ask for more information, to suggest changes, etc.\n* Once you think the PR is ready, move it in the internal GitHub project for me to review it.\n\n## Dependabot PRs\n\nDependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.\n\n* If the PR is for a direct dependency, so, Dependabot is modifying `pyproject.toml`, **don't merge it**. \ud83d\ude31 Let me check it first. There's a good chance that some additional tweaks or updates are needed.\n* If the PR updates one of the internal dependencies, for example it's modifying `requirements.txt` files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. \ud83d\ude0e\n\n## Mark GitHub Discussions Answers\n\nWhen a question in GitHub Discussions has been answered, mark the answer by clicking \"Mark as answer\".\n\nMany of the current Discussion Questions were migrated from old issues. Many have the label `answered`, that means they were answered when they were issues, but now in GitHub Discussions, it's not known what is the actual response from the messages.\n\nYou can filter discussions by <a href=\"https://github.com/fastapi/typer/discussions/categories/questions?discussions_q=category:Questions+is:open+is:unanswered\" class=\"external-link\" target=\"_blank\">`Questions` that are `Unanswered`</a>.\n"
  },
  {
    "file": "docs/management.md",
    "type": "markdown",
    "content": "# Repository Management\n\nHere's a short description of how the Typer repository is managed and maintained.\n\n## Owner\n\nI, <a href=\"https://github.com/tiangolo\" target=\"_blank\">@tiangolo</a>, am the creator and owner of the Typer repository. \ud83e\udd13\n\nI normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the <a href=\"https://en.wikipedia.org/wiki/Benevolent_dictator_for_life\" class=\"external-link\" target=\"_blank\"><abbr title=\"Benevolent Dictator For Life\">BDFL</abbr></a>. \ud83d\ude05\n\n## Team\n\nThere's a team of people that help manage and maintain the project. \ud83d\ude0e\n\nThey have different levels of permissions and [specific instructions](./management-tasks.md){.internal-link target=_blank}.\n\nSome of the tasks they can perform include:\n\n* Adding labels to PRs.\n* Editing PR titles.\n* Adding commits on top of PRs to tweak them.\n* Mark answers in GitHub Discussions questions, etc.\n* Merge some specific types of PRs.\n\nJoining the team is by invitation only, and I could update or remove permissions, instructions, or membership.\n\n### Team Members\n\nThis is the current list of team members. \ud83d\ude0e\n\n<div class=\"user-list user-list-center\">\n{% for user in members[\"members\"] %}\n\n<div class=\"user\"><a href=\"https://github.com/{{ user.login }}\" target=\"_blank\"><div class=\"avatar-wrapper\"><img src=\"https://github.com/{{ user.login }}.png\"/></div><div class=\"title\">@{{ user.login }}</div></a></div>\n{% endfor %}\n\n</div>\n\nAdditional to them, there's a large community of people helping each other and getting involved in the projects in different ways.\n\n## External Contributions\n\nExternal contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. \ud83d\ude47\u200d\u2642\ufe0f\n\nThere are many ways to [help maintain Typer](./help-typer.md){.internal-link target=_blank}.\n"
  },
  {
    "file": "docs/release-notes.md",
    "type": "markdown",
    "content": "# Release Notes\n\n## Latest Changes\n\n### Refactors\n\n* \ud83d\udd25 Drop support for Python 3.7. PR [#830](https://github.com/fastapi/typer/pull/830) by [@kinuax](https://github.com/kinuax).\n\n## 0.19.1\n\n**Note**: this is the last version to support Python 3.7, going forward Typer will require Python 3.8+. And soon Python 3.8 will also be dropped as [Python 3.8 reached it's end of life](https://devguide.python.org/versions/) almost a year ago.\n\n### Fixes\n\n* \ud83d\udc1b Ensure that `Optional[list]` values work correctly with callbacks. PR [#1018](https://github.com/fastapi/typer/pull/1018) by [@solesensei](https://github.com/solesensei).\n\n## 0.19.0\n\n### Features\n\n* \u2728 Support `typing.Literal` to define a set of predefined choices. PR [#429](https://github.com/fastapi/typer/pull/429) by [@blackary](https://github.com/blackary).\n* \u2728 Allow setting an environment variable to `None` in `CliRunner.invoke`. PR [#1303](https://github.com/fastapi/typer/pull/1303) by [@arjenzorgdoc](https://github.com/arjenzorgdoc).\n\n### Refactors\n\n* \u2705 Use Ruff rules to ensure safe lazy-loading of `rich`. PR [#1297](https://github.com/fastapi/typer/pull/1297) by [@nathanjmcdougall](https://github.com/nathanjmcdougall).\n* \u2705 Avoid rich formatting in number test. PR [#1305](https://github.com/fastapi/typer/pull/1305) by [@svlandeg](https://github.com/svlandeg).\n\n### Docs\n\n* \ud83d\udcdd Clarify single-command vs multi-command behaviour in README. PR [#1268](https://github.com/fastapi/typer/pull/1268) by [@MorgenPronk](https://github.com/MorgenPronk).\n\n## 0.18.0\n\n### Fixes\n\n* \ud83d\udc7d\ufe0f Ensure compatibility with Click 8.3.0 by restoring the original `value_is_missing` function. PR [#1333](https://github.com/fastapi/typer/pull/1333) by [@svlandeg](https://github.com/svlandeg).\n\n### Upgrades\n\n* \ud83d\udccc Remove pin for Click < 8.3.0 now that there's a fix for the changes. PR [#1346](https://github.com/fastapi/typer/pull/1346) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.17.5\n\n### Fixes\n\n* \u2b07\ufe0f Restrict Click to below 8.3.0 to handle changes in the new version. PR [#1336](https://github.com/fastapi/typer/pull/1336) by [@svlandeg](https://github.com/svlandeg).\n\n### Internal\n\n* \u2b06 Bump mkdocs-material from 9.6.14 to 9.6.20. PR [#1308](https://github.com/fastapi/typer/pull/1308) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-material from 9.5.50 to 9.6.14. PR [#1223](https://github.com/fastapi/typer/pull/1223) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump actions/download-artifact from 4 to 5. PR [#1269](https://github.com/fastapi/typer/pull/1269) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.12.12 to 0.13.0. PR [#1302](https://github.com/fastapi/typer/pull/1302) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1307](https://github.com/fastapi/typer/pull/1307) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Update pytest-cov requirement from <7.0.0,>=2.10.0 to >=2.10.0,<8.0.0. PR [#1301](https://github.com/fastapi/typer/pull/1301) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump actions/setup-python from 5 to 6. PR [#1291](https://github.com/fastapi/typer/pull/1291) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.12.11 to 0.12.12. PR [#1295](https://github.com/fastapi/typer/pull/1295) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1300](https://github.com/fastapi/typer/pull/1300) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump actions/labeler from 5 to 6. PR [#1296](https://github.com/fastapi/typer/pull/1296) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n## 0.17.4\n\n### Fixes\n\n* \ud83d\udc1b Make sure `rich.markup` is imported when rendering help text. PR [#1290](https://github.com/fastapi/typer/pull/1290) by [@g-arjones](https://github.com/g-arjones).\n\n### Internal\n\n* \u2b06 Bump pypa/gh-action-pypi-publish from 1.12.4 to 1.13.0. PR [#1292](https://github.com/fastapi/typer/pull/1292) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.12.10 to 0.12.11. PR [#1283](https://github.com/fastapi/typer/pull/1283) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1288](https://github.com/fastapi/typer/pull/1288) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \ud83d\udc77 Set permissions for conflict detector workflow. PR [#1287](https://github.com/fastapi/typer/pull/1287) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udc77 Detect and label merge conflicts on PRs automatically. PR [#1286](https://github.com/fastapi/typer/pull/1286) by [@svlandeg](https://github.com/svlandeg).\n\n## 0.17.3\n\n### Features\n\n* \u2728 Allow annotated parsing with a subclass of `Path`. PR [#1183](https://github.com/fastapi/typer/pull/1183) by [@emfdavid](https://github.com/emfdavid).\n\n## 0.17.2\n\n### Fixes\n\n* \ud83d\udc1b Avoid printing `default: None` in the help section when using Rich. PR [#1120](https://github.com/fastapi/typer/pull/1120) by [@mattmess1221](https://github.com/mattmess1221).\n\n## 0.17.1\n\n### Fixes\n\n* \ud83d\udc1b Fix markdown formatting in `--help` output. PR [#815](https://github.com/fastapi/typer/pull/815) by [@gar1t](https://github.com/gar1t).\n\n## 0.17.0\n\n### Features\n\n* \u26a1\ufe0f Lazy-load `rich_utils` to reduce startup time. PR [#1128](https://github.com/fastapi/typer/pull/1128) by [@oefe](https://github.com/oefe).\n\n### Internal\n\n* \u2b06 Bump ruff from 0.12.9 to 0.12.10. PR [#1280](https://github.com/fastapi/typer/pull/1280) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1281](https://github.com/fastapi/typer/pull/1281) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Update pytest-sugar requirement from <1.1.0,>=0.9.4 to >=0.9.4,<1.2.0. PR [#1279](https://github.com/fastapi/typer/pull/1279) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n## 0.16.1\n\n### Fixes\n\n* \ud83d\udc1b Avoid printing additional output with `no_args_is_help=True` and Click 8.2. PR [#1278](https://github.com/fastapi/typer/pull/1278) by [@svlandeg](https://github.com/svlandeg).\n\n### Docs\n\n* \ud83d\udcdd Remove duplicated line in `environment-variables.md`. PR [#1277](https://github.com/fastapi/typer/pull/1277) by [@neirzhei](https://github.com/neirzhei).\n* \ud83d\udcdd Fix reference to `count` parameter in the documentation. PR [#1201](https://github.com/fastapi/typer/pull/1201) by [@PokkaKiyo](https://github.com/PokkaKiyo).\n\n### Internal\n\n* \u2b06 Bump ruff from 0.11.13 to 0.12.9. PR [#1276](https://github.com/fastapi/typer/pull/1276) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1247](https://github.com/fastapi/typer/pull/1247) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump actions/checkout from 4 to 5. PR [#1271](https://github.com/fastapi/typer/pull/1271) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-macros-plugin from 1.3.7 to 1.3.9. PR [#1272](https://github.com/fastapi/typer/pull/1272) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump tiangolo/latest-changes from 0.3.2 to 0.4.0. PR [#1265](https://github.com/fastapi/typer/pull/1265) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pillow from 11.2.1 to 11.3.0. PR [#1249](https://github.com/fastapi/typer/pull/1249) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1206](https://github.com/fastapi/typer/pull/1206) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump pillow from 11.1.0 to 11.2.1. PR [#1198](https://github.com/fastapi/typer/pull/1198) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump cairosvg from 2.7.1 to 2.8.2. PR [#1226](https://github.com/fastapi/typer/pull/1226) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.11.6 to 0.11.13. PR [#1241](https://github.com/fastapi/typer/pull/1241) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n## 0.16.0\n\n### Upgrades\n\n* \u2b06\ufe0f Add compatibility with Click 8.2. PR [#1222](https://github.com/fastapi/typer/pull/1222) by [@tiangolo](https://github.com/tiangolo).\n\nWhen using the `CliRunner` with Click < 8.2, to be able to access the `stderr` output, you needed to set the `mix_stderr` parameter to `True`. Since Click 8.2 (and Typer 0.160 this release supporting it) this is no longer necessary, so this parameter has been removed.\n\n### Refactors\n\n* \u2705 Refactor tests for compatibility with Click 8.2. PR [#1230](https://github.com/fastapi/typer/pull/1230) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \ud83d\udd27 Remove Google Analytics. PR [#1229](https://github.com/fastapi/typer/pull/1229) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.15.4\n\n### Upgrades\n\n* \ud83d\udccc Pin Click to < 8.2, compatibility for Click >= 8.2 will be added in a future version. PR [#1225](https://github.com/fastapi/typer/pull/1225) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.15.3\n\n### Fixes\n\n* \ud83d\udc1b Ensure that autocompletion works for `Path` arguments/options. PR [#1138](https://github.com/fastapi/typer/pull/1138) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udc1b Fix newline after header in help text, and add more tests for the behaviour of `rich_markup_mode` . PR [#964](https://github.com/fastapi/typer/pull/964) by [@svlandeg](https://github.com/svlandeg).\n\n### Internal\n\n* \u2b06 Bump astral-sh/setup-uv from 5 to 6. PR [#1203](https://github.com/fastapi/typer/pull/1203) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.11.2 to 0.11.6. PR [#1200](https://github.com/fastapi/typer/pull/1200) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1196](https://github.com/fastapi/typer/pull/1196) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.11.1 to 0.11.2. PR [#1186](https://github.com/fastapi/typer/pull/1186) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1187](https://github.com/fastapi/typer/pull/1187) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.11.0 to 0.11.1. PR [#1185](https://github.com/fastapi/typer/pull/1185) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.9.10 to 0.11.0. PR [#1180](https://github.com/fastapi/typer/pull/1180) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1181](https://github.com/fastapi/typer/pull/1181) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1176](https://github.com/fastapi/typer/pull/1176) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.9.9 to 0.9.10. PR [#1175](https://github.com/fastapi/typer/pull/1175) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1171](https://github.com/fastapi/typer/pull/1171) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.9.7 to 0.9.9. PR [#1166](https://github.com/fastapi/typer/pull/1166) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u270f\ufe0f Fix typo in test name. PR [#1165](https://github.com/fastapi/typer/pull/1165) by [@svlandeg](https://github.com/svlandeg).\n\n## 0.15.2\n\n### Features\n\n* \u2728 Allow custom styles for commands in help output. PR [#1103](https://github.com/fastapi/typer/pull/1103) by [@TheTechromancer](https://github.com/TheTechromancer).\n* \u2728 Avoid the unnecessary import of `typing_extensions` in newer Python versions. PR [#1048](https://github.com/fastapi/typer/pull/1048) by [@horta](https://github.com/horta).\n\n### Fixes\n\n* \ud83d\udc1b Fix shell completions for the fish shell. PR [#1069](https://github.com/fastapi/typer/pull/1069) by [@goraje](https://github.com/goraje).\n\n### Refactors\n\n* \ud83d\ude9a Rename test to corner-cases to make it more explicit. PR [#1083](https://github.com/fastapi/typer/pull/1083) by [@tiangolo](https://github.com/tiangolo).\n\n### Docs\n\n* \u270f\ufe0f Fix small typos in the tutorial documentation. PR [#1137](https://github.com/fastapi/typer/pull/1137) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udcdd Update optional CLI argument section in tutorial with `Annotated`. PR [#983](https://github.com/fastapi/typer/pull/983) by [@gkeuccsr](https://github.com/gkeuccsr).\n* \ud83d\udcdd Clarify the need for `mix_stderr` when accessing the output of `stderr` in tests. PR [#1045](https://github.com/fastapi/typer/pull/1045) by [@mrchrisadams](https://github.com/mrchrisadams).\n\n### Internal\n\n* \ud83d\udd27 Add support for Python 3.13, tests in CI and add PyPI trove classifier. PR [#1091](https://github.com/fastapi/typer/pull/1091) by [@edgarrmondragon](https://github.com/edgarrmondragon).\n* \u2b06 Bump ruff from 0.9.6 to 0.9.7. PR [#1161](https://github.com/fastapi/typer/pull/1161) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1162](https://github.com/fastapi/typer/pull/1162) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.9.5 to 0.9.6. PR [#1153](https://github.com/fastapi/typer/pull/1153) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1151](https://github.com/fastapi/typer/pull/1151) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.9.4 to 0.9.5. PR [#1146](https://github.com/fastapi/typer/pull/1146) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1142](https://github.com/fastapi/typer/pull/1142) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.9.3 to 0.9.4. PR [#1139](https://github.com/fastapi/typer/pull/1139) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1135](https://github.com/fastapi/typer/pull/1135) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.9.1 to 0.9.3. PR [#1136](https://github.com/fastapi/typer/pull/1136) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1130](https://github.com/fastapi/typer/pull/1130) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.8.6 to 0.9.1. PR [#1118](https://github.com/fastapi/typer/pull/1118) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pypa/gh-action-pypi-publish from 1.12.3 to 1.12.4. PR [#1132](https://github.com/fastapi/typer/pull/1132) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-material from 9.5.49 to 9.5.50. PR [#1129](https://github.com/fastapi/typer/pull/1129) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \ud83d\udc9a Fix test matrix for Python 3.7. PR [#1116](https://github.com/fastapi/typer/pull/1116) by [@svlandeg](https://github.com/svlandeg).\n* \u2b06 Bump ruff from 0.8.4 to 0.8.6. PR [#1107](https://github.com/fastapi/typer/pull/1107) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1109](https://github.com/fastapi/typer/pull/1109) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump pillow from 11.0.0 to 11.1.0. PR [#1104](https://github.com/fastapi/typer/pull/1104) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1102](https://github.com/fastapi/typer/pull/1102) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.8.3 to 0.8.4. PR [#1097](https://github.com/fastapi/typer/pull/1097) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump astral-sh/setup-uv from 4 to 5. PR [#1098](https://github.com/fastapi/typer/pull/1098) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump markdown-include-variants from 0.0.3 to 0.0.4. PR [#1100](https://github.com/fastapi/typer/pull/1100) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.8.2 to 0.8.3. PR [#1090](https://github.com/fastapi/typer/pull/1090) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1093](https://github.com/fastapi/typer/pull/1093) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump mkdocs-material from 9.5.48 to 9.5.49. PR [#1092](https://github.com/fastapi/typer/pull/1092) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pypa/gh-action-pypi-publish from 1.12.2 to 1.12.3. PR [#1088](https://github.com/fastapi/typer/pull/1088) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1087](https://github.com/fastapi/typer/pull/1087) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.8.1 to 0.8.2. PR [#1084](https://github.com/fastapi/typer/pull/1084) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-material from 9.5.47 to 9.5.48. PR [#1086](https://github.com/fastapi/typer/pull/1086) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n## 0.15.1\n\n### Features\n\n* \ud83d\uddd1\ufe0f Deprecate `shell_complete` and continue to use `autocompletion` for CLI parameters. PR [#974](https://github.com/fastapi/typer/pull/974) by [@svlandeg](https://github.com/svlandeg).\n\n### Docs\n\n* \u270f\ufe0f Fix a few typos in the source and documentation. PR [#1028](https://github.com/fastapi/typer/pull/1028) by [@kkirsche](https://github.com/kkirsche).\n* \ud83d\udcdd Fix minor inconsistencies and typos in tutorial. PR [#1067](https://github.com/fastapi/typer/pull/1067) by [@tvoirand](https://github.com/tvoirand).\n* \u270f\ufe0f Fix a few small typos in the documentation. PR [#1077](https://github.com/fastapi/typer/pull/1077) by [@svlandeg](https://github.com/svlandeg).\n\n### Internal\n\n* \ud83d\udd27 Update build-docs filter patterns. PR [#1080](https://github.com/fastapi/typer/pull/1080) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd28 Update deploy docs preview script. PR [#1079](https://github.com/fastapi/typer/pull/1079) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Update members. PR [#1078](https://github.com/fastapi/typer/pull/1078) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1071](https://github.com/fastapi/typer/pull/1071) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Update httpx requirement from <0.28.0,>=0.27.0 to >=0.27.0,<0.29.0. PR [#1065](https://github.com/fastapi/typer/pull/1065) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n## 0.15.0\n\n### Features\n\n* \u2728 Add support for extending typer apps without passing a name, add commands to the top level. PR [#1037](https://github.com/fastapi/typer/pull/1037) by [@patrick91](https://github.com/patrick91).\n    * New docs: [One File Per Command](https://typer.tiangolo.com/tutorial/one-file-per-command/).\n\n### Internal\n\n* \u2b06 Bump mkdocs-material from 9.5.46 to 9.5.47. PR [#1070](https://github.com/fastapi/typer/pull/1070) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.8.0 to 0.8.1. PR [#1066](https://github.com/fastapi/typer/pull/1066) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n## 0.14.0\n\n### Breaking Changes\n\n* \ud83d\udd25 Remove auto naming of groups added via `add_typer` based on the group's callback function name. PR [#1052](https://github.com/fastapi/typer/pull/1052) by [@patrick91](https://github.com/patrick91).\n\nBefore, it was supported to infer the name of a command group from the callback function name in the sub-app, so, in this code:\n\n```python\nimport typer\n\napp = typer.Typer()\nusers_app = typer.Typer()\n\napp.add_typer(users_app)\n\n\n@users_app.callback()\ndef users():  # <-- This was the inferred command group name\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n```\n\n...the command group would be named `users`, based on the name of the function `def users()`.\n\nNow you need to set it explicitly:\n\n```python\nimport typer\n\napp = typer.Typer()\nusers_app = typer.Typer()\n\napp.add_typer(users_app, name=\"users\")  # <-- Explicitly set the command group name\n\n\n@users_app.callback()\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n```\n\nUpdated docs [SubCommand Name and Help](https://typer.tiangolo.com/tutorial/subcommands/name-and-help/).\n\n**Note**: this change will enable important features in the next release. \ud83e\udd29\n\n### Internal\n\n* \u2b06 Bump pypa/gh-action-pypi-publish from 1.10.3 to 1.12.2. PR [#1043](https://github.com/fastapi/typer/pull/1043) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-material from 9.5.44 to 9.5.46. PR [#1062](https://github.com/fastapi/typer/pull/1062) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.7.4 to 0.8.0. PR [#1059](https://github.com/fastapi/typer/pull/1059) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump astral-sh/setup-uv from 3 to 4. PR [#1061](https://github.com/fastapi/typer/pull/1061) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1053](https://github.com/fastapi/typer/pull/1053) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n\n## 0.13.1\n\n### Features\n\n* \u2728 Remove Rich tags when showing completion text. PR [#877](https://github.com/fastapi/typer/pull/877) by [@svlandeg](https://github.com/svlandeg).\n* \u2728 Render Rich markup as HTML in Markdown docs. PR [#847](https://github.com/fastapi/typer/pull/847) by [@svlandeg](https://github.com/svlandeg).\n* \u2728 Support cp850 encoding for auto-completion in PowerShell. PR [#808](https://github.com/fastapi/typer/pull/808) by [@svlandeg](https://github.com/svlandeg).\n* \u2728 Allow gettext translation of help message. PR [#886](https://github.com/fastapi/typer/pull/886) by [@svlandeg](https://github.com/svlandeg).\n\n### Refactors\n\n* \ud83d\udc1b Fix printing HTML from Rich output. PR [#1055](https://github.com/fastapi/typer/pull/1055) by [@tiangolo](https://github.com/tiangolo).\n\n### Docs\n\n* \ud83d\udcdd Update markdown includes to use the new simpler format. PR [#1054](https://github.com/fastapi/typer/pull/1054) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \u2b06 Bump ruff from 0.7.3 to 0.7.4. PR [#1051](https://github.com/fastapi/typer/pull/1051) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1047](https://github.com/fastapi/typer/pull/1047) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.7.2 to 0.7.3. PR [#1046](https://github.com/fastapi/typer/pull/1046) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump tiangolo/latest-changes from 0.3.1 to 0.3.2. PR [#1044](https://github.com/fastapi/typer/pull/1044) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Update pytest-cov requirement from <6.0.0,>=2.10.0 to >=2.10.0,<7.0.0. PR [#1033](https://github.com/fastapi/typer/pull/1033) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n## 0.13.0\n\n### Features\n\n* \u2728 Handle `KeyboardInterrupt` separately from other exceptions. PR [#1039](https://github.com/fastapi/typer/pull/1039) by [@patrick91](https://github.com/patrick91).\n* \u2728 Update `launch` to not print anything when opening urls. PR [#1035](https://github.com/fastapi/typer/pull/1035) by [@patrick91](https://github.com/patrick91).\n* \u2728 Show help items in order of definition. PR [#944](https://github.com/fastapi/typer/pull/944) by [@svlandeg](https://github.com/svlandeg).\n\n### Fixes\n\n* \ud83d\udc1b Fix equality check for custom classes. PR [#979](https://github.com/fastapi/typer/pull/979) by [@AryazE](https://github.com/AryazE).\n* \ud83d\udc1b Allow colon in zsh autocomplete values and descriptions. PR [#988](https://github.com/fastapi/typer/pull/988) by [@snapbug](https://github.com/snapbug).\n\n### Refactors\n\n* \ud83d\uddd1\ufe0f Deprecate support for `is_flag` and `flag_value` parameters. PR [#987](https://github.com/fastapi/typer/pull/987) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udd25 Remove unused functionality from `_typing.py` file. PR [#805](https://github.com/fastapi/typer/pull/805) by [@ivantodorovich](https://github.com/ivantodorovich).\n* \u270f\ufe0f Fix typo in function name `_make_rich_text`. PR [#959](https://github.com/fastapi/typer/pull/959) by [@svlandeg](https://github.com/svlandeg).\n\n### Internal\n\n* \u2705 Only run completion installation tests when the env var `_TYPER_RUN_INSTALL_COMPLETION_TESTS` is set. PR [#995](https://github.com/fastapi/typer/pull/995) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udcdd Update the docstring of the `_make_rich_text` method. PR [#972](https://github.com/fastapi/typer/pull/972) by [@svlandeg](https://github.com/svlandeg).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1040](https://github.com/fastapi/typer/pull/1040) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump mkdocs-material from 9.5.42 to 9.5.44. PR [#1042](https://github.com/fastapi/typer/pull/1042) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.7.1 to 0.7.2. PR [#1038](https://github.com/fastapi/typer/pull/1038) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-macros-plugin from 1.3.6 to 1.3.7. PR [#1031](https://github.com/fastapi/typer/pull/1031) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1032](https://github.com/fastapi/typer/pull/1032) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.7.0 to 0.7.1. PR [#1029](https://github.com/fastapi/typer/pull/1029) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pillow from 10.4.0 to 11.0.0. PR [#1023](https://github.com/fastapi/typer/pull/1023) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-material from 9.5.35 to 9.5.42. PR [#1027](https://github.com/fastapi/typer/pull/1027) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.6.5 to 0.7.0. PR [#1026](https://github.com/fastapi/typer/pull/1026) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-macros-plugin from 1.2.0 to 1.3.6. PR [#1025](https://github.com/fastapi/typer/pull/1025) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Update pre-commit requirement from <4.0.0,>=2.17.0 to >=2.17.0,<5.0.0. PR [#1012](https://github.com/fastapi/typer/pull/1012) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pypa/gh-action-pypi-publish from 1.10.1 to 1.10.3. PR [#1009](https://github.com/fastapi/typer/pull/1009) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#1001](https://github.com/fastapi/typer/pull/1001) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \ud83d\udc77 Update Deploy docs CI to use uv. PR [#1021](https://github.com/fastapi/typer/pull/1021) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Fix smokeshow, checkout files on CI. PR [#1020](https://github.com/fastapi/typer/pull/1020) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Use uv in CI. PR [#1019](https://github.com/fastapi/typer/pull/1019) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update `labeler.yml`. PR [#1014](https://github.com/fastapi/typer/pull/1014) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update worfkow deploy-docs-notify URL. PR [#1011](https://github.com/fastapi/typer/pull/1011) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Upgrade Cloudflare GitHub Action. PR [#1010](https://github.com/fastapi/typer/pull/1010) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 Bump mkdocs-macros-plugin from 1.0.5 to 1.2.0. PR [#992](https://github.com/fastapi/typer/pull/992) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump ruff from 0.6.4 to 0.6.5. PR [#991](https://github.com/fastapi/typer/pull/991) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-material from 9.5.34 to 9.5.35. PR [#996](https://github.com/fastapi/typer/pull/996) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#993](https://github.com/fastapi/typer/pull/993) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#982](https://github.com/fastapi/typer/pull/982) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump tiangolo/issue-manager from 0.5.0 to 0.5.1. PR [#980](https://github.com/fastapi/typer/pull/980) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \ud83d\udc77 Update `issue-manager.yml`. PR [#978](https://github.com/fastapi/typer/pull/978) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 Bump ruff from 0.6.3 to 0.6.4. PR [#975](https://github.com/fastapi/typer/pull/975) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump mkdocs-material from 9.5.33 to 9.5.34. PR [#963](https://github.com/fastapi/typer/pull/963) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pypa/gh-action-pypi-publish from 1.9.0 to 1.10.1. PR [#973](https://github.com/fastapi/typer/pull/973) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#966](https://github.com/fastapi/typer/pull/966) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \ud83d\udc9a Set `include-hidden-files` to `True` when using the `upload-artifact` GH action. PR [#967](https://github.com/fastapi/typer/pull/967) by [@svlandeg](https://github.com/svlandeg).\n* \u2b06 Bump ruff from 0.6.1 to 0.6.3. PR [#961](https://github.com/fastapi/typer/pull/961) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#689](https://github.com/fastapi/typer/pull/689) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump ruff from 0.2.0 to 0.6.1. PR [#938](https://github.com/fastapi/typer/pull/938) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \ud83d\udc77 Update `latest-changes` GitHub Action. PR [#955](https://github.com/fastapi/typer/pull/955) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.12.5\n\n### Features\n\n* \ud83d\udc84 Unify the width of the Rich console for help and errors. PR [#788](https://github.com/fastapi/typer/pull/788) by [@racinmat](https://github.com/racinmat).\n* \ud83d\udeb8 Improve assertion error message if a group is not a valid subclass. PR [#425](https://github.com/fastapi/typer/pull/425) by [@chrisburr](https://github.com/chrisburr).\n\n### Fixes\n\n* \ud83d\udc1b Ensure `rich_markup_mode=None` disables Rich formatting. PR [#859](https://github.com/fastapi/typer/pull/859) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udc1b  Fix sourcing of completion path for Git Bash. PR [#801](https://github.com/fastapi/typer/pull/801) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udc1b Fix PowerShell completion with incomplete word. PR [#360](https://github.com/fastapi/typer/pull/360) by [@patricksurry](https://github.com/patricksurry).\n\n### Refactors\n\n* \ud83d\udd25 Remove Python 3.6 specific code paths. PR [#850](https://github.com/fastapi/typer/pull/850) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udd25 Clean up redundant code. PR [#858](https://github.com/fastapi/typer/pull/858) by [@svlandeg](https://github.com/svlandeg).\n\n### Docs\n\n* \u267b\ufe0f Use F-strings in Click examples in docs. PR [#891](https://github.com/fastapi/typer/pull/891) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udcddAdd missing `main.py` in tutorial on CLI option names. PR [#868](https://github.com/fastapi/typer/pull/868) by [@fsramalho](https://github.com/fsramalho).\n* \ud83d\udcdd Fix broken link. PR [#835](https://github.com/fastapi/typer/pull/835) by [@OhioDschungel6](https://github.com/OhioDschungel6).\n* \ud83d\udcdd Update package docs with the latest versions of Typer and Poetry. PR [#781](https://github.com/fastapi/typer/pull/781) by [@kinuax](https://github.com/kinuax).\n* \ud83d\udcdd Update the Progress Bar tutorial with correct output. PR [#199](https://github.com/fastapi/typer/pull/199) by [@n1ckdm](https://github.com/n1ckdm).\n* \ud83d\udcdd Add docs and scripts to test completion in different shells. PR [#953](https://github.com/fastapi/typer/pull/953) by [@tiangolo](https://github.com/tiangolo).\n* \u270f\ufe0f Fix a typo in `docs/virtual-environments.md`. PR [#952](https://github.com/fastapi/typer/pull/952) by [@tiangolo](https://github.com/tiangolo).\n* \u270f\ufe0f Fix typo in `docs/contributing.md`. PR [#947](https://github.com/fastapi/typer/pull/947) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udcdd Add docs for virtual environments, environment variables, and update contributing. PR [#946](https://github.com/fastapi/typer/pull/946) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \ud83d\udd28 Pre-install dependencies in Docker so that testing in Docker is faster. PR [#954](https://github.com/fastapi/typer/pull/954) by [@tiangolo](https://github.com/tiangolo).\n* \u2705 Add `needs_bash` test fixture. PR [#888](https://github.com/fastapi/typer/pull/888) by [@svlandeg](https://github.com/svlandeg).\n* \u2b06 Bump mkdocs-material from 9.5.18 to 9.5.33. PR [#945](https://github.com/fastapi/typer/pull/945) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pillow from 10.3.0 to 10.4.0. PR [#939](https://github.com/fastapi/typer/pull/939) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \ud83d\udc77 Fix issue-manager. PR [#948](https://github.com/fastapi/typer/pull/948) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\ude48 Remove extra line in .gitignore. PR [#936](https://github.com/fastapi/typer/pull/936) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 Update pytest-cov requirement from <5.0.0,>=2.10.0 to >=2.10.0,<6.0.0. PR [#844](https://github.com/fastapi/typer/pull/844) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.9.0. PR [#865](https://github.com/fastapi/typer/pull/865) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Update pytest requirement from <8.0.0,>=4.4.0 to >=4.4.0,<9.0.0. PR [#915](https://github.com/fastapi/typer/pull/915) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Update pytest-sugar requirement from <0.10.0,>=0.9.4 to >=0.9.4,<1.1.0. PR [#841](https://github.com/fastapi/typer/pull/841) by [@dependabot[bot]](https://github.com/apps/dependabot).\n\n## 0.12.4\n\n### Features\n\n* \u2728 Add support for Python 3.12, tests in CI and official marker. PR [#807](https://github.com/tiangolo/typer/pull/807) by [@ivantodorovich](https://github.com/ivantodorovich).\n\n### Fixes\n\n* \ud83d\udc1b Fix support for `UnionType` (e.g. `str | None`) with Python 3.11. PR [#548](https://github.com/fastapi/typer/pull/548) by [@jonaslb](https://github.com/jonaslb).\n* \ud83d\udc1b Fix `zsh` autocompletion installation. PR [#237](https://github.com/fastapi/typer/pull/237) by [@alexjurkiewicz](https://github.com/alexjurkiewicz).\n* \ud83d\udc1b Fix usage of `Annotated` with future annotations in Python 3.7+. PR [#814](https://github.com/fastapi/typer/pull/814) by [@ivantodorovich](https://github.com/ivantodorovich).\n* \ud83d\udc1b Fix `shell_complete` not working for Arguments. PR [#737](https://github.com/fastapi/typer/pull/737) by [@bckohan](https://github.com/bckohan).\n\n### Docs\n\n* \ud83d\udcdd Update docs links, from tiangolo to new fastapi org. PR [#919](https://github.com/fastapi/typer/pull/919) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udcdd Add docs for team and repo management. PR [#917](https://github.com/tiangolo/typer/pull/917) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \ud83d\udd27 Add URLs to `pyproject.toml`, show up in PyPI. PR [#931](https://github.com/fastapi/typer/pull/931) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Do not sync labels as it overrides manually added labels. PR [#930](https://github.com/fastapi/typer/pull/930) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update labeler GitHub Action to add only one label. PR [#927](https://github.com/fastapi/typer/pull/927) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update labeler GitHub Actions permissions and dependencies. PR [#926](https://github.com/fastapi/typer/pull/926) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Add GitHub Action label-checker. PR [#925](https://github.com/fastapi/typer/pull/925) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Add GitHub Action labeler. PR [#924](https://github.com/fastapi/typer/pull/924) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Add GitHub Action add-to-project. PR [#922](https://github.com/fastapi/typer/pull/922) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd28 Update docs.py script to enable dirty reload conditionally. PR [#918](https://github.com/tiangolo/typer/pull/918) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Update MkDocs previews. PR [#916](https://github.com/tiangolo/typer/pull/916) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Upgrade build docs configs. PR [#914](https://github.com/tiangolo/typer/pull/914) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Update MkDocs to have titles in Markdown files instead of config. PR [#913](https://github.com/tiangolo/typer/pull/913) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Add alls-green for test-redistribute. PR [#911](https://github.com/tiangolo/typer/pull/911) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update docs-previews to handle no docs changes. PR [#912](https://github.com/tiangolo/typer/pull/912) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77\ud83c\udffb Show docs deployment status and preview URLs in comment. PR [#910](https://github.com/tiangolo/typer/pull/910) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Enable auto dark mode from system. PR [#908](https://github.com/tiangolo/typer/pull/908) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc84 Add dark mode logo. PR [#907](https://github.com/tiangolo/typer/pull/907) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Update tabs and admonitions with new syntax and new MkDocs features. PR [#906](https://github.com/tiangolo/typer/pull/906) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Enable MkDocs Material features. PR [#905](https://github.com/tiangolo/typer/pull/905) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Enable dark mode for docs. PR [#904](https://github.com/tiangolo/typer/pull/904) by [@tiangolo](https://github.com/tiangolo).\n* \u2796 Do not install jieba for MkDocs Material as there are no chinese translations. PR [#903](https://github.com/tiangolo/typer/pull/903) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\ude48 Add MkDocs Material cache to gitignore. PR [#902](https://github.com/tiangolo/typer/pull/902) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd28 Update lint script. PR [#901](https://github.com/tiangolo/typer/pull/901) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Update MkDocs configs and docs build setup. PR [#900](https://github.com/tiangolo/typer/pull/900) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 Bump actions/cache from 3 to 4. PR [#839](https://github.com/tiangolo/typer/pull/839) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \ud83c\udf71 Update Typer icon and logo. PR [#899](https://github.com/tiangolo/typer/pull/899) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update issue-manager.yml GitHub Action permissions. PR [#897](https://github.com/tiangolo/typer/pull/897) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Refactor GitHub Action to comment docs deployment URLs and update token, preparing for GitHub org. PR [#896](https://github.com/tiangolo/typer/pull/896) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd28 Update docs Termynal scripts to not include line nums for local dev. PR [#882](https://github.com/tiangolo/typer/pull/882) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 Bump black from 23.3.0 to 24.3.0. PR [#837](https://github.com/tiangolo/typer/pull/837) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump pillow from 10.1.0 to 10.3.0. PR [#836](https://github.com/tiangolo/typer/pull/836) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2705 Add CI configs to run tests on Windows and MacOS. PR [#824](https://github.com/tiangolo/typer/pull/824) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udc77 Update GitHub Actions to upload and download artifacts. PR [#829](https://github.com/tiangolo/typer/pull/829) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Tweak CI for test-redistribute, add needed env vars for slim. PR [#827](https://github.com/tiangolo/typer/pull/827) by [@tiangolo](https://github.com/tiangolo).\n* \u2705 Generalize test suite to run on Windows. PR [#810](https://github.com/tiangolo/typer/pull/810) by [@svlandeg](https://github.com/svlandeg).\n* \u2705 Add `__init__.py` files to fix test suite. PR [#809](https://github.com/tiangolo/typer/pull/809) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udd27 Update MkDocs Material, enable plugins. PR [#813](https://github.com/tiangolo/typer/pull/813) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Tweak development scripts and configs after migration to PDM, Ruff, etc.. PR [#797](https://github.com/tiangolo/typer/pull/797) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.12.3\n\n### Fixes\n\n* \ud83d\udc1b Fix Rich formatting with no commands. PR [#796](https://github.com/tiangolo/typer/pull/796) by [@svlandeg](https://github.com/svlandeg).\n\n## 0.12.2\n\n### Features\n\n* \u2728 Improve column help display, ensure commands column width is the same on all panels. PR [#567](https://github.com/tiangolo/typer/pull/567) by [@ssbarnea](https://github.com/ssbarnea).\n\n### Fixes\n\n* \ud83d\udc1b Add support for an argument of type `Optional[Tuple]` and default value `None`. PR [#757](https://github.com/tiangolo/typer/pull/757) by [@Asthestarsfalll](https://github.com/Asthestarsfalll).\n\n### Docs\n\n* \ud83d\udd27 Fix typo in Github template. PR [#793](https://github.com/tiangolo/typer/pull/793) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udcdd Fix typos in documentation. PR [#761](https://github.com/tiangolo/typer/pull/761) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udcdd Update console output with Click 8 messages. PR [#789](https://github.com/tiangolo/typer/pull/789) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udcdd\u00a0Remove references to a .rst README generated by poetry new. PR [#632](https://github.com/tiangolo/typer/pull/632) by [@jonasmmiguel](https://github.com/jonasmmiguel).\n\n## 0.12.1\n\nNow you don't need to install `typer[all]`. When you install `typer` it comes with the default optional dependencies and the `typer` command.\n\nIf you don't want the extra optional dependencies (`rich` and `shellingham`), you can install `typer-slim` instead.\n\nYou can also install `typer-slim[standard]`, which includes the default optional dependencies, but not the `typer` command.\n\nNow the package `typer-cli` doesn't add anything on top of what `typer` has, it only depends on `typer`, and is there only for backwards compatibility, so that projects that depend on `typer-cli` can get the latest features of the `typer` command while they upgrade their dependencies to require `typer` directly.\n\n### Features\n\n* \u2728 Add support for `typer ./someprogram.py utils docs --title`. PR [#782](https://github.com/tiangolo/typer/pull/782) by [@tiangolo](https://github.com/tiangolo).\n\n### Fixes\n\n* \ud83d\udc1b Fix broken installation when upgrading from `typer <0.12.0` to `typer >=0.12.0`, make `typer` independent of `typer-slim`, include `typer` command in `typer` package. PR [#791](https://github.com/tiangolo/typer/pull/791) by [@tiangolo](https://github.com/tiangolo).\n\nThis fixes a problem that would break the `typer` installation directory when upgrading from `typer <0.12.0` to `typer >=0.12.0`, see issue [#790](https://github.com/tiangolo/typer/issues/790).\n\nBy installing the latest version (`0.12.1`) it fixes it, for any previous version, even if the installation directory was already broken by the previous upgrade.\n\n### Internal\n\n* \ud83d\udc77 Add cron to run test once a week on monday. PR [#783](https://github.com/tiangolo/typer/pull/783) by [@estebanx64](https://github.com/estebanx64).\n\n## 0.12.0\n\nIn version `0.12.0`, the `typer` package depends on `typer-slim[standard]` which includes the default dependencies (instead of `typer[all]`) and `typer-cli` (that provides the `typer` command).\n\nIf you don't want the extra optional dependencies (`rich` and `shellingham`), you can install `typer-slim` instead.\n\nYou can also install `typer-slim[standard]`, which includes the default optional dependencies, but not the `typer` command.\n\nIn version `0.12.0` the `typer-cli` package only provides the `typer` command, but the code is still in the main code, so even without installing `typer-cli`, it can be called with `python -m typer`.\n\nThis approach of having `typer` depend on `typer-slim[standard]` instead of including the whole code and dependencies itself caused an issue when upgrading from `typer <0.12.0` to `typer >=0.12.0`, see issue [#790](https://github.com/tiangolo/typer/issues/790). This is fixed in version `0.12.1`.\n\n### Features\n\n* \u2728 Add `typer-slim` package without extras, make `typer` include `typer-slim[default]` and integrate Typer CLI (`typer` command) into Typer. PR [#780](https://github.com/tiangolo/typer/pull/780) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \ud83d\udd27 Temporarily disable social plugin while a MkDocs issue is handled. PR [#779](https://github.com/tiangolo/typer/pull/779) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Fix install MkDocs Insiders only when available. PR [#778](https://github.com/tiangolo/typer/pull/778) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.11.1\n\n### Fixes\n\n* \ud83d\udd27 Explicitly include testing files in sdist for redistributors (e.g. OpenSUSE) and add CI to test redistribution. PR [#773](https://github.com/tiangolo/typer/pull/773) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \ud83d\udc77 Do not use the cache for dependencies when publishing to PyPI. PR [#774](https://github.com/tiangolo/typer/pull/774) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.11.0\n\n### Breaking Changes\n\n* \ud83d\udd27 Refactor package manager, move from Flit to PDM, remove private pip extras for `test`, `doc`, `dev`. PR [#764](https://github.com/tiangolo/typer/pull/764) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd25 Remove support for Click 7, require Click 8+. PR [#760](https://github.com/tiangolo/typer/pull/760) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd25 Remove support for Python 3.6. PR [#758](https://github.com/tiangolo/typer/pull/758) by [@tiangolo](https://github.com/tiangolo).\n\n### Refactors\n\n* \ud83d\udd27 Migrate from Black, isort, flake8, autoflake, pyupgrade to Ruff. PR [#763](https://github.com/tiangolo/typer/pull/763) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \u2b06\ufe0f Upgrade coverage and configs. PR [#769](https://github.com/tiangolo/typer/pull/769) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Upgrade mypy and config. PR [#768](https://github.com/tiangolo/typer/pull/768) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Upgrade Smokeshow GitHub action. PR [#767](https://github.com/tiangolo/typer/pull/767) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Upgrade latest-changes GitHub Action. PR [#766](https://github.com/tiangolo/typer/pull/766) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Upgrade issue-manager GitHub Action. PR [#765](https://github.com/tiangolo/typer/pull/765) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Add alls-green to CI. PR [#759](https://github.com/tiangolo/typer/pull/759) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.10.0\n\n### Fixes\n\n* \ud83d\udc1b Fix default value of `None` for CLI Parameters when the type is `list | None` and the default value is `None`. PR [#664](https://github.com/tiangolo/typer/pull/664) by [@theowisear](https://github.com/theowisear).\n\n## 0.9.4\n\n### Features\n\n* \u2728 Improve support for CLI translations using gettext. PR [#417](https://github.com/tiangolo/typer/pull/417) by [@mjodmj](https://github.com/mjodmj).\n\n## 0.9.3\n\n### Fixes\n\n* \ud83d\udc1b Fix evaluating stringified annotations in Python 3.10 (also `from __future__ import annotations`). PR [#721](https://github.com/tiangolo/typer/pull/721) by [@heckad](https://github.com/heckad).\n\n## 0.9.2\n\n### Fixes\n\n* \ud83d\udc1b Fix display of default value for Enum parameters inside of a list, include docs and tests. PR [#473](https://github.com/tiangolo/typer/pull/473) by [@asieira](https://github.com/asieira).\n* \ud83d\udc1b Update type annotations for `show_default` parameter and update docs for setting a \"Custom default string\". PR [#501](https://github.com/tiangolo/typer/pull/501) by [@plannigan](https://github.com/plannigan).\n\n### Docs\n\n* \ud83d\udcdd Add docs and test for `no_args_is_help` feature. PR [#751](https://github.com/tiangolo/typer/pull/751) by [@svlandeg](https://github.com/svlandeg).\n\n## 0.9.1\n\n### Fixes\n\n* \ud83d\udc1b Add missing `default_factory` in `Argument` overloads. PR [#750](https://github.com/tiangolo/typer/pull/750) by [@m9810223](https://github.com/m9810223).\n* \ud83d\udc1b Fix preserving case in enum values. PR [#571](https://github.com/tiangolo/typer/pull/571) by [@avaldebe](https://github.com/avaldebe).\n\n### Docs\n\n* \ud83d\udcdd Remove obsolete references to `--install-completion` for `typer.run()` scripts. PR [#595](https://github.com/tiangolo/typer/pull/595) by [@tiangolo](https://github.com/tiangolo).\n\n* \ud83d\udcdd Update docs example for a Typer/Click group to make new subcommands explicit. PR [#755](https://github.com/tiangolo/typer/pull/755) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udcdd Update docs for building a package, file structure example. PR [#683](https://github.com/tiangolo/typer/pull/683) by [@davidbgk](https://github.com/davidbgk).\n* \ud83d\udcdd Update link in docs to the newest stable version of click. PR [#675](https://github.com/tiangolo/typer/pull/675) by [@javier171188](https://github.com/javier171188).\n* \ud83d\udd27 Add `CITATION.cff` file for academic citations. PR [#681](https://github.com/tiangolo/typer/pull/681) by [@tiangolo](https://github.com/tiangolo).\n* \u270f Fix typo in `docs/tutorial/exceptions.md`. PR [#702](https://github.com/tiangolo/typer/pull/702) by [@menzenski](https://github.com/menzenski).\n* \u270f Fix typo in `docs/tutorial/options/name.md`. PR [#725](https://github.com/tiangolo/typer/pull/725) by [@bwagner](https://github.com/bwagner).\n* \u270f Fix typo in `docs/tutorial/arguments/optional.md`. PR [#602](https://github.com/tiangolo/typer/pull/602) by [@tadasgedgaudas](https://github.com/tadasgedgaudas).\n\n### Internal\n\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#606](https://github.com/tiangolo/typer/pull/606) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \ud83d\udc77 Install MkDocs Material Insiders only when secrets are available, for Dependabot. PR [#685](https://github.com/tiangolo/typer/pull/685) by [@tiangolo](https://github.com/tiangolo).\n* \u2692\ufe0f Update build-docs.yml, do not zip docs. PR [#645](https://github.com/tiangolo/typer/pull/645) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Deploy docs to Cloudflare. PR [#644](https://github.com/tiangolo/typer/pull/644) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Upgrade CI for docs. PR [#642](https://github.com/tiangolo/typer/pull/642) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update token for latest changes. PR [#635](https://github.com/tiangolo/typer/pull/635) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update CI workflow dispatch for latest changes. PR [#643](https://github.com/tiangolo/typer/pull/643) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update token for Material for MkDocs Insiders. PR [#636](https://github.com/tiangolo/typer/pull/636) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc1b Fix internal type annotations and bump mypy version. PR [#638](https://github.com/tiangolo/typer/pull/638) by [@paulo-raca](https://github.com/paulo-raca).\n* \ud83d\udca1 Add comments to document overload definitions in code. PR [#752](https://github.com/tiangolo/typer/pull/752) by [@svlandeg](https://github.com/svlandeg).\n* \ud83d\udd25 Remove Jina QA Bot as it has been discontinued. PR [#749](https://github.com/tiangolo/typer/pull/749) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update build docs CI cache paths. PR [#707](https://github.com/tiangolo/typer/pull/707) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Upgrade latest-changes GitHub Action. PR [#691](https://github.com/tiangolo/typer/pull/691) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.9.0\n\n### Features\n\n* \u2728 Add support for PEP-593 `Annotated` for specifying options and arguments. Initial PR [#584](https://github.com/tiangolo/typer/pull/584) by [@ryangalamb](https://github.com/ryangalamb).\n    * New docs: [Optional CLI arguments](https://typer.tiangolo.com/tutorial/arguments/optional/#an-alternative-cli-argument-declaration).\n    * It is no longer required to pass a default value of `...` to mark a *CLI Argument* or *CLI Option* as required.\n    * It is now recommended to use `Annotated` for `typer.Option()` and `typer.Argument()`.\n    * All the docs have been updated to recommend `Annotated`.\n\n### Docs\n\n* \ud83d\udcdd Update docs examples for custom param types using `Annotated`, fix overloads for `typer.Argument`. PR [#594](https://github.com/tiangolo/typer/pull/594) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#592](https://github.com/tiangolo/typer/pull/592) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n\n## 0.8.0\n\n### Features\n\n* \u2728 Add support for custom types and parsers. Initial PR [#583](https://github.com/tiangolo/typer/pull/583) by [@jpurviance](https://github.com/jpurviance). Based on original PR [#443](https://github.com/tiangolo/typer/pull/443) by [@paulo-raca](https://github.com/paulo-raca).\n    * New docs: [CLI Parameter Types: Custom Types](https://typer.tiangolo.com/tutorial/parameter-types/custom-types/).\n\n### Upgrades\n\n* \u2b06 Upgrade Rich, support 13.x. PR [#524](https://github.com/tiangolo/typer/pull/524) by [@musicinmybrain](https://github.com/musicinmybrain).\n\n### Docs\n\n* \ud83d\udcdd Tweak docs, Custom Types path, main page and READAME colors, broken links. PR [#588](https://github.com/tiangolo/typer/pull/588) by [@tiangolo](https://github.com/tiangolo).\n* \u270f Fix spelling (shinny -> shiny). PR [#586](https://github.com/tiangolo/typer/pull/586) by [@runofthemill](https://github.com/runofthemill).\n* \ud83d\udcdd Update docs about helping Typer. PR [#547](https://github.com/tiangolo/typer/pull/547) by [@tiangolo](https://github.com/tiangolo).\n* \u270f\ufe0f Fix typo in datetime docs. PR [#495](https://github.com/tiangolo/typer/pull/495) by [@huxuan](https://github.com/huxuan).\n* \u270f\ufe0f Add quotes to package name that includes brackets in docs. PR [#475](https://github.com/tiangolo/typer/pull/475) by [@gjolga](https://github.com/gjolga).\n\n### Internal\n\n* \u2b06 Bump dawidd6/action-download-artifact from 2.24.2 to 2.26.0. PR [#558](https://github.com/tiangolo/typer/pull/558) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#549](https://github.com/tiangolo/typer/pull/549) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \ud83d\udd27 Add `exclude_lines` to coverage configuration. PR [#585](https://github.com/tiangolo/typer/pull/585) by [@dmontagu](https://github.com/dmontagu).\n* \u2b06\ufe0f Upgrade analytics. PR [#557](https://github.com/tiangolo/typer/pull/557) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Update new issue chooser to suggest GitHub Discussions. PR [#544](https://github.com/tiangolo/typer/pull/544) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Add GitHub Discussion templates for questions. PR [#541](https://github.com/tiangolo/typer/pull/541) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Update pre-commit, Python version, isort version. PR [#542](https://github.com/tiangolo/typer/pull/542) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#512](https://github.com/tiangolo/typer/pull/512) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump nwtgck/actions-netlify from 1.2.4 to 2.0.0. PR [#513](https://github.com/tiangolo/typer/pull/513) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \ud83d\udc77 Refactor CI artifact upload/download for docs previews. PR [#516](https://github.com/tiangolo/typer/pull/516) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#500](https://github.com/tiangolo/typer/pull/500) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump actions/cache from 2 to 3. PR [#496](https://github.com/tiangolo/typer/pull/496) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump dawidd6/action-download-artifact from 2.24.1 to 2.24.2. PR [#494](https://github.com/tiangolo/typer/pull/494) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.24.1. PR [#491](https://github.com/tiangolo/typer/pull/491) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump actions/setup-python from 2 to 4. PR [#492](https://github.com/tiangolo/typer/pull/492) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \ud83d\udc77\u200d\u2642\ufe0f Consistently use `sys.executable` to run subprocesses, needed by OpenSUSE. PR [#408](https://github.com/tiangolo/typer/pull/408) by [@theMarix](https://github.com/theMarix).\n* \ud83d\udc77\u200d\u2642\ufe0f Ensure the `PYTHONPATH` is set properly when testing the tutorial scripts. PR [#407](https://github.com/tiangolo/typer/pull/407) by [@theMarix](https://github.com/theMarix).\n\n## 0.7.0\n\n### Features\n\n* \u2728 Make `typer.run()` not add completion scripts by default, it only makes sense in installed apps. Also update docs for handling [autocompletion in CLI options](https://typer.tiangolo.com/tutorial/options-autocompletion/). PR [#488](https://github.com/tiangolo/typer/pull/488) by [@tiangolo](https://github.com/tiangolo).\n* \u2728 Add support for Python 3.11, tests in CI and official marker. PR [#487](https://github.com/tiangolo/typer/pull/487) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Add CI for Python 3.10. PR [#384](https://github.com/tiangolo/typer/pull/384) by [@tiangolo](https://github.com/tiangolo).\n\n### Fixes\n\n* \ud83c\udfa8 Fix type annotation of `typer.run()`. PR [#284](https://github.com/tiangolo/typer/pull/284) by [@yassu](https://github.com/yassu).\n* \ud83c\udfa8 Fix type annotations for `get_group`. PR [#430](https://github.com/tiangolo/typer/pull/430) by [@tiangolo](https://github.com/tiangolo).\n\n### Docs\n\n* \ud83d\udcdd Add note about how subcommands with function names using underscores are converted to dashes. PR [#403](https://github.com/tiangolo/typer/pull/403) by [@targhs](https://github.com/targhs).\n* \ud83d\udcdd Fix typo in docs at `docs/tutorial/commands/help.md`. PR [#466](https://github.com/tiangolo/typer/pull/466) by [@fepegar](https://github.com/fepegar).\n* \u270f Fix link in docs to `datetime.strptime()`. PR [#464](https://github.com/tiangolo/typer/pull/464) by [@Kobu](https://github.com/Kobu).\n* \u270f Update `first-steps.md`, clarify distinction between parameter and argument. PR [#176](https://github.com/tiangolo/typer/pull/176) by [@mccarthysean](https://github.com/mccarthysean).\n* \u270f Fix broken plac link. PR [#275](https://github.com/tiangolo/typer/pull/275) by [@mgielda](https://github.com/mgielda).\n\n### Internal\n\n* \u2705 Add extra tests just for coverage because monkeypatching with strange imports confuses coverage. PR [#490](https://github.com/tiangolo/typer/pull/490) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Tweak pytest coverage. PR [#485](https://github.com/tiangolo/typer/pull/485) by [@tiangolo](https://github.com/tiangolo).\n* \u2795 Bring back pytest-cov because coverage can't detect pytest-xdist. PR [#484](https://github.com/tiangolo/typer/pull/484) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06 Bump actions/upload-artifact from 2 to 3. PR [#477](https://github.com/tiangolo/typer/pull/477) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump actions/checkout from 2 to 3. PR [#478](https://github.com/tiangolo/typer/pull/478) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#411](https://github.com/tiangolo/typer/pull/411) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.4. PR [#479](https://github.com/tiangolo/typer/pull/479) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \u2b06 Bump tiangolo/issue-manager from 0.2.0 to 0.4.0. PR [#481](https://github.com/tiangolo/typer/pull/481) by [@dependabot[bot]](https://github.com/apps/dependabot).\n* \ud83d\udc77 Move from pytest-cov to coverage and Codecov to Smokeshow. PR [#483](https://github.com/tiangolo/typer/pull/483) by [@tiangolo](https://github.com/tiangolo).\n* \u2795 Add extra Material for MkDocs deps for docs. PR [#482](https://github.com/tiangolo/typer/pull/482) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Update Dependabot config. PR [#476](https://github.com/tiangolo/typer/pull/476) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.6.1\n\n### Fixes\n\n* \ud83d\udc1b Fix setting `FORCE_TERMINAL` with colors 2. PR [#424](https://github.com/tiangolo/typer/pull/424) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc1b Fix setting `FORCE_TERMINAL` with colors. PR [#423](https://github.com/tiangolo/typer/pull/423) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.6.0\n\nThis release adds deep integrations with [Rich](https://rich.readthedocs.io/en/stable/). \u2728\n\n`rich` is an optional dependency, you can install it directly or it will be included when you install with:\n\n```console\n$ pip install \"typer[all]\"\n```\n\nIf Rich is available, it will be used to show the content from `--help` options, validation errors, and even errors in your app (exception tracebacks).\n\nThere are new options to group commands, *CLI arguments*, and *CLI options*, support for [Rich Console Markup](https://rich.readthedocs.io/en/stable/markup.html), and more! \ud83c\udf89\n\n### Features\n\n* \u2728 Richify, add integrations with Rich everywhere. PR [#419](https://github.com/tiangolo/typer/pull/419) by [@tiangolo](https://github.com/tiangolo).\n    * Recommend Rich as the main information displaying tool, new docs: [Printing and Colors](https://typer.tiangolo.com/tutorial/printing/).\n    * For most use cases not using Rich, use plain `print()` instead of `typer.echo()` in the docs, to simplify the concepts and avoid confusions. New docs: [Printing and Colors - typer Echo](https://typer.tiangolo.com/tutorial/printing/#typer-echo).\n    * Define help panels for *CLI arguments*, new docs: [CLI Arguments with Help - CLI Argument help panels](https://typer.tiangolo.com/tutorial/arguments/help/#cli-argument-help-panels).\n    * Define help panels for *CLI options*, new docs: [CLI Options with Help - CLI Options help panels](https://typer.tiangolo.com/tutorial/options/help/#cli-options-help-panels).\n    * New docs for deprecating commands: [Commands - Command Help - Deprecate a Command](https://typer.tiangolo.com/tutorial/commands/help/#deprecate-a-command).\n    * Support for Rich Markdown in docstrings, *CLI parameters* `help`, and `epilog` with the new parameter `typer.Typer(rich_markup_mode=\"markdown\")`, new docs: [Commands - Command Help - Rich Markdown and Markup](https://typer.tiangolo.com/tutorial/commands/help/#rich-markdown-and-markup).\n    * Support for Rich Markup (different from Markdown) in docstrings, *CLI parameters* `help`, and `epilog` with the new parameter `typer.Typer(rich_markup_mode=\"rich\")`, new docs: [Commands - Command Help - Rich Markdown and Markup](https://typer.tiangolo.com/tutorial/commands/help/#rich-markdown-and-markup).\n    * Define help panels for *commands*, new docs: [Commands - Command Help - Help Panels](https://typer.tiangolo.com/tutorial/commands/help/#help-panels).\n    * New docs for setting an `epilog`, with support for Rich Markdown and Console Markup, new docs: [Commands - Command Help - Epilog](https://typer.tiangolo.com/tutorial/commands/help/#epilog).\n* \u2728 Refactor and document handling pretty exceptions. PR [#422](https://github.com/tiangolo/typer/pull/422) by [@tiangolo](https://github.com/tiangolo).\n    * Add support for customizing pretty short errors, new docs: [Exceptions and Errors](https://typer.tiangolo.com/tutorial/exceptions/).\n* \u2728 Allow configuring pretty errors when creating the Typer instance. PR [#416](https://github.com/tiangolo/typer/pull/416) by [@tiangolo](https://github.com/tiangolo).\n\n### Docs\n\n* \ud83d\udcdd Add docs for using Rich with Typer. PR [#421](https://github.com/tiangolo/typer/pull/421) by [@tiangolo](https://github.com/tiangolo).\n    * Add new docs: [Ask with Prompt - Prompt with Rich](https://typer.tiangolo.com/tutorial/prompt/#prompt-with-rich).\n    * Add new docs to handle progress bars and spinners with Rich: [Progress Par](https://typer.tiangolo.com/tutorial/progressbar/).\n\n### Internal\n\n* \u2b06\ufe0f Upgrade codecov GitHub Action. PR [#420](https://github.com/tiangolo/typer/pull/420) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.5.0\n\n### Features\n\n* \u2728 Add pretty error tracebacks for user errors and support for Rich. PR [#412](https://github.com/tiangolo/typer/pull/412) by [@tiangolo](https://github.com/tiangolo).\n\n### Docs\n\n* \u270f Fix typo, \"ASCII codes\" to \"ANSI escape sequences\". PR [#308](https://github.com/tiangolo/typer/pull/308) by [@septatrix](https://github.com/septatrix).\n\n## 0.4.2\n\n### Fixes\n\n* \ud83d\udc1b Fix type conversion for `List` and `Tuple` and their internal types. PR [#143](https://github.com/tiangolo/typer/pull/143) by [@hellowhistler](https://github.com/hellowhistler).\n* \ud83d\udc1b Fix `context_settings` for a Typer app with a single command. PR [#210](https://github.com/tiangolo/typer/pull/210) by [@daddycocoaman](https://github.com/daddycocoaman).\n\n### Docs\n\n* \ud83d\udcdd Clarify testing documentation about checking `stderr`. PR [#335](https://github.com/tiangolo/typer/pull/335) by [@cgabard](https://github.com/cgabard).\n* \u270f Fix typo in docs for CLI Option autocompletion. PR [#288](https://github.com/tiangolo/typer/pull/288) by [@graue70](https://github.com/graue70).\n* \ud83c\udfa8 Fix header format for \"Standard Input\" in `docs/tutorial/printing.md`. PR [#386](https://github.com/tiangolo/typer/pull/386) by [@briancohan](https://github.com/briancohan).\n* \u270f Fix typo in `docs/tutorial/terminating.md`. PR [#382](https://github.com/tiangolo/typer/pull/382) by [@kianmeng](https://github.com/kianmeng).\n* \u270f Fix syntax typo in `docs/tutorial/package.md`. PR [#333](https://github.com/tiangolo/typer/pull/333) by [@ryanstreur](https://github.com/ryanstreur).\n* \u270f Fix typo, duplicated word in `docs/tutorial/options/required.md`.. PR [#316](https://github.com/tiangolo/typer/pull/316) by [@michaelriri](https://github.com/michaelriri).\n* \u270f Fix minor typo in `index.md`. PR [#274](https://github.com/tiangolo/typer/pull/274) by [@RmStorm](https://github.com/RmStorm).\n* \u270f Fix double \"and\" typo in first-steps tutorial. PR [#225](https://github.com/tiangolo/typer/pull/225) by [@softwarebloat](https://github.com/softwarebloat).\n* \ud83c\udfa8 Fix format in docs explaining `datetime` parameter type. PR [#220](https://github.com/tiangolo/typer/pull/220) by [@DiegoPiloni](https://github.com/DiegoPiloni).\n\n### Internal\n\n* \u2b06 [pre-commit.ci] pre-commit autoupdate. PR [#404](https://github.com/tiangolo/typer/pull/404) by [@pre-commit-ci[bot]](https://github.com/apps/pre-commit-ci).\n* \ud83d\udc77 Fix Material for MkDocs install in CI. PR [#395](https://github.com/tiangolo/typer/pull/395) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Add pre-commit CI config. PR [#394](https://github.com/tiangolo/typer/pull/394) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Clear MkDocs Insiders cache. PR [#393](https://github.com/tiangolo/typer/pull/393) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Add pre-commit config and formatting. PR [#392](https://github.com/tiangolo/typer/pull/392) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Disable installing MkDocs Insiders in forks. PR [#391](https://github.com/tiangolo/typer/pull/391) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06\ufe0f Upgrade Codecov GitHub Action. PR [#383](https://github.com/tiangolo/typer/pull/383) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.4.1\n\n### Fixes\n\n* \ud83d\udc1b Fix import of `get_terminal_size` for Click 8.1.0 support and upgrade Black to fix CI. PR [#380](https://github.com/tiangolo/typer/pull/380) by [@tiangolo](https://github.com/tiangolo) based on original PR [#375](https://github.com/tiangolo/typer/pull/375) by [@madkinsz](https://github.com/madkinsz).\n\n### Internal\n\n* \ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR [#368](https://github.com/tiangolo/typer/pull/368) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc9a Only test on push when on master, avoid duplicate CI runs from PRs. PR [#358](https://github.com/tiangolo/typer/pull/358) by [@tiangolo](https://github.com/tiangolo).\n* \u2728 Add support for previewing docs in PRs from forks and enable MkDocs Insiders. PR [#357](https://github.com/tiangolo/typer/pull/357) by [@tiangolo](https://github.com/tiangolo).\n* \u2b06\ufe0f Upgrade MkDocs Material, MDX-Include, and MkDocs structure. PR [#356](https://github.com/tiangolo/typer/pull/356) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update publish GitHub action. PR [#325](https://github.com/tiangolo/typer/pull/325) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.4.0\n\n### Features\n\n* \u2728 Add support for Click 8 while keeping compatibility with Click 7. PR [#317](https://github.com/tiangolo/typer/pull/317) by [@tiangolo](https://github.com/tiangolo).\n\n### Internal\n\n* \ud83d\udcdd Add Security policy. PR [#324](https://github.com/tiangolo/typer/pull/324) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Add updated issue templates. PR [#323](https://github.com/tiangolo/typer/pull/323) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Enable tests for Python 3.9. PR [#322](https://github.com/tiangolo/typer/pull/322) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Add GitHub Action Latest Changes. PR [#321](https://github.com/tiangolo/typer/pull/321) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udc77 Update docs CI name. PR [#320](https://github.com/tiangolo/typer/pull/320) by [@tiangolo](https://github.com/tiangolo).\n* \ud83d\udd27 Add sponsors docs and badge. PR [#319](https://github.com/tiangolo/typer/pull/319) by [@tiangolo](https://github.com/tiangolo).\n\n## 0.3.2\n\n### Features\n\n* Add support for `mypy --strict`. Original PR [#147](https://github.com/tiangolo/typer/pull/147) by [@victorphoenix3](https://github.com/victorphoenix3).\n\n### Docs\n\n* Update docs with new `--help` showing default values. PR [#135](https://github.com/tiangolo/typer/pull/135) by [@victorphoenix3](https://github.com/victorphoenix3).\n* Add `Optional` to docs for *CLI Arguments and Options* with a default of `None`. PR [#131](https://github.com/tiangolo/typer/pull/131) by [@rkbeatss](https://github.com/rkbeatss).\n* Add valid date formats to docs. PR [#122](https://github.com/tiangolo/typer/pull/122) by [@IamCathal](https://github.com/IamCathal).\n\n### Internal\n\n* Report coverage in XML to support GitHub Actions. PR [#146](https://github.com/tiangolo/typer/pull/146).\n* Update badges and remove Travis, now that GitHub Actions is the main CI. PR [#145](https://github.com/tiangolo/typer/pull/145).\n\n## 0.3.1\n\n* Add GitHub Actions, move from Travis. PR [#144](https://github.com/tiangolo/typer/pull/144).\n* Pin dependencies. PR [#138](https://github.com/tiangolo/typer/pull/138).\n* Add Dependabot. PR [#136](https://github.com/tiangolo/typer/pull/136).\n* Upgrade Isort to version 5.x.x. PR [#137](https://github.com/tiangolo/typer/pull/137).\n\n## 0.3.0\n\n* Add support for `help` parameter in *CLI arguments*:\n    * As `help` in *CLI arguments* is not supported by Click, there are two new internal classes (Click sub-classes) to support it:\n        * `typer.core.TyperArgument`\n        * `typer.core.TyperCommand`\n    * This includes a new auto-generated help text section `Arguments` for *CLI arguments*, showing defaults, required arguments, etc.\n    * It's also possible to disable it and keep the previous behavior, not showing automatic help for *CLI arguments* (Click's default) using the `hidden` parameter.\n    * Now `show_default` is `True` by default.\n    * And now `show_envvar` is `True` by default.\n    * So, default values and env vars are shown in the help text by default, without having to manually enable them, for both *CLI arguments* and *CLI options*.\n    * New docs:\n        * [CLI Arguments Intro](https://typer.tiangolo.com/tutorial/arguments/).\n        * [Optional CLI Arguments](https://typer.tiangolo.com/tutorial/arguments/optional/).\n        * [CLI Arguments with Default](https://typer.tiangolo.com/tutorial/arguments/default/).\n        * [CLI Arguments with Help](https://typer.tiangolo.com/tutorial/arguments/help/).\n        * [CLI Arguments with Environment Variables](https://typer.tiangolo.com/tutorial/arguments/envvar/).\n        * [CLI Arguments: Other uses](https://typer.tiangolo.com/tutorial/arguments/other-uses/).\n        * [CLI arguments with tuples](https://typer.tiangolo.com/tutorial/multiple-values/arguments-with-multiple-values/#cli-arguments-with-tuples).\n    * Lot's of tests for all the new examples in the new docs, keeping coverage at 100%.\n    * PR [#123](https://github.com/tiangolo/typer/pull/123).\n* Add docs for calling packages with `python -m some_package` using `__main__.py`: [Building a Package: Support `python -m`](https://typer.tiangolo.com/tutorial/package/#support-python-m-optional). PR [#121](https://github.com/tiangolo/typer/pull/121).\n* Add support for `*args` and `**kwargs` when calling the Typer app, just like in Click. PR [#120](https://github.com/tiangolo/typer/pull/120) by [@teymour-aldridge](https://github.com/teymour-aldridge).\n* Fix typos in README and main docs [#103](https://github.com/tiangolo/typer/pull/103) by [@mrcartoonster](https://github.com/mrcartoonster).\n* Fix typo in docs. PR [#98](https://github.com/tiangolo/typer/pull/98) by [@mrcartoonster](https://github.com/mrcartoonster).\n* Fix typos and rewording in docs. PR [#97](https://github.com/tiangolo/typer/pull/97) by [@mrcartoonster](https://github.com/mrcartoonster).\n* Update GitHub Action issue-manager. PR [#114](https://github.com/tiangolo/typer/pull/114).\n\n## 0.2.1\n\n* Add support for forward references (types declared inside of strings). PR [#93](https://github.com/tiangolo/typer/pull/93).\n\n## 0.2.0\n\n* Add support for completion for commands/programs not available on startup.\n    * This allows installing a Typer program/script in a virtual environment and still have completion globally installed.\n    * PR [#92](https://github.com/tiangolo/typer/pull/92).\n* Add note about `typer.echo()` and `print()` for colors in Windows. PR [#89](https://github.com/tiangolo/typer/pull/89).\n* Upgrade Mkdocs-Material version, update contributing guide style. PR [#90](https://github.com/tiangolo/typer/pull/90).\n\n## 0.1.1\n\n* Fix completion evaluation for Bash and Zsh when the program is not installed/found. PR [#83](https://github.com/tiangolo/typer/pull/83).\n* Fix completion script for Fish. PR [#82](https://github.com/tiangolo/typer/pull/82).\n* Fix shell installation for Bash to `~/.bashrc` and update Windows development docs. PR [#81](https://github.com/tiangolo/typer/pull/81).\n* Update coverage badge. PR [#78](https://github.com/tiangolo/typer/pull/78).\n\n## 0.1.0\n\n* Fix coverage instructions. PR [#72](https://github.com/tiangolo/typer/pull/72).\n* Add docs for [Building a Package](https://typer.tiangolo.com/tutorial/package/). PR [#71](https://github.com/tiangolo/typer/pull/71).\n* Add docs for [Using Click (with Typer)](https://typer.tiangolo.com/tutorial/using-click/). PR [#70](https://github.com/tiangolo/typer/pull/70).\n* Add support for type-based callbacks and autocompletion functions, extra tests and docs:\n    * Extra tests, raising coverage to 100%.\n    * New docs: [Printing and Colors: \"Standard Output\" and \"Standard Error\"](https://typer.tiangolo.com/tutorial/printing/#standard-output-and-standard-error).\n    * New docs: [Password CLI Option and Confirmation Prompt](https://typer.tiangolo.com/tutorial/options/password/).\n    * Support for callbacks based on type annotations. New docs: [CLI Option Callback and Context](https://typer.tiangolo.com/tutorial/options/callback-and-context/).\n    * New docs: [Version CLI Option, is_eager](https://typer.tiangolo.com/tutorial/options/version/).\n    * Support for autocompletion functions based on type annotations. New docs: [CLI Option autocompletion](https://typer.tiangolo.com/tutorial/options/autocompletion/).\n    * New docs: [Commands: Using the Context](https://typer.tiangolo.com/tutorial/commands/context/).\n    * New docs: [Testing](https://typer.tiangolo.com/tutorial/testing/).\n    * PR [#68](https://github.com/tiangolo/typer/pull/68).\n* Fix Zsh completion install script. PR [#69](https://github.com/tiangolo/typer/pull/69).\n* Fix typo in progressbar example. PR [#63](https://github.com/tiangolo/typer/pull/63) by [@ValentinCalomme](https://github.com/ValentinCalomme).\n\n## 0.0.11\n\n* Re-implement completion system:\n    * Remove optional dependency `click-completion` (with its sub-dependencies, like Jinja).\n    * Add optional dependency `shellingham` to auto detect shell to install (it was used by `click-completion`).\n    * Completion now doesn't require a third party library.\n        * If `shellingham` is not installed/added as a dependency, `--install-completion` and `--show-completion` take a value with the name of the shell.\n    * Fix support for user provided completion in *CLI Parameters*.\n    * Fix completion for files in Bash, Zsh, and Fish.\n    * Add support for modern versions of PowerShell, 5, 6, and 7 (e.g. in Windows 10).\n    * Add support for `pwsh` (PowerShell Core).\n        * PowerShell support includes help strings for commands and *CLI Parameters*.\n    * Several bug fixes.\n    * Tests for the completion logic/code.\n    * Tested in all the shells in Linux and Windows.\n    * PR [#66](https://github.com/tiangolo/typer/pull/66).\n* Fix format in docs with highlighted lines. PR [#65](https://github.com/tiangolo/typer/pull/65).\n* Add docs about [Typer CLI - completion for small scripts](https://typer.tiangolo.com/typer-cli/). PR [#64](https://github.com/tiangolo/typer/pull/64).\n* Add docs about [Alternatives, Inspiration and Comparisons](https://typer.tiangolo.com/alternatives/). PR [#62](https://github.com/tiangolo/typer/pull/62).\n* Add [Development - Contributing Guide](https://typer.tiangolo.com/contributing/). PR [#61](https://github.com/tiangolo/typer/pull/61).\n\n## 0.0.10\n\n* Add support for Click version 7.1.1. PR [#60](https://github.com/tiangolo/typer/pull/60).\n\n## 0.0.9\n\n* Add support for PEP 561, to allow `mypy` to type check applications built with **Typer**. PR [#58](https://github.com/tiangolo/typer/pull/58).\n* Upgrade deploy docs to Netlify GitHub action. PR [#57](https://github.com/tiangolo/typer/pull/57).\n* Add support for Mermaid JS for visualizations. PR [#56](https://github.com/tiangolo/typer/pull/56).\n* Update CI to run docs deployment in GitHub actions. PR [#50](https://github.com/tiangolo/typer/pull/50).\n* Update format for internal links. PR [#38](https://github.com/tiangolo/typer/pull/38).\n* Tweak external links' format. PR [#36](https://github.com/tiangolo/typer/pull/36).\n\n## 0.0.8\n\n* Update docs and add latest changes to MkDocs/website. PR [#33](https://github.com/tiangolo/typer/pull/33).\n* Add extra tests for edge cases that don't belong in docs' examples. PR [#32](https://github.com/tiangolo/typer/pull/32).\n* Add docs for CLI Parameters with [Multiple Values](https://typer.tiangolo.com/tutorial/multiple-values/). Includes tests for all the examples and bug fixes. PR [#31](https://github.com/tiangolo/typer/pull/31).\n* Add docs for extra *CLI parameter* types: [CLI Parameter Types: Number](https://typer.tiangolo.com/tutorial/parameter-types/number/) and [CLI Parameter Types: Boolean CLI Options](https://typer.tiangolo.com/tutorial/parameter-types/bool/). PR [#30](https://github.com/tiangolo/typer/pull/30).\n* Extend docs for Commands, add [Commands: Typer Callback](https://typer.tiangolo.com/tutorial/commands/callback/) and [Commands: One or Multiple](https://typer.tiangolo.com/tutorial/commands/one-or-multiple/). This includes tests for all the examples and bug fixes. PR [#29](https://github.com/tiangolo/typer/pull/29).\n* Add docs for [SubCommands - Command Groups](https://typer.tiangolo.com/tutorial/subcommands/). This includes tests for all the examples and bug fixes. PR [#28](https://github.com/tiangolo/typer/pull/28).\n* Remove unneeded code for argument handling. PR [#26](https://github.com/tiangolo/typer/pull/26).\n* Add docs for [Launching Applications](https://typer.tiangolo.com/tutorial/launch/). PR [#25](https://github.com/tiangolo/typer/pull/25).\n* Add docs for getting the [CLI Application Directory](https://typer.tiangolo.com/tutorial/app-dir/). PR [#24](https://github.com/tiangolo/typer/pull/24).\n* Add docs for [Progress Bars](https://typer.tiangolo.com/tutorial/progressbar/). PR [#23](https://github.com/tiangolo/typer/pull/23).\n* Add docs for [Asking with Interactive Prompts](). PR [#22](https://github.com/tiangolo/typer/pull/22).\n* Update docs for path *CLI option*. PR [#21](https://github.com/tiangolo/typer/pull/21).\n* Add colors module and docs for [Printing and Colors](https://typer.tiangolo.com/tutorial/printing/) and for [Terminating](https://typer.tiangolo.com/tutorial/terminating/), including tests. PR [#20](https://github.com/tiangolo/typer/pull/20).\n* Refactor docs to make each individual page/section \"bite-sized\" / small. Add docs for [CLI option names](https://typer.tiangolo.com/tutorial/options/name/). Update `typer.Argument()` to remove invalid positional `param_decls`. PR [#19](https://github.com/tiangolo/typer/pull/19).\n\n## 0.0.7\n\n* Add docs for [*CLI parameter* types](https://typer.tiangolo.com/tutorial/parameter-types/). Includes tests and file classes refactor. PR [#17](https://github.com/tiangolo/typer/pull/17).\n* Add tests for completion. PR [#15](https://github.com/tiangolo/typer/pull/15) and [#16](https://github.com/tiangolo/typer/pull/16).\n\n## 0.0.6\n\n* Add docs for [Commands](https://typer.tiangolo.com/tutorial/commands/). Includes a bug fix for handling default values set in `typer.Typer()` parameters. PR [#14](https://github.com/tiangolo/typer/pull/14).\n* Add docs for [CLI Arguments](https://typer.tiangolo.com/tutorial/arguments/). PR [#13](https://github.com/tiangolo/typer/pull/13).\n* Add docs for [CLI Options](https://typer.tiangolo.com/tutorial/options/). PR [#12](https://github.com/tiangolo/typer/pull/12).\n\n## 0.0.5\n\n* Clean exports from Typer. Remove unneeded components from Click and add needed `Exit` exception. PR [#11](https://github.com/tiangolo/typer/pull/11).\n* Fix and document extracting help from a function's docstring [First Steps: Document your CLI app](https://typer.tiangolo.com/tutorial/first-steps/#document-your-cli-app). PR [#10](https://github.com/tiangolo/typer/pull/10).\n* Update references to `--install-completion` and `--show-completion` in docs. PR [#9](https://github.com/tiangolo/typer/pull/9).\n* Fix testing utilities, add tests for First Steps examples. PR [#8](https://github.com/tiangolo/typer/pull/8).\n* Add auto completion options by default when [click-completion](https://github.com/click-contrib/click-completion) is installed: `--install-completion` and `--show-completion`. PR [#7](https://github.com/tiangolo/typer/pull/7).\n* Update Termynal to have fixed sizes, add \"fast\" button, and use it in [First Steps](https://typer.tiangolo.com/tutorial/first-steps/). PR [#6](https://github.com/tiangolo/typer/pull/6).\n* Add custom automatic [Termynal](https://github.com/tiangolo/termynal) for docs. PR [#5](https://github.com/tiangolo/typer/pull/5).\n\n## 0.0.4\n\n* Update short descriptions and assets.\n* Docs rewording and fix typos. PR [#1](https://github.com/tiangolo/typer/pull/1) by [@mariacamilagl](https://github.com/mariacamilagl).\n\n## 0.0.3\n\n* Fix group creation without name.\n\n## 0.0.2\n\n* Add initial version of code, docs, etc.\n\n## 0.0.1\n\n* First commit. Publish to PyPI to reserve package name.\n"
  },
  {
    "file": "docs/resources/index.md",
    "type": "markdown",
    "content": "# Resources\n\nAdditional resources, how to **help** and get help, how to **contribute**, and more. \u2708\ufe0f\n"
  },
  {
    "file": "docs/tutorial/app-dir.md",
    "type": "markdown",
    "content": "# CLI Application Directory\n\nYou can get the application directory where you can, for example, save configuration files with `typer.get_app_dir()`:\n\n{* docs_src/app_dir/tutorial001.py hl[9] *}\n\nIt will give you a directory for storing configurations appropriate for your CLI program for the current user in each operating system.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nConfig file doesn't exist yet\n```\n\n</div>\n\n## About `Path`\n\nIf you hadn't seen something like that:\n\n```Python\nPath(app_dir) / \"config.json\"\n```\n\nA `Path` object can be used with `/` and it will convert it to the separator for the current system (`/` for Unix systems and `\\` for Windows).\n\nIf the first element is a `Path` object the next ones (after the `/`) can be `str`.\n\nAnd it will create a new `Path` object from that.\n\nIf you want a quick guide on using `Path()` you can check <a href=\"https://realpython.com/python-pathlib/\" class=\"external-link\" target=\"_blank\">this post on Real Python</a> or <a href=\"https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/\" class=\"external-link\" target=\"_blank\">this post by Trey Hunner</a>.\n\nIn the code above, we are also explicitly declaring `config_path` as having type `Path` to help the editor provide completion and type checks:\n\n```Python\nconfig_path: Path = Path(app_dir) / \"config.json\"\n```\n\nOtherwise it could think it's a sub-type (a `PurePath`) and stop providing completion for some methods.\n"
  },
  {
    "file": "docs/tutorial/arguments/default.md",
    "type": "markdown",
    "content": "# CLI Arguments with Default\n\nWe can also use the same `typer.Argument()` to set a default value.\n\nThat way the *CLI argument* will be optional *and also* have a default value.\n\n## An optional *CLI argument* with a default\n\nWe can also use `typer.Argument()` to make a *CLI argument* have a default value other than `None`:\n\n{* docs_src/arguments/default/tutorial001_an.py hl[5] *}\n\n/// tip\n\nBecause now the value will be a `str` passed by the user or the default value of `\"Wade Wilson\"` which is also a `str`, we know the value will never be `None`, so we don't have to (and shouldn't) use `Optional[str]`.\n\nHave in mind that the `Optional[something]` tells Python that a value \"could be `None`\". But the use of `Optional` doesn't affect Typer in any way, e.g. it doesn't tell Typer if a value is required or not.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice the [default: Wade Wilson] \u2728\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [default: Wade Wilson]\n\nOptions:\n  --help                Show this message and exit.\n\n// With no optional CLI argument\n$ python main.py\n\nHello Wade Wilson\n\n// With one CLI argument\n$ python main.py Camila\n\nHello Camila\n```\n\n</div>\n\n## Dynamic default value\n\nAnd we can even make the default value be dynamically generated by passing a function as the `default_factory` argument:\n\n{* docs_src/arguments/default/tutorial002_an.py hl[7:8,11] *}\n\nIn this case, we created the function `get_name` that will just return a random `str` each time.\n\nAnd we pass it as the first function argument to `typer.Argument()`.\n\n/// tip\n\nThe word \"factory\" in `default_factory` is just a fancy way of saying \"function that will create the default value\".\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [default: (dynamic)]\n\nOptions:\n  --help                Show this message and exit.\n\n// Try it several times, it will use a random default each time\n$ python main.py\n\nHello Deadpool\n\n$ python main.py\n\nHello Hiro\n\n$ python main.py\n\nHello Rick\n\n// Now pass a value for the CLI argument\n$ python main.py Camila\n\nHello Camila\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/arguments/envvar.md",
    "type": "markdown",
    "content": "# CLI Arguments with Environment Variables\n\nYou can also configure a *CLI argument* to read a value from an environment variable if it is not provided in the command line as a *CLI argument*.\n\n/// tip\n\nYou can learn more about environment variables in the [Environment Variables](../../environment-variables.md){.internal-link target=_blank} page.\n\n///\n\nTo do that, use the `envvar` parameter for `typer.Argument()`:\n\n{* docs_src/arguments/envvar/tutorial001_an.py hl[5] *}\n\nIn this case, the *CLI argument* `name` will have a default value of `\"World\"`, but will also read any value passed to the environment variable `AWESOME_NAME` if no value is provided in the command line:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [env var: AWESOME_NAME;default: World]\n\nOptions:\n  --help                Show this message and exit.\n\n// Call it without a CLI argument\n$ python main.py\n\nHello Mr. World\n\n// Now pass a value for the CLI argument\n$ python main.py Czernobog\n\nHello Mr. Czernobog\n\n// And now use the environment variable\n$ AWESOME_NAME=Wednesday python main.py\n\nHello Mr. Wednesday\n\n// CLI arguments take precedence over env vars\n$ AWESOME_NAME=Wednesday python main.py Czernobog\n\nHello Mr. Czernobog\n```\n\n</div>\n\n## Multiple environment variables\n\nYou are not restricted to a single environment variable, you can declare a list of environment variables that could be used to get a value if it was not passed in the command line:\n\n{* docs_src/arguments/envvar/tutorial002_an.py hl[6] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [env var: AWESOME_NAME, GOD_NAME;default: World]\n\nOptions:\n  --help                Show this message and exit.\n\n// Try the first env var\n$ AWESOME_NAME=Wednesday python main.py\n\nHello Mr. Wednesday\n\n// Try the second env var\n$ GOD_NAME=Anubis python main.py\n\nHello Mr. Anubis\n```\n\n</div>\n\n## Hide an env var from the help text\n\nBy default, environment variables used will be shown in the help text, but you can disable them with `show_envvar=False`:\n\n{* docs_src/arguments/envvar/tutorial003_an.py hl[7] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n//Check the help\n$ python main.py --help\n\n// It won't show the env var\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  [default: World]\n\nOptions:\n  --help                Show this message and exit.\n\n// But it will still be able to use it\n$ AWESOME_NAME=Wednesday python main.py\n\nHello Mr. Wednesday\n```\n\n</div>\n\n/// note | Technical Details\n\nIn Click applications the env vars are hidden by default. \ud83d\ude48\n\nIn **Typer** these env vars are shown by default. \ud83d\udc40\n\n///\n"
  },
  {
    "file": "docs/tutorial/arguments/help.md",
    "type": "markdown",
    "content": "# CLI Arguments with Help\n\nIn the *First Steps* section you saw how to add help for a CLI app/command by adding it to a function's <abbr title=\"a multi-line string as the first expression inside a function (not assigned to any variable) used for documentation\">docstring</abbr>.\n\nHere's how that last example looked like:\n\n{* docs_src/first_steps/tutorial006.py *}\n\nNow that you also know how to use `typer.Argument()`, let's use it to add documentation specific for a *CLI argument*.\n\n## Add a `help` text for a *CLI argument*\n\nYou can use the `help` parameter to add a help text for a *CLI argument*:\n\n{* docs_src/arguments/help/tutorial001_an.py hl[5] *}\n\nAnd it will be used in the automatic `--help` option:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Check the section with Arguments below \ud83d\ude80\nUsage: main.py [OPTIONS] NAME\n\nArguments:\n  NAME  The name of the user to greet  [required]\n\nOptions:\n  --help                Show this message and exit.\n```\n\n</div>\n\n## Combine help text and docstrings\n\nAnd of course, you can also combine that `help` with the <abbr title=\"a multi-line string as the first expression inside a function (not assigned to any variable) used for documentation\">docstring</abbr>:\n\n{* docs_src/arguments/help/tutorial002_an.py hl[5:8] *}\n\nAnd the `--help` option will combine all the information:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice that we have the help text from the docstring and also the Arguments \ud83d\udcdd\nUsage: main.py [OPTIONS] NAME\n\n  Say hi to NAME very gently, like Dirk.\n\nArguments:\n  NAME  The name of the user to greet  [required]\n\nOptions:\n  --help                Show this message and exit.\n```\n\n</div>\n\n## Help with defaults\n\nIf you have a *CLI argument* with a default value, like `\"World\"`:\n\n{* docs_src/arguments/help/tutorial003_an.py hl[5] *}\n\nIt will show that default value in the help text:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice the [default: World] \ud83d\udd0d\nUsage: main.py [OPTIONS] [NAME]\n\n  Say hi to NAME very gently, like Dirk.\n\nArguments:\n  [NAME]  Who to greet  [default: World]\n\nOptions:\n  --help                Show this message and exit.\n```\n\n</div>\n\nBut you can disable that if you want to, with `show_default=False`:\n\n{* docs_src/arguments/help/tutorial004_an.py hl[7] *}\n\nAnd then it won't show the default value:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice the there's no [default: World] now \ud83d\udd25\nUsage: main.py [OPTIONS] [NAME]\n\n  Say hi to NAME very gently, like Dirk.\n\nArguments:\n  [NAME]  Who to greet\n\nOptions:\n  --help                Show this message and exit.\n```\n\n</div>\n\n/// note | Technical Details\n\nIn Click applications the default values are hidden by default. \ud83d\ude48\n\nIn **Typer** these default values are shown by default. \ud83d\udc40\n\n///\n\n## Custom default string\n\nYou can use the same `show_default` to pass a custom string (instead of a `bool`) to customize the default value to be shown in the help text:\n\n{* docs_src/arguments/help/tutorial005_an.py hl[9] *}\n\nAnd it will be used in the help text:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]  Who to greet  [default: (Deadpoolio the amazing's name)]\n\n\nOptions:\n  --help                Show this message and exit.\n\n// See it shows \"(Deadpoolio the amazing's name)\" instead of the actual default of \"Wade Wilson\"\n```\n\n</div>\n\n## Custom help name (`metavar`)\n\nYou can also customize the text used in the generated help text to represent a *CLI argument*.\n\nBy default, it will be the same name you declared, in uppercase letters.\n\nSo, if you declare it as:\n\n```Python\nname: str\n```\n\nIt will be shown as:\n\n```\nNAME\n```\n\nBut you can customize it with the `metavar` parameter for `typer.Argument()`.\n\nFor example, let's say you don't want to have the default of `NAME`, you want to have `username`, in lowercase, and you really want \u2728 emojis \u2728 everywhere:\n\n{* docs_src/arguments/help/tutorial006_an.py hl[5] *}\n\nNow the generated help text will have `\u2728username\u2728` instead of `NAME`:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\nUsage: main.py [OPTIONS] \u2728username\u2728\n\nArguments:\n  \u2728username\u2728  [default: World]\n\nOptions:\n  --help                Show this message and exit.\n```\n\n</div>\n\n## *CLI Argument* help panels\n\nYou might want to show the help information for *CLI arguments* in different panels when using the `--help` option.\n\nIf you have installed Rich as described in the docs for [Printing and Colors](../printing.md){.internal-link target=_blank}, you can set the `rich_help_panel` parameter to the name of the panel where you want this *CLI argument* to be shown:\n\n{* docs_src/arguments/help/tutorial007_an.py hl[8,12] *}\n\nThen, if you check the `--help` option, you will see a default panel named \"`Arguments`\" for the *CLI arguments* that don't have a custom `rich_help_panel`.\n\nAnd next you will see other panels for the *CLI arguments* that have a custom panel set in the `rich_help_panel` parameter:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] NAME [LASTNAME] [AGE]               </b>\n<b>                                                                     </b>\n Say hi to NAME very gently, like Dirk.\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    name      <font color=\"#F4BF75\"><b>TEXT</b></font>  Who to greet [default: None] <font color=\"#A6194C\">[required]</font>      \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Secondary Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502   lastname      </font><font color=\"#A37F4E\"><b>[LASTNAME]</b></font>  The last name                         \u2502\n<font color=\"#A5A5A1\">\u2502   age           </font><font color=\"#A37F4E\"><b>[AGE]     </b></font>  The user&apos;s age                        \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                        Show this message and exit.         \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\nIn this example we have a custom *CLI arguments* panel named \"`Secondary Arguments`\".\n\n## Help with style using Rich\n\nIn a future section you will see how to use custom markup in the `help` for *CLI arguments* when reading about [Commands - Command Help](../commands/help.md#rich-markdown-and-markup){.internal-link target=_blank}.\n\nIf you are in a hurry you can jump there, but otherwise, it would be better to continue reading here and following the tutorial in order.\n\n## Hide a *CLI argument* from the help text\n\nIf you want, you can make a *CLI argument* **not** show up in the `Arguments` section in the help text.\n\nYou will probably not want to do this normally, but it's possible:\n\n{* docs_src/arguments/help/tutorial008_an.py hl[5] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice there's no Arguments section at all \ud83d\udd25\nUsage: main.py [OPTIONS] [NAME]\n\n  Say hi to NAME very gently, like Dirk.\n\nOptions:\n  --help                Show this message and exit.\n```\n\n</div>\n\n/// info\n\nHave in mind that the *CLI argument* will still show up in the first line with `Usage`.\n\nBut it won't show up in the main help text under the `Arguments` section.\n\n///\n\n### Help text for *CLI arguments* in Click\n\nClick itself doesn't support adding help for *CLI arguments*, and it doesn't generate help for them as in the \"`Arguments:`\" sections in the examples above.\n\nNot supporting `help` in *CLI arguments* is an intentional <a href=\"https://click.palletsprojects.com/en/7.x/documentation/#documenting-arguments\" class=\"external-link\" target=\"_blank\">design decision in Click</a>:\n\n> This is to follow the general convention of Unix tools of using arguments for only the most necessary things, and to document them in the command help text by referring to them by name.\n\nSo, in Click applications, you are expected to write all the documentation for *CLI arguments* by hand in the <abbr title=\"a multi-line string as the first expression inside a function (not assigned to any variable) used for documentation\">docstring</abbr>.\n\n---\n\nNevertheless, **Typer supports `help` for *CLI arguments***. \u2728 \ud83e\udd37\u200d\u2642\n\n**Typer** doesn't follow that convention and instead supports `help` to make it easier to have consistent help texts with a consistent format for your CLI programs. \ud83c\udfa8\n\nThis is also to help you create CLI programs that are \u2728 awesome \u2728 *by default*. With very little code.\n\nIf you want to keep Click's convention in a **Typer** app, you can do it with the `hidden` parameter as described above.\n\n/// note | Technical Details\n\nTo support `help` in *CLI arguments* **Typer** does a lot of internal work in its own sub-classes of Click's internal classes.\n\n///\n"
  },
  {
    "file": "docs/tutorial/arguments/index.md",
    "type": "markdown",
    "content": "# CLI Arguments\n\nIn the next few sections we'll see some ways to modify how *CLI arguments* work.\n\nWe'll create optional *CLI arguments*, we'll add integrated help for *CLI arguments*, etc.\n"
  },
  {
    "file": "docs/tutorial/arguments/optional.md",
    "type": "markdown",
    "content": "# Optional CLI Arguments\n\nWe said before that *by default*:\n\n* *CLI options* are **optional**\n* *CLI arguments* are **required**\n\nAgain, that's how they work *by default*, and that's the convention in many CLI programs and systems.\n\nBut you can change that.\n\nIn fact, it's very common to have **optional** *CLI arguments*, it's way more common than having **required** *CLI options*.\n\nAs an example of how it could be useful, let's see how the `ls` CLI program works.\n\n<div class=\"termy\">\n\n```console\n// If you just type\n$ ls\n\n// ls will \"list\" the files and directories in the current directory\ntyper  tests  README.md  LICENSE\n\n// But it also receives an optional CLI argument\n$ ls ./tests/\n\n// And then ls will list the files and directories inside of that directory from the CLI argument\n__init__.py  test_tutorial\n```\n\n</div>\n\n## An alternative *CLI argument* declaration\n\nIn the [First Steps](../first-steps.md#add-a-cli-argument){.internal-link target=_blank} you saw how to add a *CLI argument*:\n\n{* docs_src/first_steps/tutorial002.py hl[4] *}\n\nNow let's see an alternative way to create the same *CLI argument*:\n\n\n{* docs_src/arguments/optional/tutorial001_an.py hl[5] *}\n\n/// info\n\nTyper added support for `Annotated` (and started recommending it) in version 0.9.0.\n\nIf you have an older version, you would get errors when trying to use `Annotated`.\n\nMake sure you upgrade the Typer version to at least 0.9.0 before using `Annotated`.\n\n///\n\nBefore, you had this function parameter:\n\n```Python\nname: str\n```\n\nAnd now we wrap it with `Annotated`:\n\n```Python\nname: Annotated[str]\n```\n\nBoth of these versions mean the same thing, `Annotated` is part of standard Python and is there for this.\n\nBut the second version using `Annotated` allows us to pass additional metadata that can be used by **Typer**:\n\n```Python\nname: Annotated[str, typer.Argument()]\n```\n\nNow we are being explicit that `name` is a *CLI argument*. It's still a `str` and it's still required (it doesn't have a default value).\n\nAll we did there achieves the same thing as before, a **required** *CLI argument*:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing argument 'NAME'.\n```\n\n</div>\n\nIt's still not very useful, but it works correctly.\n\nAnd being able to declare a **required** *CLI argument* using\n\n```Python\nname: Annotated[str, typer.Argument()]\n```\n\n...that works exactly the same as\n\n```Python\nname: str\n```\n\n...will come handy later.\n\n## Make an optional *CLI argument*\n\nNow, finally what we came for, an optional *CLI argument*.\n\nTo make a *CLI argument* optional, use `typer.Argument()` and make sure to provide a \"default\" value, for example `\"World\"`:\n\n{* docs_src/arguments/optional/tutorial002_an.py hl[5] *}\n\nNow we have:\n\n```Python\nname: Annotated[str, typer.Argument()] = \"World\"\n```\n\nBecause we are using `typer.Argument()` **Typer** will know that this is a *CLI argument* (no matter if *required* or *optional*).\n\nCheck the help:\n\n<div class=\"termy\">\n\n```console\n// First check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAME]\n\nArguments:\n  [NAME]\n\nOptions:\n  --help                Show this message and exit.\n```\n\n</div>\n\n/// tip\n\nNotice that `NAME` is still a *CLI argument*, it's shown up there in the \"`Usage: main.py` ...\".\n\nAlso notice that now `[NAME]` has brackets (\"`[`\" and \"`]`\") around (before it was just `NAME`) to denote that it's **optional**, not **required**.\n\n///\n\nNow run it and test it:\n\n<div class=\"termy\">\n\n```console\n// With no CLI argument\n$ python main.py\n\nHello World!\n\n// With one optional CLI argument\n$ python main.py Camila\n\nHello Camila\n```\n\n</div>\n\n/// tip\n\nNotice that \"`Camila`\" here is an optional *CLI argument*, not a *CLI option*, because we didn't use something like \"`--name Camila`\", we just passed \"`Camila`\" directly to the program.\n\n///\n\n## Alternative (old) `typer.Argument()` as the default value\n\n**Typer** also supports another older alternative syntax for declaring *CLI arguments* with additional metadata.\n\nInstead of using `Annotated`, you can use `typer.Argument()` as the default value:\n\n{* docs_src/arguments/optional/tutorial001.py hl[4] *}\n\n/// tip\n\nPrefer to use the `Annotated` version if possible.\n\n///\n\nBefore, because `name` didn't have any default value it would be a **required parameter** for the Python function, in Python terms.\n\nWhen using `typer.Argument()` as the default value **Typer** does the same and makes it a **required** *CLI argument*.\n\nWe changed it to:\n\n```Python\nname: str = typer.Argument()\n```\n\nBut now as `typer.Argument()` is the \"default value\" of the function's parameter, it would mean that \"it is no longer required\" (in Python terms).\n\nAs we no longer have the Python function default value (or its absence) to tell if something is required or not and what is the default value, `typer.Argument()` receives a first parameter `default` that serves the same purpose of defining that default value, or making it required.\n\nNot passing any value to the `default` argument is the same as marking it as required. But you can also explicitly mark it as *required* by passing `...` as the `default` argument, passed to `typer.Argument(default=...)`.\n\n```Python\nname: str = typer.Argument(default=...)\n```\n\n/// info\n\nIf you hadn't seen that `...` before: it is a special single value, it is <a href=\"https://docs.python.org/3/library/constants.html#Ellipsis\" class=\"external-link\" target=\"_blank\">part of Python and is called \"Ellipsis\"</a>.\n\n///\n\n{* docs_src/arguments/optional/tutorial003.py hl[4] *}\n\nAnd the same way, you can make it optional by passing a different `default` value, for example `None`:\n\n{* docs_src/arguments/optional/tutorial002.py hl[6] *}\n\nBecause the first parameter passed to `typer.Argument(default=None)` (the new \"default\" value) is `None`, **Typer** knows that this is an **optional** *CLI argument*, if no value is provided when calling it in the command line, it will have that default value of `None`.\n\nThe `default` argument is the first one, so it's possible that you see code that passes the value without explicitly using `default=`, like:\n\n```Python\nname: str = typer.Argument(...)\n```\n\n...or like:\n\n```Python\nname: str = typer.Argument(None)\n```\n\n...but again, try to use `Annotated` if possible, that way your code in terms of Python will mean the same thing as with **Typer** and you won't have to remember any of these details.\n"
  },
  {
    "file": "docs/tutorial/arguments/other-uses.md",
    "type": "markdown",
    "content": "# Other uses\n\n`typer.Argument()` has several other use cases. Such as for data validation, to enable other features, etc.\n\nYou will see about these use cases later in the docs.\n"
  },
  {
    "file": "docs/tutorial/commands/arguments.md",
    "type": "markdown",
    "content": "# Command CLI Arguments\n\nThe same way as with a CLI application with a single command, subcommands (or just \"commands\") can also have their own *CLI arguments*:\n\n{* docs_src/commands/arguments/tutorial001.py hl[7,12] *}\n\n<div class=\"termy\">\n\n```console\n// Check the help for create\n$ python main.py create --help\n\nUsage: main.py create [OPTIONS] USERNAME\n\nOptions:\n  --help  Show this message and exit.\n\n// Call it with a CLI argument\n$ python main.py create Camila\n\nCreating user: Camila\n\n// The same for delete\n$ python main.py delete Camila\n\nDeleting user: Camila\n```\n\n</div>\n\n/// tip\n\nEverything to the *right* of the *command* are *CLI parameters* (*CLI arguments* and *CLI options*) for that command.\n\n///\n\n/// note | Technical Details\n\nActually, it's everything to the right of that command, *before any subcommand*.\n\nIt's possible to have groups of *subcommands*, it's like if one *command* also had *subcommands*. And then those *subcommands* could have their own *CLI parameters*, taking their own *CLI parameters*.\n\nYou will see about them later in another section.\n\n///\n"
  },
  {
    "file": "docs/tutorial/commands/callback.md",
    "type": "markdown",
    "content": "# Typer Callback\n\nWhen you create an `app = typer.Typer()` it works as a group of commands.\n\nAnd you can create multiple commands with it.\n\nEach of those commands can have their own *CLI parameters*.\n\nBut as those *CLI parameters* are handled by each of those commands, they don't allow us to create *CLI parameters* for the main CLI application itself.\n\nBut we can use `@app.callback()` for that.\n\nIt's very similar to `@app.command()`, but it declares the *CLI parameters* for the main CLI application (before the commands):\n\n{* docs_src/commands/callback/tutorial001.py hl[25,26,27,28,29,30,31,32] *}\n\nHere we create a `callback` with a `--verbose` *CLI option*.\n\n/// tip\n\nAfter getting the `--verbose` flag, we modify a global `state`, and we use it in the other commands.\n\nThere are other ways to achieve the same, but this will suffice for this example.\n\n///\n\nAnd as we added a docstring to the callback function, by default it will be extracted and used as the help text.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice the main help text, extracted from the callback function: \"Manage users in the awesome CLI app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the awesome CLI app.\n\nOptions:\n  --verbose / --no-verbose  [default: False]\n  --install-completion      Install completion for the current shell.\n  --show-completion         Show completion for the current shell, to copy it or customize the installation.\n  --help                    Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Check the new top level CLI option --verbose\n\n// Try it normally\n$ python main.py create Camila\n\nCreating user: Camila\n\n// And now with --verbose\n$ python main.py --verbose create Camila\n\nWill write verbose output\nAbout to create a user\nCreating user: Camila\nJust created a user\n\n// Notice that --verbose belongs to the callback, it has to go before create or delete \u26d4\ufe0f\n$ python main.py create --verbose Camila\n\nUsage: main.py create [OPTIONS] USERNAME\nTry \"main.py create --help\" for help.\n\nError: No such option: --verbose\n```\n\n</div>\n\n## Adding a callback on creation\n\nIt's also possible to add a callback when creating the `typer.Typer()` app:\n\n{* docs_src/commands/callback/tutorial002.py hl[4,5,8] *}\n\nThat achieves the same as with `@app.callback()`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py create Camila\n\nRunning a command\nCreating user: Camila\n```\n\n</div>\n\n## Overriding a callback\n\nIf you added a callback when creating the `typer.Typer()` app, it's possible to override it with `@app.callback()`:\n\n{* docs_src/commands/callback/tutorial003.py hl[11,12,13] *}\n\nNow `new_callback()` will be the one used.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py create Camila\n\n// Notice that the message is the one from new_callback()\nOverride callback, running a command\nCreating user: Camila\n```\n\n</div>\n\n## Adding a callback only for documentation\n\nYou can also add a callback just to add the documentation in the docstring.\n\nIt can be convenient especially if you have several lines of text, as the indentation will be automatically handled for you:\n\n{* docs_src/commands/callback/tutorial004.py hl[8,9,10,11,12,13,14,15,16] *}\n\nNow the callback will be used mainly to extract the docstring for the help text.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice all the help text extracted from the callback docstring\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Manage users CLI app.\n\n  Use it with the create command.\n\n  A new user with the given NAME will be created.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// And it just works as normally\n$ python main.py create Camila\n\nCreating user: Camila\n```\n\n</div>\n\n## Click Group\n\nIf you come from Click, this **Typer** callback is the equivalent of the function in a <a href=\"https://click.palletsprojects.com/en/7.x/quickstart/#nesting-commands\" class=\"external-link\" target=\"_blank\">Click Group</a>.\n\nFor example:\n\n```Python\nimport click\n\n@click.group()\ndef cli():\n    pass\n```\n\nThe original function `cli` would be the equivalent of a Typer callback.\n\n/// note | Technical Details\n\nWhen using Click, it converts that `cli` variable to a Click `Group` object. And then the original function no longer exists in that variable.\n\n**Typer** doesn't do that, the callback function is not modified, only registered in the `typer.Typer` app. This is intentional, it's part of **Typer**'s design, to allow having editor auto completion and type checks.\n\n///\n"
  },
  {
    "file": "docs/tutorial/commands/context.md",
    "type": "markdown",
    "content": "# Using the Context\n\nWhen you create a **Typer** application it uses Click underneath. And every Click application has a special object called a <a href=\"https://click.palletsprojects.com/en/8.1.x/commands/#nested-handling-and-contexts\" class=\"external-link\" target=\"_blank\">\"Context\"</a> that is normally hidden.\n\nBut you can access the context by declaring a function parameter of type `typer.Context`.\n\nYou might have read it in [CLI Option Callback and Context](../options/callback-and-context.md){.internal-link target=_blank}.\n\nThe same way, in commands or in the main `Typer` callback you can access the context by declaring a function parameter of type `typer.Context`.\n\n## Getting the context\n\nFor example, let's say that you want to execute some logic in a `Typer` callback depending on the subcommand that is being called.\n\nYou can get the name of the subcommand from the context:\n\n{* docs_src/commands/context/tutorial001.py hl[17,21] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py create Camila\n\n// We get the message from the callback\nAbout to execute command: create\nCreating user: Camila\n\n$ python main.py delete Camila\n\n// We get the message from the callback, this time with delete\nAbout to execute command: delete\nDeleting user: Camila\n```\n\n</div>\n\n## Executable callback\n\nBy default, the callback is only executed right before executing a command.\n\nAnd if no command is provided, the help message is shown.\n\nBut we could make it run even without a subcommand with `invoke_without_command=True`:\n\n{* docs_src/commands/context/tutorial002.py hl[16] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n// The callback is executed, we don't get the default help message\nInitializing database\n\n// Try with a command\n$ python main.py create Camila\n\n// The callback is still executed\nInitializing database\nCreating user: Camila\n```\n\n</div>\n\n## Exclusive executable callback\n\nWe might not want the callback to be executed if there's already other command that will be executed.\n\nFor that, we can get the `typer.Context` and check if there's an invoked command in `ctx.invoked_subcommand`.\n\nIf it's `None`, it means that we are not calling a subcommand but the main program (the callback) directly:\n\n{* docs_src/commands/context/tutorial003.py hl[17,21] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n// The callback is executed\nInitializing database\n\n// Check it with a subcommand\n$ python main.py create Camila\n\n// This time the callback is not executed\nCreating user: Camila\n```\n\n</div>\n\n## Configuring the context\n\nYou can pass configurations for the context when creating a command or callback.\n\nTo read more about the available configurations check the docs for <a href=\"https://click.palletsprojects.com/en/7.x/api/#context\" class=\"external-link\" target=\"_blank\">Click's `Context`</a>.\n\nFor example, you could keep additional *CLI parameters* not declared in your CLI program with `ignore_unknown_options` and `allow_extra_args`.\n\nThen you can access those extra raw *CLI parameters* as a `list` of `str` in `ctx.args`:\n\n{* docs_src/commands/context/tutorial004.py hl[7,9,10] *}\n\n<div class=\"termy\">\n\n```console\n$ python main.py --name Camila --city Berlin\n\nGot extra arg: --name\nGot extra arg: Camila\nGot extra arg: --city\nGot extra arg: Berlin\n```\n\n</div>\n\n/// tip\n\nNotice that it saves all the extra *CLI parameters* as a raw `list` of `str`, including the *CLI option* names and values, everything together.\n\n///\n"
  },
  {
    "file": "docs/tutorial/commands/help.md",
    "type": "markdown",
    "content": "# Command Help\n\nThe same as before, you can add help for the commands in the docstrings and the *CLI options*.\n\nAnd the `typer.Typer()` application receives a parameter `help` that you can pass with the main help text for your CLI program:\n\n{* docs_src/commands/help/tutorial001_an.py hl[4,9:11,22,26:30,43,47:51,60:62] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the new help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Awesome CLI user manager.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create      Create a new user with USERNAME.\n  delete      Delete a user with USERNAME.\n  delete-all  Delete ALL users in the database.\n  init        Initialize the users database.\n\n// Now the commands have inline help \ud83c\udf89\n\n// Check the help for create\n$ python main.py create --help\n\nUsage: main.py create [OPTIONS] USERNAME\n\n  Create a new user with USERNAME.\n\nOptions:\n  --help  Show this message and exit.\n\n// Check the help for delete\n$ python main.py delete --help\n\nUsage: main.py delete [OPTIONS] USERNAME\n\n  Delete a user with USERNAME.\n\n  If --force is not used, will ask for confirmation.\n\nOptions:\n  --force / --no-force  Force deletion without confirmation.  [required]\n  --help                Show this message and exit.\n\n// Check the help for delete-all\n$ python main.py delete-all --help\n\nUsage: main.py delete-all [OPTIONS]\n\n  Delete ALL users in the database.\n\n  If --force is not used, will ask for confirmation.\n\nOptions:\n  --force / --no-force  Force deletion without confirmation.  [required]\n  --help                Show this message and exit.\n\n// Check the help for init\n$ python main.py init --help\n\nUsage: main.py init [OPTIONS]\n\n  Initialize the users database.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n</div>\n\n/// tip\n\n`typer.Typer()` receives several other parameters for other things, we'll see that later.\n\nYou will also see how to use \"Callbacks\" later, and those include a way to add this same help message in a function docstring.\n\n///\n\n## Overwrite command help\n\nYou will probably be better adding the help text as a docstring to your functions, but if for some reason you wanted to overwrite it, you can use the `help` function argument passed to `@app.command()`:\n\n{* docs_src/commands/help/tutorial002.py hl[6,14] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice it uses the help passed to @app.command()\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy\n                        it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create  Create a new user with USERNAME.\n  delete  Delete a user with USERNAME.\n\n// It uses \"Create a new user with USERNAME.\" instead of \"Some internal utility function to create.\"\n```\n\n</div>\n\n## Deprecate a Command\n\nThere could be cases where you have a command in your app that you need to deprecate, so that your users stop using it, even while it's still supported for a while.\n\nYou can mark it with the parameter `deprecated=True`:\n\n{* docs_src/commands/help/tutorial003.py hl[14] *}\n\nAnd when you show the `--help` option you will see it's marked as \"`deprecated`\":\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] COMMAND [ARGS]...                  </b>\n<b>                                                                     </b>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--install-completion</b></font>          Install completion for the current  \u2502\n<font color=\"#A5A5A1\">\u2502                               shell.                              \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--show-completion</b></font>             Show completion for the current     \u2502\n<font color=\"#A5A5A1\">\u2502                               shell, to copy it or customize the  \u2502</font>\n<font color=\"#A5A5A1\">\u2502                               installation.                       \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                        Show this message and exit.         \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>create       </b></font> Create a user.                                      \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#6B9F98\"><b>delete       </b></font> Delete a user.              <font color=\"#F92672\">(deprecated)           </font> \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\nAnd if you check the `--help` for the deprecated command (in this example, the command `delete`), it also shows it as deprecated:\n\n<div class=\"termy\">\n\n```console\n$ python main.py delete --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py delete [OPTIONS] USERNAME                    </b>\n<b>                                                                     </b>\n <font color=\"#F92672\">(deprecated) </font>\n Delete a user.\n This is deprecated and will stop being supported soon.\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    username      <font color=\"#F4BF75\"><b>TEXT</b></font>  [default: None] <font color=\"#A6194C\">[required]</font>               \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>          Show this message and exit.                       \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\n## Rich Markdown and Markup\n\nIf you have **Rich** installed as described in [Printing and Colors](../printing.md){.internal-link target=_blank}, you can configure your app to enable markup text with the parameter `rich_markup_mode`.\n\nThen you can use more formatting in the docstrings and the `help` parameter for *CLI arguments* and *CLI options*. You will see more about it below. \ud83d\udc47\n\n/// info\n\nBy default, `rich_markup_mode` is `None` if Rich is not installed, and `\"rich\"` if it is installed. In the latter case, you can set `rich_markup_mode` to `None` to disable rich text formatting.\n\n///\n\n### Rich Markup\n\nIf you set `rich_markup_mode=\"rich\"` when creating the `typer.Typer()` app, you will be able to use <a href=\"https://rich.readthedocs.io/en/stable/markup.html\" class=\"external-link\" target=\"_blank\">Rich Console Markup</a> in the docstring, and even in the help for the *CLI arguments* and options:\n\n{* docs_src/commands/help/tutorial004_an.py hl[4,10,14:16,21,24,27] *}\n\nWith that, you can use <a href=\"https://rich.readthedocs.io/en/stable/markup.html\" class=\"external-link\" target=\"_blank\">Rich Console Markup</a> to format the text in the docstring for the command `create`, make the word \"`create`\" bold and green, and even use an <a href=\"https://rich.readthedocs.io/en/stable/markup.html#emoji\" class=\"external-link\" target=\"_blank\">emoji</a>.\n\nYou can also use markup in the help for the `username` CLI Argument.\n\nAnd the same as before, the help text overwritten for the command `delete` can also use Rich Markup, the same in the CLI Argument and CLI Option.\n\nIf you run the program and check the help, you will see that **Typer** uses **Rich** internally to format the help.\n\nCheck the help for the `create` command:\n\n<div class=\"termy\">\n\n```console\n$ python main.py create --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py create [OPTIONS] USERNAME                     </b>\n<b>                                                                     </b>\n <font color=\"#A6E22E\"><b>Create</b></font> a new <i>shiny</i> user. \u2728\n This requires a <font color=\"#A5A5A1\"><u style=\"text-decoration-style:single\">username</u></font><font color=\"#A5A5A1\">.                                           </font>\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    username      <font color=\"#F4BF75\"><b>TEXT</b></font>  The username to be <font color=\"#A6E22E\">created</font>               \u2502\n<font color=\"#A5A5A1\">\u2502                          [default: None]                          \u2502</font>\n<font color=\"#A5A5A1\">\u2502                          </font><font color=\"#A6194C\">[required]                </font>               \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>          Show this message and exit.                       \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\nAnd check the help for the `delete` command:\n\n<div class=\"termy\">\n\n```console\n$ python main.py delete --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py delete [OPTIONS] USERNAME                     </b>\n<b>                                                                     </b>\n <font color=\"#F92672\"><b>Delete</b></font> a user with <i>USERNAME</i>.\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    username      <font color=\"#F4BF75\"><b>TEXT</b></font>  The username to be <font color=\"#F92672\">deleted</font>               \u2502\n<font color=\"#A5A5A1\">\u2502                          [default: None]                          \u2502</font>\n<font color=\"#A5A5A1\">\u2502                          </font><font color=\"#A6194C\">[required]                </font>               \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--force</b></font>    <font color=\"#AE81FF\"><b>--no-force</b></font>      Force the <font color=\"#F92672\"><b>deletion</b></font> \ud83d\udca5                  \u2502\n<font color=\"#A5A5A1\">\u2502                            [default: no-force]                    \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                     Show this message and exit.            \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\n### Rich Markdown\n\nIf you set `rich_markup_mode=\"markdown\"` when creating the `typer.Typer()` app, you will be able to use Markdown in the docstring:\n\n{* docs_src/commands/help/tutorial005_an.py hl[4,9,12:20,25,27:28] *}\n\nWith that, you can use Markdown to format the text in the docstring for the command `create`, make the word \"`create`\" bold, show a list of items, and even use an <a href=\"https://rich.readthedocs.io/en/stable/markup.html#emoji\" class=\"external-link\" target=\"_blank\">emoji</a>.\n\nAnd the same as before, the help text overwritten for the command `delete` can also use Markdown.\n\nCheck the help for the `create` command:\n\n<div class=\"termy\">\n\n```console\n$ python main.py create --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py create [OPTIONS] USERNAME                     </b>\n<b>                                                                     </b>\n <b>Create</b> a new <i>shiny</i> user. \u2728\n\n <font color=\"#F4BF75\"><b> \u2022 </b></font><font color=\"#A5A5A1\">Create a username                                                </font>\n <font color=\"#F4BF75\"><b> \u2022 </b></font><font color=\"#A5A5A1\">Show that the username is created                                </font>\n\n <font color=\"#F4BF75\">\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</font>\n Learn more at the <font color=\"#44919F\">Typer docs website</font>\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    username      <font color=\"#F4BF75\"><b>TEXT</b></font>  The username to be <b>created</b>               \u2502\n<font color=\"#A5A5A1\">\u2502                          [default: None]                          \u2502</font>\n<font color=\"#A5A5A1\">\u2502                          </font><font color=\"#A6194C\">[required]                              </font> \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>          Show this message and exit.                       \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\nAnd the same for the `delete` command:\n\n<div class=\"termy\">\n\n```console\n$ python main.py delete --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py delete [OPTIONS] USERNAME                     </b>\n<b>                                                                     </b>\n <b>Delete</b> a user with <i>USERNAME</i>.\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    username      <font color=\"#F4BF75\"><b>TEXT</b></font>  The username to be <b>deleted</b>               \u2502\n<font color=\"#A5A5A1\">\u2502                          [default: None]                          \u2502</font>\n<font color=\"#A5A5A1\">\u2502                          </font><font color=\"#A6194C\">[required]                              </font> \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--force</b></font>    <font color=\"#AE81FF\"><b>--no-force</b></font>      Force the <b>deletion</b> \ud83d\udca5                  \u2502\n<font color=\"#A5A5A1\">\u2502                            [default: no-force]                    \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                     Show this message and exit.            \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\n/// info\n\nNotice that in Markdown you cannot define colors. For colors you might prefer to use Rich markup.\n\n///\n\n## Help Panels\n\nIf you have many commands or CLI parameters, you might want to show their documentation in different panels when using the `--help` option.\n\nIf you installed <a href=\"https://rich.readthedocs.io/\" class=\"external-link\" target=\"_blank\">Rich</a> as described in [Printing and Colors](../printing.md){.internal-link target=_blank}, you can configure the panel to use for each command or CLI parameter.\n\n### Help Panels for Commands\n\nTo set the panel for a command you can pass the argument `rich_help_panel` with the name of the panel you want to use:\n\n{* docs_src/commands/help/tutorial006.py hl[22,30,38,46] *}\n\nCommands without a panel will be shown in the default panel `Commands`, and the rest will be shown in the next panels:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] COMMAND [ARGS]...                   </b>\n<b>                                                                     </b>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--install-completion</b></font>          Install completion for the current  \u2502\n<font color=\"#A5A5A1\">\u2502                               shell.                              \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--show-completion</b></font>             Show completion for the current     \u2502\n<font color=\"#A5A5A1\">\u2502                               shell, to copy it or customize the  \u2502</font>\n<font color=\"#A5A5A1\">\u2502                               installation.                       \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                        Show this message and exit.         \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>create          </b></font> <font color=\"#A6E22E\">Create</font> a new user. \u2728                            \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>delete          </b></font> <font color=\"#F92672\">Delete</font> a user. \ud83d\udd25                                \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Utils and Configs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>config  </b></font> <font color=\"#66D9EF\">Configure</font> the system. \ud83d\udd27                                 \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>sync    </b></font> <font color=\"#66D9EF\">Synchronize</font> the system or something fancy like that. \u267b   \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Help and Others \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>help         </b></font> Get <font color=\"#F4BF75\">help</font> with the system. \u2753                        \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>report       </b></font> <font color=\"#F4BF75\">Report</font> an issue. \ud83d\udc1b                                 \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\n### Help Panels for CLI Parameters\n\nThe same way, you can configure the panels for *CLI arguments* and *CLI options* with `rich_help_panel`.\n\nAnd of course, in the same application you can also set the `rich_help_panel` for commands.\n\n{* docs_src/commands/help/tutorial007_an.py hl[15,21,27,37] *}\n\nThen if you run the application you will see all the *CLI parameters* in their respective panels.\n\n* First the ***CLI arguments*** that don't have a panel name set in a **default** one named \"`Arguments`\".\n* Next the ***CLI arguments*** with a **custom panel**. In this example named \"`Secondary Arguments`\".\n* After that, the ***CLI options*** that don't have a panel in a **default** one named \"`Options`\".\n* And finally, the ***CLI options*** with a **custom panel** set. In this example named \"`Additional Data`\".\n\nYou can check the `--help` option for the command `create`:\n\n<div class=\"termy\">\n\n```console\n$ python main.py create --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py create [OPTIONS] USERNAME [LASTNAME]          </b>\n<b>                                                                     </b>\n <font color=\"#A6E22E\">Create</font> a new user. \u2728\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    username      <font color=\"#F4BF75\"><b>TEXT</b></font>  The username to create [default: None]   \u2502\n<font color=\"#A5A5A1\">\u2502                          </font><font color=\"#A6194C\">[required]            </font>                   \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Secondary Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502   lastname      </font><font color=\"#A37F4E\"><b>[LASTNAME]</b></font>  The last name of the new user         \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--force</b></font>    <font color=\"#AE81FF\"><b>--no-force</b></font>      Force the creation of the user         \u2502\n<font color=\"#A5A5A1\">\u2502                            [default: no-force]                    \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                     Show this message and exit.            \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Additional Data \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--age</b></font>                   <font color=\"#F4BF75\"><b>INTEGER</b></font>  The age of the new user          \u2502\n<font color=\"#A5A5A1\">\u2502                                  [default: None]                  \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--favorite-color</b></font>        <font color=\"#F4BF75\"><b>TEXT   </b></font>  The favorite color of the new    \u2502\n<font color=\"#A5A5A1\">\u2502                                  user                             \u2502</font>\n<font color=\"#A5A5A1\">\u2502                                  [default: None]                  \u2502</font>\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\nAnd of course, the `rich_help_panel` can be used in the same way for commands in the same application.\n\nAnd those panels will be shown when you use the main `--help` option.\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] COMMAND [ARGS]...                   </b>\n<b>                                                                     </b>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--install-completion</b></font>          Install completion for the current  \u2502\n<font color=\"#A5A5A1\">\u2502                               shell.                              \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--show-completion</b></font>             Show completion for the current     \u2502\n<font color=\"#A5A5A1\">\u2502                               shell, to copy it or customize the  \u2502</font>\n<font color=\"#A5A5A1\">\u2502                               installation.                       \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                        Show this message and exit.         \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>create          </b></font> <font color=\"#A6E22E\">Create</font> a new user. \u2728                            \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Utils and Configs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>config         </b></font> <font color=\"#66D9EF\">Configure</font> the system. \ud83d\udd27                          \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\nYou can see the custom panel for the commands for \"`Utils and Configs`\".\n\n## Epilog\n\nIf you need, you can also add an epilog section to the help of your commands:\n\n{* docs_src/commands/help/tutorial008.py hl[6] *}\n\nAnd when you check the `--help` option it will look like:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] USERNAME                            </b>\n<b>                                                                     </b>\n <font color=\"#A6E22E\">Create</font> a new user. \u2728\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    username      <font color=\"#F4BF75\"><b>TEXT</b></font>  [default: None] <font color=\"#A6194C\">[required]</font>               \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--install-completion</b></font>          Install completion for the current  \u2502\n<font color=\"#A5A5A1\">\u2502                               shell.                              \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--show-completion</b></font>             Show completion for the current     \u2502\n<font color=\"#A5A5A1\">\u2502                               shell, to copy it or customize the  \u2502</font>\n<font color=\"#A5A5A1\">\u2502                               installation.                       \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                        Show this message and exit.         \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n\n Made with \u2764 in <font color=\"#66D9EF\">Venus</font>\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/commands/index.md",
    "type": "markdown",
    "content": "# Commands\n\nWe have seen how to create a CLI program with possibly several *CLI options* and *CLI arguments*.\n\nBut **Typer** allows you to create CLI programs with several commands (also known as subcommands).\n\nFor example, the program `git` has several commands.\n\nOne command of `git` is `git push`. And `git push` in turn takes its own *CLI arguments* and *CLI options*.\n\nFor example:\n\n<div class=\"termy\">\n\n```console\n// The push command with no parameters\n$ git push\n\n---> 100%\n\n// The push command with one CLI option --set-upstream and 2 CLI arguments\n$ git push --set-upstream origin master\n\n---> 100%\n```\n\n</div>\n\nAnother command of `git` is `git pull`, it also has some *CLI parameters*.\n\nIt's like if the same big program `git` had several small programs inside.\n\n/// tip\n\nA command looks the same as a *CLI argument*, it's just some name without a preceding `--`. But commands have a predefined name, and are used to group different sets of functionalities into the same CLI application.\n\n///\n\n## Command or subcommand\n\nIt's common to call a CLI program a \"command\".\n\nBut when one of these programs have subcommands, those subcommands are also frequently called just \"commands\".\n\nHave that in mind so you don't get confused.\n\nHere I'll use **CLI application** or **program** to refer to the program you are building in Python with Typer, and **command** to refer to one of these \"subcommands\" of your program.\n\n## Explicit application\n\nBefore creating CLI applications with multiple commands/subcommands we need to understand how to create an explicit `typer.Typer()` application.\n\nIn the *CLI options* and *CLI argument* tutorials you have seen how to create a single function and then pass that function to `typer.run()`.\n\nFor example:\n\n{* docs_src/first_steps/tutorial002.py hl[9] *}\n\nBut that is actually a shortcut. Under the hood, **Typer** converts that to a CLI application with `typer.Typer()` and executes it. All that inside of `typer.run()`.\n\nThere's also a more explicit way to achieve the same:\n\n{* docs_src/commands/index/tutorial001.py hl[3,6,12] *}\n\nWhen you use `typer.run()`, **Typer** is doing more or less the same as above, it will:\n\n* Create a new `typer.Typer()` \"application\".\n* Create a new \"`command`\" with your function.\n* Call the same \"application\" as if it was a function with \"`app()`\".\n\n/// info | `@decorator` Info\n\nThat `@something` syntax in Python is called a \"decorator\".\n\nYou put it on top of a function. Like a pretty decorative hat (I guess that's where the term came from).\n\nA \"decorator\" takes the function below and does something with it.\n\nIn our case, this decorator tells **Typer** that the function below is a \"`command`\".\n\n///\n\nBoth ways, with `typer.run()` and creating the explicit application, achieve almost the same.\n\n/// tip\n\nIf your use case is solved with just `typer.run()`, that's fine, you don't have to create the explicit `app` and use `@app.command()`, etc.\n\nYou might want to do that later when your app needs the extra features, but if it doesn't need them yet, that's fine.\n\n///\n\nIf you run the second example, with the explicit `app`, it works exactly the same:\n\n<div class=\"termy\">\n\n```console\n// Without a CLI argument\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing argument 'NAME'.\n\n// With the NAME CLI argument\n$ python main.py Camila\n\nHello Camila\n\n// Asking for help\n$ python main.py  --help\n\nUsage: main.py [OPTIONS] NAME\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n```\n\n</div>\n\n## CLI application completion\n\nThere's a little detail that is worth noting here.\n\nNow the help shows two new *CLI options*:\n\n* `--install-completion`\n* `--show-completion`\n\nTo get shell/tab completion, it's necessary to build a package that you and your users can install and **call directly**.\n\nSo instead of running a Python script like:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n\u2728 Some magic here \u2728\n```\n\n</div>\n\n...It would be called like:\n\n<div class=\"termy\">\n\n```console\n$ magic-app\n\n\u2728 Some magic here \u2728\n```\n\n</div>\n\nHaving a standalone program like that allows setting up shell/tab completion.\n\nThe first step to be able to create an installable package like that is to use an explicit `typer.Typer()` app.\n\nLater you can learn all the process to create a standalone CLI application and [Build a Package](../package.md){.internal-link target=_blank}.\n\nBut for now, it's just good to know that you are on that path. \ud83d\ude0e\n\n## A CLI application with multiple commands\n\nComing back to the CLI applications with multiple commands/subcommands, **Typer** allows creating CLI applications with multiple of them.\n\nNow that you know how to create an explicit `typer.Typer()` application and add one command, let's see how to add multiple commands.\n\nLet's say that we have a CLI application to manage users.\n\nWe'll have a command to `create` users and another command to `delete` them.\n\nTo begin, let's say it can only create and delete one single predefined user:\n\n{* docs_src/commands/index/tutorial002.py hl[6,11] *}\n\nNow we have a CLI application with 2 commands, `create` and `delete`:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Test them\n$ python main.py create\n\nCreating user: Hiro Hamada\n\n$ python main.py delete\n\nDeleting user: Hiro Hamada\n\n// Now we have 2 commands! \ud83c\udf89\n```\n\n</div>\n\nNotice that the help text now shows the 2 commands: `create` and `delete`.\n\n/// tip\n\nBy default, the names of the commands are generated from the function name.\n\n///\n\n## Show the help message if no command is given\n\nBy default, we need to specify `--help` to get the command's help page.\n\nHowever, by setting `no_args_is_help=True` when defining the `typer.Typer()` application, the help function will be shown whenever no argument is given:\n\n{* docs_src/commands/index/tutorial003.py hl[3] *}\n\nNow we can run this:\n\n<div class=\"termy\">\n\n```console\n// Check the help without having to type --help\n$ python main.py\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n```\n\n</div>\n\n\n## Sorting of the commands\n\nNote that by design, **Typer** shows the commands in the order they've been declared.\n\nSo, if we take our original example, with `create` and `delete` commands, and reverse the order in the Python file:\n\n{* docs_src/commands/index/tutorial004.py hl[7,12] *}\n\nThen we will see the `delete` command first in the help output:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  delete\n  create\n```\n\n</div>\n\n## Click Group\n\nIf you come from Click, a `typer.Typer` app with subcommands is more or less the equivalent of a <a href=\"https://click.palletsprojects.com/en/7.x/quickstart/#nesting-commands\" class=\"external-link\" target=\"_blank\">Click Group</a>.\n\n/// note | Technical Details\n\nA `typer.Typer` app is *not* a Click Group, but it provides the equivalent functionality. And it creates a Click Group when calling it.\n\nIt is not directly a Group because **Typer** doesn't modify the functions in your code to convert them to another type of object, it only registers them.\n\n///\n\n## Decorator Technical Details\n\nWhen you use `@app.command()` the function under the decorator is registered in the **Typer** application and is then used later by the application.\n\nBut Typer doesn't modify that function itself, the function is left as is.\n\nThat means that if your function is simple enough that you could create it without using `typer.Option()` or `typer.Argument()`, you could use the same function for a **Typer** application and a **FastAPI** application putting both decorators on top, or similar tricks.\n\n/// note | Click Technical Details\n\nThis behavior is a design difference with Click.\n\nIn Click, when you add a `@click.command()` decorator it actually modifies the function underneath and replaces it with an object.\n\n///\n"
  },
  {
    "file": "docs/tutorial/commands/name.md",
    "type": "markdown",
    "content": "# Custom Command Name\n\nBy default, the command names are generated from the function name.\n\nSo, if your function is something like:\n\n```Python\ndef create(username: str):\n    ...\n```\n\nThen the command name will be `create`.\n\nBut if you already had a function called `create()` somewhere in your code, you would have to name your CLI function differently.\n\nAnd what if you wanted the command to still be named `create`?\n\nFor this, you can set the name of the command in the first parameter for the `@app.command()` decorator:\n\n{* docs_src/commands/name/tutorial001.py hl[6,11] *}\n\nNow, even though the functions are named `cli_create_user()` and `cli_delete_user()`, the commands will still be named `create` and `delete`:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Test it\n$ python main.py create Camila\n\nCreating user: Camila\n```\n\n</div>\n\nNote that any underscores in the function name will be replaced with dashes.\n\nSo if your function is something like:\n\n```Python\ndef create_user(username: str):\n    ...\n```\nThen the command name will be `create-user`.\n"
  },
  {
    "file": "docs/tutorial/commands/one-or-multiple.md",
    "type": "markdown",
    "content": "# One or Multiple Commands\n\nYou might have noticed that if you create a single command, as in the first example:\n\n{* docs_src/commands/index/tutorial001.py hl[3,6,12] *}\n\n**Typer** is smart enough to create a CLI application with that single function as the main CLI application, not as a command/subcommand:\n\n<div class=\"termy\">\n\n```console\n// Without a CLI argument\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing argument 'NAME'.\n\n// With the NAME CLI argument\n$ python main.py Camila\n\nHello Camila\n\n// Asking for help\n$ python main.py\n\nUsage: main.py [OPTIONS] NAME\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n```\n\n</div>\n\n/// tip\n\nNotice that it doesn't show a command `main`, even though the function name is `main`.\n\n///\n\nBut if you add multiple commands, **Typer** will create one *CLI command* for each one of them:\n\n{* docs_src/commands/index/tutorial002.py hl[6,11] *}\n\nHere we have 2 commands `create` and `delete`:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Test the commands\n$ python main.py create\n\nCreating user: Hiro Hamada\n\n$ python main.py delete\n\nDeleting user: Hiro Hamada\n```\n\n</div>\n\n## One command and one callback\n\nIf you want to create a CLI app with one single command but you still want it to be a command/subcommand you can just add a callback:\n\n{* docs_src/commands/one_or_multiple/tutorial001.py hl[11,12,13] *}\n\nAnd now your CLI program will have a single command.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice the single command create\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// Try it\n$ python main.py create\n\nCreating user: Hiro Hamada\n```\n\n</div>\n\n## Using the callback to document\n\nNow that you are using a callback just to have a single command, you might as well use it to add documentation for your app:\n\n{* docs_src/commands/one_or_multiple/tutorial002.py hl[11,12,13,14,15,16,17] *}\n\nAnd now the docstring from the callback will be used as the help text:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice the help text from the docstring\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\n  Creates a single user Hiro Hamada.\n\n  In the next version it will create 5 more users.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n\n// And it still works the same, the callback does nothing\n$ python main.py create\n\nCreating user: Hiro Hamada\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/commands/options.md",
    "type": "markdown",
    "content": "# Command CLI Options\n\nCommands can also have their own *CLI options*.\n\nIn fact, each command can have different *CLI arguments* and *CLI options*:\n\n{* docs_src/commands/options/tutorial001_an.py hl[8,14:17,27:29,38] *}\n\nHere we have multiple commands, with different *CLI parameters*:\n\n* `create`:\n    * `username`: a *CLI argument*.\n* `delete`:\n    * `username`: a *CLI argument*.\n    * `--force`: a *CLI option*, if not provided, it's prompted.\n* `delete-all`:\n    * `--force`: a *CLI option*, if not provided, it's prompted.\n* `init`:\n    * Doesn't take any *CLI parameters*.\n\n<div class=\"termy\">\n\n```console\n// Check the help\npython main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  create\n  delete\n  delete-all\n  init\n```\n\n</div>\n\n/// tip\n\nCheck the command `delete-all`, by default command names are generated from the function name, replacing `_` with `-`.\n\n///\n\nTest it:\n\n<div class=\"termy\">\n\n```console\n// Check the command create\n$ python main.py create Camila\n\nCreating user: Camila\n\n// Now test the command delete\n$ python main.py delete Camila\n\n# Are you sure you want to delete the user? [y/n]: $ y\n\nDeleting user: Camila\n\n$ python main.py delete Wade\n\n# Are you sure you want to delete the user? [y/n]: $ n\n\nOperation cancelled\n\n// And finally, the command delete-all\n// Notice it doesn't have CLI arguments, only a CLI option\n\n$ python main.py delete-all\n\n# Are you sure you want to delete ALL users? [y/n]: $ y\n\nDeleting all users\n\n$ python main.py delete-all\n\n# Are you sure you want to delete ALL users? [y/n]: $ n\n\nOperation cancelled\n\n// And if you pass the --force CLI option, it doesn't need to confirm\n\n$ python main.py delete-all --force\n\nDeleting all users\n\n// And init that doesn't take any CLI parameter\n$ python main.py init\n\nInitializing user database\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/exceptions.md",
    "type": "markdown",
    "content": "# Exceptions and Errors\n\nWhen your code has errors and you run it, it will show the error and an exception.\n\nTyper does some tricks to help you detect those errors quickly.\n\n## Example Broken App\n\nLet's take this example broken app:\n\n{* docs_src/exceptions/tutorial001.py hl[5] *}\n\nThis code is broken because you can't sum a string and a number (`name + 3`).\n\n## Exceptions with Rich\n\nIf you have **Rich** installed (for example if you installed `\"typer[all]\"`), **Typer** will use it to automatically show you nicely printed errors.\n\nIt will **omit** all the parts of the traceback (the chain of things that called your function) that come from the internal parts in Typer and Click.\n\nSo, the error you see will be **much clearer** and simpler, to help you detect the problem in your code quickly:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n<font color=\"#F92672\">\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 </font><font color=\"#F92672\"><b>Traceback (most recent call last)</b></font><font color=\"#F92672\"> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/</font><font color=\"#F4BF75\"><b>main.py</b></font>:<font color=\"#66D9EF\">5</font> in <font color=\"#A6E22E\">main</font>                        <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    2                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    3                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    4 <font color=\"#66D9EF\">def</font> <font color=\"#A6E22E\">main</font>(name: <font color=\"#A1EFE4\">str</font> = <font color=\"#F4BF75\">&quot;morty&quot;</font>):                               <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F92672\">\u2771 </font> 5 \u2502   <font color=\"#A1EFE4\">print</font>(name + <font color=\"#66D9EF\">3</font>)                                          <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    6                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    7                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    8 <font color=\"#66D9EF\">if</font> <font color=\"#F92672\">__name__</font> == <font color=\"#F4BF75\">&quot;__main__&quot;</font>:                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u256d\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u256e</font>                                                <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font> name = <font color=\"#F4BF75\">&apos;morty&apos;</font> <font color=\"#F4BF75\">\u2502</font>                                                <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>                                                <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#F92672\"><b>TypeError: </b></font>can only concatenate str <b>(</b>not <font color=\"#A6E22E\">&quot;int&quot;</font><b>)</b> to str\n```\n\n</div>\n\n## Exceptions without Rich\n\nIf you don't have Rich installed, Typer will still do some tricks to show you the information **as clearly as possible**:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nTraceback (most recent call last):\n\n  File \"main.py\", line 12, in <module>\n    typer.run(main)\n\n  File \"main.py\", line 8, in main\n    print(name + 3)\n\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n</div>\n\n## Disable Local Variables for Security\n\nIf your Typer application handles **delicate information**, for example a **password**, a **key**, a **token**, then it could be problematic if the automatic errors show the value in those <abbr title=\"a variable that lives only inside a function, its value is only visible inside of it\">local variables</abbr>.\n\nThis would be relevant in particular if your CLI application is being run on some CI (continuous integration) system that is recording the logs.\n\nThe default errors above, when using Rich, show a section with:\n\n```Python\nname = 'morty'\n```\n\nIn this case, `name` is a local variable, it comes from a parameter passed to the function.\n\nBut if it was something like a password, you would have liked to hide it.\n\nIn that case, you can create the `typer.Typer()` application explicitly and set the parameter `pretty_exceptions_show_locals=False`:\n\n{* docs_src/exceptions/tutorial002.py hl[3] *}\n\nAnd now when you run it, you will see the error without the local variables:\n\n<div class=\"termy\">\n\n```console\n$ python main.py supersecret\n\n<font color=\"#F92672\">\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 </font><font color=\"#F92672\"><b>Traceback (most recent call last)</b></font><font color=\"#F92672\"> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/</font><font color=\"#F4BF75\"><b>main.py</b></font>:<font color=\"#66D9EF\">8</font> in <font color=\"#A6E22E\">main</font>                        <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    5                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    6 <font color=\"#AE81FF\"><b>@app</b></font>.command()                                               <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    7 <font color=\"#66D9EF\">def</font> <font color=\"#A6E22E\">main</font>(password: <font color=\"#A1EFE4\">str</font>):                                     <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F92672\">\u2771 </font> 8 \u2502   <font color=\"#A1EFE4\">print</font>(password + <font color=\"#66D9EF\">3</font>)                                      <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    9                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>   10                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>   11 <font color=\"#66D9EF\">if</font> <font color=\"#F92672\">__name__</font> == <font color=\"#F4BF75\">&quot;__main__&quot;</font>:                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#F92672\"><b>TypeError: </b></font>can only concatenate str <b>(</b>not <font color=\"#A6E22E\">&quot;int&quot;</font><b>)</b> to str\n```\n\n</div>\n\nNote that you passed the password `supersecret`, but it's not shown anywhere in the error message.\n\nBeing able to see the values of local variables is normally very **helpful** to diagnose, **debug**, and fix problems, but if you are dealing with delicate information, now you know how to secure it. \ud83d\udd12\n\n## Disable Short Output\n\nIf you want to show the full exception, including the parts in Typer and Click, you can use the parameter `pretty_exceptions_short=False`:\n\n{* docs_src/exceptions/tutorial003.py hl[3] *}\n\nNow when you run it, you will see the whole output:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n<font color=\"#F92672\">\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 </font><font color=\"#F92672\"><b>Traceback (most recent call last)</b></font><font color=\"#F92672\"> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/</font><font color=\"#F4BF75\"><b>main.py</b></font>:<font color=\"#66D9EF\">12</font> in <font color=\"#A6E22E\">&lt;module&gt;</font>                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    9                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>   10                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>   11 <font color=\"#66D9EF\">if</font> <font color=\"#F92672\">__name__</font> == <font color=\"#F4BF75\">&quot;__main__&quot;</font>:                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F92672\">\u2771 </font>12 \u2502   app()                                                    <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>   13                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font> <font color=\"#A6194C\">__annotations__</font> = <b>{}</b>                                          <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>    <font color=\"#A6194C\">__builtins__</font> = <b>&lt;</b><font color=\"#AE81FF\"><b>module</b></font> <font color=\"#F4BF75\">&apos;builtins&apos;</font> <b>(</b>built-in<b>)&gt;</b>              <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>      <font color=\"#A6194C\">__cached__</font> = <font color=\"#66D9EF\">None</font>                                        <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>         <font color=\"#A6194C\">__doc__</font> = <font color=\"#66D9EF\">None</font>                                        <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>        <font color=\"#A6194C\">__file__</font> = <font color=\"#F4BF75\">&apos;main.py&apos;</font>                                   <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>      <font color=\"#A6194C\">__loader__</font> = <b>&lt;</b><font color=\"#AE81FF\"><b>_frozen_importlib_external.SourceFileLoad\u2026</b></font> <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>                   object at <font color=\"#66D9EF\">0x7f047db1c050</font><b>&gt;</b>                   <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>        <font color=\"#A6194C\">__name__</font> = <font color=\"#F4BF75\">&apos;__main__&apos;</font>                                  <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>     <font color=\"#A6194C\">__package__</font> = <font color=\"#66D9EF\">None</font>                                        <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>        <font color=\"#A6194C\">__spec__</font> = <font color=\"#66D9EF\">None</font>                                        <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>             app = <b>&lt;</b><font color=\"#AE81FF\"><b>typer.main.Typer</b></font> object at <font color=\"#66D9EF\">0x7f047db51d90</font><b>&gt;</b> <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>            main = <b>&lt;</b><font color=\"#AE81FF\"><b>function</b></font> main at <font color=\"#66D9EF\">0x7f047db56830</font><b>&gt;</b>           <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>           typer = <b>&lt;</b><font color=\"#AE81FF\"><b>module</b></font> <font color=\"#F4BF75\">&apos;typer&apos;</font> from                        <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font>                   <font color=\"#F4BF75\">&apos;/home/user/code/superapp/env/lib/python3.\u2026</font> <font color=\"#F4BF75\">\u2502</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/env/lib/python3.7/site-packages/typer/</font><font color=\"#F4BF75\"><b>ma</b></font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\"><b>in.py</b></font>:<font color=\"#66D9EF\">328</font> in <font color=\"#A6E22E\">__call__</font>                                             <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/env/lib/python3.7/site-packages/typer/</font><font color=\"#F4BF75\"><b>ma</b></font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\"><b>in.py</b></font>:<font color=\"#66D9EF\">311</font> in <font color=\"#A6E22E\">__call__</font>                                             <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/env/lib/python3.7/site-packages/click/</font><font color=\"#F4BF75\"><b>co</b></font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\"><b>re.py</b></font>:<font color=\"#66D9EF\">1130</font> in <font color=\"#A6E22E\">__call__</font>                                            <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/env/lib/python3.7/site-packages/typer/</font><font color=\"#F4BF75\"><b>co</b></font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\"><b>re.py</b></font>:<font color=\"#66D9EF\">723</font> in <font color=\"#A6E22E\">main</font>                                                 <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/env/lib/python3.7/site-packages/typer/</font><font color=\"#F4BF75\"><b>co</b></font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\"><b>re.py</b></font>:<font color=\"#66D9EF\">216</font> in <font color=\"#A6E22E\">_main</font>                                                <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/env/lib/python3.7/site-packages/click/</font><font color=\"#F4BF75\"><b>co</b></font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\"><b>re.py</b></font>:<font color=\"#66D9EF\">1404</font> in <font color=\"#A6E22E\">invoke</font>                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/env/lib/python3.7/site-packages/click/</font><font color=\"#F4BF75\"><b>co</b></font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\"><b>re.py</b></font>:<font color=\"#66D9EF\">760</font> in <font color=\"#A6E22E\">invoke</font>                                               <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/env/lib/python3.7/site-packages/typer/</font><font color=\"#F4BF75\"><b>ma</b></font> <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\"><b>in.py</b></font>:<font color=\"#66D9EF\">683</font> in <font color=\"#A6E22E\">wrapper</font>                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#A37F4E\">/home/user/code/superapp/</font><font color=\"#F4BF75\"><b>main.py</b></font>:<font color=\"#66D9EF\">8</font> in <font color=\"#A6E22E\">main</font>                        <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    5                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    6 <font color=\"#AE81FF\"><b>@app</b></font>.command()                                               <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    7 <font color=\"#66D9EF\">def</font> <font color=\"#A6E22E\">main</font>(name: <font color=\"#A1EFE4\">str</font> = <font color=\"#F4BF75\">&quot;morty&quot;</font>):                               <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F92672\">\u2771 </font> 8 \u2502   <font color=\"#A1EFE4\">print</font>(name + <font color=\"#66D9EF\">3</font>)                                          <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>    9                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>   10                                                              <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>   11 <font color=\"#66D9EF\">if</font> <font color=\"#F92672\">__name__</font> == <font color=\"#F4BF75\">&quot;__main__&quot;</font>:                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font>                                                                   <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u256d\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u256e</font>                                                <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2502</font> name = <font color=\"#F4BF75\">&apos;morty&apos;</font> <font color=\"#F4BF75\">\u2502</font>                                                <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2502</font> <font color=\"#F4BF75\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>                                                <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#F92672\"><b>TypeError: </b></font>can only concatenate str <b>(</b>not <font color=\"#A6E22E\">&quot;int&quot;</font><b>)</b> to str\n```\n\n</div>\n\n## Disable Pretty Exceptions\n\nYou can also entirely disable pretty exceptions with the parameter `pretty_exceptions_enable=False`:\n\n{* docs_src/exceptions/tutorial004.py hl[3] *}\n\nAnd now you will see the full standard exception as with any other Python program:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nTraceback (most recent call last):\n  File \"main.py\", line 12, in <module>\n    app()\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/main.py\", line 328, in __call__\n    raise e\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/main.py\", line 311, in __call__\n    return get_command(self)(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 1130, in __call__\n    return self.main(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/core.py\", line 723, in main\n    **extra,\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/core.py\", line 216, in _main\n    rv = self.invoke(ctx)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 1404, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 760, in invoke\n    return __callback(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/main.py\", line 683, in wrapper\n    return callback(**use_params)  # type: ignore\n  File \"main.py\", line 8, in main\n    print(name + 3)\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n</div>\n\nYou could also achieve the same with the environment variable `_TYPER_STANDARD_TRACEBACK=1`.\n\nThis will work for any other Typer program too, in case you need to debug a problem in a Typer program made by someone else:\n\n<div class=\"termy\">\n\n```console\nexport _TYPER_STANDARD_TRACEBACK=1\n$ python main.py\n\n\nTraceback (most recent call last):\n  File \"main.py\", line 12, in <module>\n    app()\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/main.py\", line 328, in __call__\n    raise e\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/main.py\", line 311, in __call__\n    return get_command(self)(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 1130, in __call__\n    return self.main(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/core.py\", line 723, in main\n    **extra,\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/core.py\", line 216, in _main\n    rv = self.invoke(ctx)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 1404, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/click/core.py\", line 760, in invoke\n    return __callback(*args, **kwargs)\n  File \"/home/user/code/superapp/env/lib/python3.7/site-packages/typer/main.py\", line 683, in wrapper\n    return callback(**use_params)  # type: ignore\n  File \"main.py\", line 8, in main\n    print(name + 3)\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/first-steps.md",
    "type": "markdown",
    "content": "# First Steps\n\n## The simplest example\n\nThe simplest **Typer** file could look like this:\n\n{* docs_src/first_steps/tutorial001.py *}\n\nCopy that to a file `main.py`.\n\nTest it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nHello World\n\n// It just prints \"Hello World\".\n\n// Now check the --help\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS]                            </b>\n<b>                                                     </b>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                        Show this message   \u2502\n<font color=\"#A5A5A1\">\u2502                               and exit.           \u2502</font>\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\n...but this program is still not very useful. Let's extend it.\n\n## What is a **CLI argument**\n\nHere we will use the word **CLI argument** to refer to **CLI parameters** passed in some specific order to the CLI application. By default, they are *required*.\n\nIf you go to your terminal and type:\n\n<div class=\"termy\">\n\n```bash\n$ ls ./myproject\n\nfirst-steps.md  intro.md\n```\n\n</div>\n\n`ls` will show the contents of the directory `./myproject`.\n\n* `ls` is the *program* (or \"command\", \"CLI app\").\n* `./myproject` is a *CLI argument*, in this case it refers to the path of a directory.\n\nThey are a bit different from **CLI options** that you will see later below.\n\n## Add a CLI argument\n\nUpdate the previous example with an argument `name`:\n\n{* docs_src/first_steps/tutorial002.py hl[4,5] *}\n\n<div class=\"termy\">\n\n```console\n\n$ python main.py\n\n// If you run it without the argument, it shows a nice error\n<font color=\"#F4BF75\">Usage: </font>main.py [OPTIONS] NAME\n<font color=\"#A5A5A1\">Try </font><font color=\"#44919F\">&apos;main.py </font><font color=\"#44919F\"><b>--help</b></font><font color=\"#44919F\">&apos;</font><font color=\"#A5A5A1\"> for help.</font>\n<font color=\"#F92672\">\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#F92672\">\u2502</font> Missing argument &apos;NAME&apos;.                          <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n\n// Now pass that NAME CLI argument\n$ python main.py Camila\n\nHello Camila\n\n// Here \"Camila\" is the CLI argument\n\n// To pass a name with spaces for the same CLI argument, use quotes\n$ python main.py \"Camila Guti\u00e9rrez\"\n\nHello Camila Guti\u00e9rrez\n```\n\n</div>\n\n/// tip\n\nIf you need to pass a single value that contains spaces to a *CLI argument*, use quotes (`\"`) around it.\n\n///\n\n## Two CLI arguments\n\nNow let's say we want to have the name and last name separated.\n\nSo, extend that to have 2 arguments, `name` and `lastname`:\n\n{* docs_src/first_steps/tutorial003.py hl[4,5] *}\n\n<div class=\"termy\">\n\n```console\n// Check the main --help\n$ python main.py --help\n\n<font color=\"#F4BF75\">Usage: </font>main.py [OPTIONS] NAME\n<font color=\"#A5A5A1\">Try </font><font color=\"#44919F\">&apos;main.py </font><font color=\"#44919F\"><b>--help</b></font><font color=\"#44919F\">&apos;</font><font color=\"#A5A5A1\"> for help.</font>\n<font color=\"#F92672\">\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#F92672\">\u2502</font> Missing argument &apos;NAME&apos;.                          <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n\n<font color=\"#A1EFE4\"><b>typer</b></font> on <font color=\"#AE81FF\"><b>\ue0a0 richify</b></font> <font color=\"#F92672\"><b>[\u00bb!?] </b></font>via <font color=\"#F4BF75\"><b>\ud83d\udc0d v3.7.5 (env3.7)</b></font>\n<font color=\"#F92672\"><b>\u276f</b></font> <font color=\"#A6E22E\">python</font> <u style=\"text-decoration-style:single\">main.py</u>\n<font color=\"#F4BF75\">Usage: </font>main.py [OPTIONS] NAME LASTNAME\n<font color=\"#A5A5A1\">Try </font><font color=\"#44919F\">&apos;main.py </font><font color=\"#44919F\"><b>--help</b></font><font color=\"#44919F\">&apos;</font><font color=\"#A5A5A1\"> for help.</font>\n<font color=\"#F92672\">\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#F92672\">\u2502</font> Missing argument &apos;NAME&apos;.                          <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n\n// There are now 2 CLI arguments, name and lastname\n\n// Now pass a single name argument\n$ python main.py Camila\n\n<font color=\"#F4BF75\">Usage: </font>main.py [OPTIONS] NAME LASTNAME\n<font color=\"#A5A5A1\">Try </font><font color=\"#44919F\">&apos;main.py </font><font color=\"#44919F\"><b>--help</b></font><font color=\"#44919F\">&apos;</font><font color=\"#A5A5A1\"> for help.</font>\n<font color=\"#F92672\">\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#F92672\">\u2502</font> Missing argument &apos;LASTNAME&apos;.                      <font color=\"#F92672\">\u2502</font>\n<font color=\"#F92672\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n\n// These 2 arguments are required, so, pass both:\n$ python main.py Camila Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n```\n\n</div>\n\n/// tip\n\nNotice that the order is important. The last name has to go after the first name.\n\nIf you called it with:\n\n```\n$ python main.py Guti\u00e9rrez Camila\n```\n\nyour app wouldn't have a way to know which is the `name` and which the `lastname`. It expects the first *CLI argument* to be the `name` and the second *CLI argument* to be the `lastname`.\n\n///\n\n## What is a **CLI option**\n\nHere we will use the word **CLI option** to refer to *CLI parameters* passed to the CLI application with a specific name. For example, if you go to your terminal and type:\n\n<div class=\"termy\">\n\n```console\n$ ls ./myproject --size\n\n12 first-steps.md   4 intro.md\n```\n\n</div>\n\n`ls` will show the contents of the directory `./myproject` with their `size`.\n\n* `ls` is the *program* (or \"command\", \"CLI app\").\n* `./myproject` is a *CLI argument*.\n* `--size` is an optional *CLI option*.\n\nThe program knows it has to show the size because it sees `--size`, not because of the order.\n\nA *CLI option* like `--size` doesn't depend on the order like a *CLI argument*.\n\nSo, if you put the `--size` *before* the *CLI argument*, it still works (in fact, that's the most common way of doing it):\n\n<div class=\"termy\">\n\n```console\n$ ls --size ./myproject\n\n12 first-steps.md   4 intro.md\n```\n\n</div>\n\nThe main visual difference between a *CLI option* and a *CLI argument* is that the *CLI option* has `--` prepended to the name, like in \"`--size`\".\n\nA *CLI option* doesn't depend on the order because it has a predefined name (here it's `--size`). This is because the CLI app is looking specifically for a literal `--size` parameter (also known as \"flag\" or \"switch\"), with that specific \"name\" (here the specific name is \"`--size`\"). The CLI app will check if you typed it or not, it will be actively looking for `--size` even if you didn't type it (to check if it's there or not).\n\nIn contrast, the CLI app is not actively looking for the *CLI argument* with a text \"`./myproject`\", it has no way to know if you would type `./myproject` or `./my-super-awesome-project` or anything else. It's just waiting to get whatever you give it. The only way to know that you refer to a specific *CLI argument* is because of the order. The same way that it knows that the first *CLI argument* was the `name` and the second was the `lastname`, but if you mixed the order, it wouldn't be able to handle it.\n\nInstead, with a *CLI option*, the order doesn't matter.\n\nAlso, by default, a *CLI option* is *optional* (not *required*).\n\nSo, by default:\n\n* A *CLI argument* is **required**\n* A *CLI option* is **optional**\n\nBut the *required* and *optional* defaults can be changed.\n\nSo, the main and **most important** difference is that:\n\n* *CLI options* **start with `--`** and don't depend on the order\n* *CLI arguments* depend on the **sequence order**\n\n/// tip\n\nIn this example above the *CLI option* `--size` is just a \"flag\" or \"switch\" that will contain a boolean value, `True` or `False`, depending on if it was added to the command or not.\n\nThis one doesn't receive any values. But *CLI options* can also receive values like *CLI arguments*. You'll see how later.\n\n///\n\n## Add one *CLI option*\n\nNow add a `--formal` *CLI option*:\n\n{* docs_src/first_steps/tutorial004.py hl[4,5] *}\n\nHere `formal` is a `bool` that is `False` by default.\n\n<div class=\"termy\">\n\n```console\n// Get the help\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] NAME LASTNAME                            </b>\n<b>                                                                   </b>\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    name          <font color=\"#F4BF75\"><b>TEXT</b></font>  [default: None] <font color=\"#A6194C\">[required]</font>             \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    lastname      <font color=\"#F4BF75\"><b>TEXT</b></font>  [default: None] <font color=\"#A6194C\">[required]</font>             \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--formal</b></font>                <font color=\"#AE81FF\"><b>--no-formal</b></font>      [default: no-formal]   \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                                   Show this message and  \u2502\n<font color=\"#A5A5A1\">\u2502                                          exit.                  \u2502</font>\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\n/// tip\n\nNotice that it automatically creates a `--formal` and a `--no-formal` because it detected that `formal` is a `bool`.\n\n///\n\nNow call it normally:\n\n<div class=\"termy\">\n\n```console\n$ python main.py Camila Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n\n// But if you pass --formal\n$ python main.py Camila Guti\u00e9rrez --formal\n\nGood day Ms. Camila Guti\u00e9rrez.\n\n// And as --formal is a CLI option you can put it anywhere in this command\n$ python main.py Camila --formal Guti\u00e9rrez\n\nGood day Ms. Camila Guti\u00e9rrez.\n\n$ python main.py --formal Camila Guti\u00e9rrez\n\nGood day Ms. Camila Guti\u00e9rrez.\n```\n\n</div>\n\n## A *CLI option* with a value\n\nTo convert the `lastname` from a *CLI argument* to a *CLI option*, give it a default value of `\"\"`:\n\n{* docs_src/first_steps/tutorial005.py hl[4] *}\n\nAs `lastname` now has a default value of `\"\"` (an empty string) it is no longer required in the function, and **Typer** will now by default make it an optional *CLI option*.\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] NAME                                       </b>\n<b>                                                                     </b>\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    name      <font color=\"#F4BF75\"><b>TEXT</b></font>  [default: None] <font color=\"#A6194C\">[required]</font>                   \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--lastname</b></font>                             <font color=\"#F4BF75\"><b>TEXT</b></font>                       \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--formal</b></font>                <font color=\"#AE81FF\"><b>--no-formal</b></font>    <font color=\"#F4BF75\"><b>    </b></font>  [default: no-formal] \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                                 <font color=\"#F4BF75\"><b>    </b></font>  Show this message    \u2502\n<font color=\"#A5A5A1\">\u2502                                              and exit.            \u2502</font>\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\n/// tip\n\nNotice the `--lastname`, and notice that it takes a textual value.\n\nA *CLI option* with a value like `--lastname` (contrary to a *CLI option* without a value, a `bool` flag, like `--formal` or `--size`) takes as its value whatever is at the *right side* of the *CLI option*.\n\n///\n\n<div class=\"termy\">\n\n```console\n// Call it without a --lastname\n$ python main.py Camila\n\nHello Camila\n\n// Pass the --lastname\n$ python main.py Camila --lastname Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n```\n\n</div>\n\n/// tip\n\nNotice that \"`Guti\u00e9rrez`\" is at the right side of `--lastname`. A *CLI option* with a value takes as its value whatever is at the *right side*.\n\n///\n\nAnd as `--lastname` is now a *CLI option* that doesn't depend on the order, you can pass it before the name:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --lastname Guti\u00e9rrez Camila\n\n// and it will still work normally\nHello Camila Guti\u00e9rrez\n```\n\n</div>\n\n## Document your CLI app\n\nIf you add a <abbr title=\"a multi-line string as the first expression inside a function (not assigned to any variable) used for documentation\">docstring</abbr> to your function it will be used in the help text:\n\n{* docs_src/first_steps/tutorial006.py hl[5,6,7,8,9] *}\n\nNow see it with the `--help` option:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] NAME                                       </b>\n<b>                                                                     </b>\n Say hi to NAME, optionally with a <font color=\"#A1EFE4\"><b>--lastname</b></font>.\n If <font color=\"#6B9F98\"><b>--formal</b></font><font color=\"#A5A5A1\"> is used, say hi very formally.                          </font>\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    name      <font color=\"#F4BF75\"><b>TEXT</b></font>  [default: None] <font color=\"#A6194C\">[required]</font>                   \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--lastname</b></font>                             <font color=\"#F4BF75\"><b>TEXT</b></font>                       \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--formal</b></font>                <font color=\"#AE81FF\"><b>--no-formal</b></font>    <font color=\"#F4BF75\"><b>    </b></font>  [default: no-formal] \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                                 <font color=\"#F4BF75\"><b>    </b></font>  Show this message    \u2502\n<font color=\"#A5A5A1\">\u2502                                              and exit.            \u2502</font>\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\n/// tip\n\nThere is another place to document the specific *CLI options* and *CLI arguments* that will show up next to them in the help text as with `--install-completion` or `--help`, you will learn that later in the tutorial.\n\n///\n\n## Arguments, options, parameters, optional, required\n\nBe aware that these terms refer to multiple things depending on the context, and sadly, those \"contexts\" mix frequently, so it's easy to get confused.\n\n### In Python\n\nIn Python, the names of the variables in a function, like `name` and `lastname`:\n\n```Python\ndef main(name: str, lastname: str = \"\"):\n    pass\n```\n\nare called \"Python function parameters\" or \"Python function arguments\".\n\n/// note | Technical Details\n\nThere's actually a very small distinction in Python between \"parameter\" and \"argument\".\n\nIt's quite technical... and somewhat pedantic.\n\n*Parameter* refers to the variable name in a function *declaration*. Like:\n\n```\ndef bring_person(name: str, lastname: str = \"\"):\n    pass\n```\n\n*Argument* refers to the value passed when *calling* a function. Like:\n\n```\nperson = bring_person(\"Camila\", lastname=\"Guti\u00e9rrez\")\n```\n\n...but you will probably see them used interchangeably in most of the places (including here).\n\n///\n\n#### Python default values\n\nIn Python, in a function, a parameter with a *default value* like `lastname` in:\n\n```Python\ndef main(name: str, lastname: str = \"\"):\n    pass\n```\n\nis considered an \"optional parameter\" (or \"optional argument\").\n\nThe default value can be anything, like `\"\"` or `None`.\n\nAnd a parameter like `name`, that doesn't have a default value, is considered *required*.\n\n### In CLIs\n\nWhen talking about command line interface applications, the words **\"argument\"** and **\"parameter\"** are commonly used to refer to that data passed to a CLI app, those parameters.\n\nBut those words **don't imply** anything about the data being required, needing to be passed in a certain order, nor having a flag like `--lastname`.\n\nThe parameters that come with a name like `--lastname` (and optionally a value) are commonly optional, not required. So, when talking about CLIs it's common to call them **optional arguments** or **optional parameters**. Sometimes these *optional parameters* that start with `--` are also called a **flag** or a **switch**.\n\nIn reality, the parameters that require an order can be made *optional* too. And the ones that come with a flag (like `--lastname`) can be *required* too.\n\n### In **Typer**\n\nTo try and make it a bit easier, we'll normally use the words \"parameter\" or \"argument\" to refer to \"Python functions parameters\" or \"Python functions arguments\".\n\nWe'll use ***CLI argument*** to refer to those *CLI parameters* that depend on the specific order. That are **required** by default.\n\nAnd we'll use ***CLI option*** to refer to those *CLI parameters* that depend on a name that starts with `--` (like `--lastname`). That are **optional** by default.\n\nWe will use ***CLI parameter*** to refer to both, *CLI arguments* and *CLI options*.\n\n## The `typer` Command\n\nWhen you install `typer`, by default it adds a `typer` command to your shell.\n\nThis `typer` command allows you to run your scripts with \u2728 auto completion \u2728 in your terminal.\n\nAs an alternative to running with Python:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nHello World\n```\n\n</div>\n\nYou can run with the `typer` command:\n\n<div class=\"termy\">\n\n```console\n$ typer main.py run\n\nHello World\n```\n\n</div>\n\n...and it will give you auto completion in your terminal when you hit <kbd>TAB</kbd> for all your code.\n\nSo you can use it to have auto completion for your own scripts as you continue with the tutorial.\n\n/// tip\n\nYour CLI application built with **Typer** won't need the `typer` command to have auto completion once you create a Python package.\n\nBut for short scripts and for learning, before creating a Python package, it might be useful.\n\n///\n"
  },
  {
    "file": "docs/tutorial/index.md",
    "type": "markdown",
    "content": "# Learn\n\nLearn how to use **Typer** in this step-by-step **Tutorial** - **User Guide**.\n\nIt covers everything you need to know from the **simplest scripts** to **complex CLI applications**.\n\nYou could consider this a **book**, a **course**, the **official** and recommended way to learn **Typer**. \ud83d\ude0e\n\n## Python Types\n\nIf you need a refresher about how to use Python type hints, check the first part of <a href=\"https://fastapi.tiangolo.com/python-types/\" class=\"external-link\" target=\"_blank\">FastAPI's Python types intro</a>.\n\nYou can also check the <a href=\"https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html\" class=\"external-link\" target=\"_blank\">mypy cheat sheet</a>.\n\nIn short (very short), you can declare a function with parameters like:\n\n```Python\nfrom typing import Optional\n\ndef type_example(name: str, formal: bool = False, intro: Optional[str] = None):\n    pass\n```\n\nAnd your editor (and **Typer**) will know that:\n\n* `name` is of type `str` and is a required parameter.\n* `formal` is a `bool` and is by default `False`.\n* `intro` is an optional `str`, by default is `None`.\n\nThese type hints are what give you autocomplete in your editor and several other features.\n\n**Typer** is based on these type hints.\n\n## About this Tutorial\n\nThis tutorial shows you how to use **Typer** with all its features, step by step.\n\nEach section gradually builds on the previous ones, but it's structured to separate topics, so that you can go directly to any specific one to solve your specific CLI needs.\n\nIt is also built to work as a future reference so you can come back and see exactly what you need.\n\n## Run the Code\n\nAll the code blocks can be copied and used directly (they are tested Python files).\n\nTo run any of the examples, copy the code to a file `main.py`, and run it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n\u2728 The magic happens here \u2728\n```\n\n</div>\n\nIt is **HIGHLY encouraged** that you write or copy the code, edit it and run it locally.\n\nUsing it in your editor is what really shows you the benefits of **Typer**, seeing how little code you have to write, all the **inline errors**, **autocompletion**, etc.\n\nAnd running the examples is what will really help you **understand** what is going on.\n\nYou can learn a lot more by **running some examples** and **playing around** with them than by reading all the docs here.\n"
  },
  {
    "file": "docs/tutorial/install.md",
    "type": "markdown",
    "content": "# Install **Typer**\n\nThe first step is to install **Typer**.\n\nFirst, make sure you create your [virtual environment](../virtual-environments.md){.internal-link target=_blank}, activate it, and then install it, for example with:\n\n<div class=\"termy\">\n\n```console\n$ pip install typer\n---> 100%\nSuccessfully installed typer click shellingham rich\n```\n\n</div>\n\nBy default, `typer` comes with `rich` and `shellingham`.\n\n/// note\n\nIf you are an advanced user and want to opt out of these default extra dependencies, you can instead install `typer-slim`.\n\n```bash\npip install typer\n```\n\n...includes the same optional dependencies as:\n\n```bash\npip install \"typer-slim[standard]\"\n```\n\n///\n"
  },
  {
    "file": "docs/tutorial/launch.md",
    "type": "markdown",
    "content": "# Launching Applications\n\nYou can launch applications from your CLI program with `typer.launch()`.\n\nIt will launch the appropriate application depending on the URL or file type you pass it:\n\n{* docs_src/launch/tutorial001.py hl[6] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nOpening Typer docs\n\n// Opens browser with Typer's docs\n```\n\n</div>\n\n## Locating a file\n\nYou can also make the operating system open the file browser indicating where a file is located with `locate=True`:\n\n{* docs_src/launch/tutorial002.py hl[17] *}\n\n/// tip\n\nThe rest of the code in this example is just making sure the app directory exists and creating the config file.\n\nBut the most important part is the `typer.launch(config_file_str, locate=True)` with the argument `locate=True`.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nOpening config directory\n\n// Opens a file browser indicating where the config file is located\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/multiple-values/arguments-with-multiple-values.md",
    "type": "markdown",
    "content": "# CLI Arguments with Multiple Values\n\n*CLI arguments* can also receive multiple values.\n\nYou can define the type of a *CLI argument* using `typing.List`.\n\n{* docs_src/multiple_values/arguments_with_multiple_values/tutorial001.py hl[7] *}\n\nAnd then you can pass it as many *CLI arguments* of that type as you want:\n\n<div class=\"termy\">\n\n```console\n$ python main.py ./index.md ./first-steps.md woohoo!\n\nThis file exists: index.md\nwoohoo!\nThis file exists: first-steps.md\nwoohoo!\n```\n\n</div>\n\n/// tip\n\nWe also declared a final *CLI argument* `celebration`, and it's correctly used even if we pass an arbitrary number of `files` first.\n\n///\n\n/// info\n\nA `List` can only be used in the last command (if there are subcommands), as this will take anything to the right and assume it's part of the expected *CLI arguments*.\n\n///\n\n## *CLI arguments* with tuples\n\nIf you want a specific number of values and types, you can use a tuple, and it can even have default values:\n\n{* docs_src/multiple_values/arguments_with_multiple_values/tutorial002_an.py hl[8:10] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] [NAMES]...\n\nArguments:\n  [NAMES]...  Select 3 characters to play with  [default: Harry, Hermione, Ron]\n\nOptions:\n  --help                Show this message and exit.\n\n// Use it with its defaults\n$ python main.py\n\nHello Harry\nHello Hermione\nHello Ron\n\n// If you pass an invalid number of arguments you will get an error\n$ python main.py Draco Hagrid\n\nError: Argument 'names' takes 3 values\n\n// And if you pass the exact number of values it will work correctly\n$ python main.py Draco Hagrid Dobby\n\nHello Draco\nHello Hagrid\nHello Dobby\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/multiple-values/index.md",
    "type": "markdown",
    "content": "# Multiple Values\n\nThere are several ways to declare multiple values for *CLI options* and *CLI arguments*.\n\nWe'll see them in the next short sections.\n"
  },
  {
    "file": "docs/tutorial/multiple-values/multiple-options.md",
    "type": "markdown",
    "content": "# Multiple CLI Options\n\nYou can declare a *CLI option* that can be used multiple times, and then get all the values.\n\nFor example, let's say you want to accept several users in a single execution.\n\nFor this, use the standard Python `typing.List` to declare it as a `list` of `str`:\n\n{* docs_src/multiple_values/multiple_options/tutorial001_an.py hl[1,7] *}\n\nYou will receive the values as you declared them, as a `list` of `str`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// The default value is 'None'\n$ python main.py\n\nNo provided users (raw input = None)\nAborted!\n\n// Now pass a user\n$ python main.py --user Camila\n\nProcessing user: Camila\n\n// And now try with several users\n$ python main.py --user Camila --user Rick --user Morty\n\nProcessing user: Camila\nProcessing user: Rick\nProcessing user: Morty\n```\n\n</div>\n\n## Multiple `float`\n\nThe same way, you can use other types and they will be converted by **Typer** to their declared type:\n\n{* docs_src/multiple_values/multiple_options/tutorial002_an.py hl[7] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nThe sum is 0\n\n// Try with some numbers\n$ python main.py --number 2\n\nThe sum is 2.0\n\n// Try with some numbers\n$ python main.py --number 2 --number 3 --number 4.5\n\nThe sum is 9.5\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/multiple-values/options-with-multiple-values.md",
    "type": "markdown",
    "content": "# CLI Options with Multiple Values\n\nYou can also declare a *CLI option* that takes several values of different types.\n\nYou can set the number of values and types to anything you want, but it has to be a fixed number of values.\n\nFor this, use the standard Python `typing.Tuple`:\n\n{* docs_src/multiple_values/options_with_multiple_values/tutorial001_an.py hl[1,7] *}\n\nEach of the internal types defines the type of each value in the tuple.\n\nSo:\n\n```Python\nuser: Tuple[str, int, bool]\n```\n\nmeans that the parameter `user` is a tuple of 3 values.\n\n* The first value is a `str`.\n* The second value is an `int`.\n* The third value is a `bool`.\n\nLater we do:\n\n```Python\nusername, coins, is_wizard = user\n```\n\nIf you hadn't seen that, it means that `user` is a tuple with 3 values, and we are assigning each of the values to a new variable:\n\n* The first value in the tuple `user` (a `str`) goes to the variable `username`.\n* The second value in the tuple `user` (an `int`) goes to the variable `coins`.\n* The third value in the tuple `user` (a `bool`) goes to the variable `is_wizard`.\n\nSo, this:\n\n```Python\nusername, coins, is_wizard = user\n```\n\nis equivalent to this:\n\n```Python\nusername = user[0]\ncoins = user[1]\nis_wizard = user[2]\n```\n\n/// tip\n\nNotice that the default is a tuple with `(None, None, None)`.\n\nYou cannot simply use `None` here as the default because <a href=\"https://github.com/pallets/click/issues/472\" class=\"external-link\" target=\"_blank\">Click doesn't support it</a>.\n\n///\n\n## Check it\n\nNow let's see how this works in the terminal:\n\n<div class=\"termy\">\n\n```console\n// check the help\n$ python main.py --help\n\n// Notice the &lt;TEXT INTEGER BOOLEAN&gt;\nUsage: main.py [OPTIONS]\n\nOptions:\n  --user &lt;TEXT INTEGER BOOLEAN&gt;...\n  --help                          Show this message and exit.\n\n// Now try it\n$ python main.py --user Camila 50 yes\n\nThe username Camila has 50 coins\nAnd this user is a wizard!\n\n// With other values\n$ python main.py --user Morty 3 no\n\nThe username Morty has 3 coins\n\n// Try with invalid values (not enough)\n$ python main.py --user Camila 50\n\nError: Option '--user' requires 3 arguments\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/one-file-per-command.md",
    "type": "markdown",
    "content": "# One File Per Command\n\nWhen your CLI application grows, you can split it into multiple files and modules. This pattern helps maintain a clean and organized code structure. \u2728\n\nThis tutorial will show you how to use `add_typer` to create sub commands and organize your commands in multiple files.\n\nWe will create a simple CLI with the following commands:\n\n- `version`\n- `users add NAME`\n- `users delete NAME`\n\n## CLI structure\n\nHere is the structure we'll be working with:\n\n```text\nmycli/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 users/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 add.py\n\u2502   \u2514\u2500\u2500 delete.py\n\u2514\u2500\u2500 version.py\n```\n\n`mycli` will be our <abbr title=\"a directory with an __init__.py file, it can be imported\">package</abbr>, and it will contain the following modules:\n\n- `main.py`: The main <abbr title=\"a Python file that can be imported\">module</abbr> that will import the `version` and `users` modules.\n- `version.py`: A <abbr title=\"a Python file that can be imported\">module</abbr> that will contain the `version` command.\n- `users/`: A <abbr title=\"another directory with an __init__.py file, it can also be imported\">package</abbr> (inside of our `mycli` package) that will contain the `add` and `delete` commands.\n\n## Implementation\n\nLet's start implementing our CLI! \ud83d\ude80\n\nWe'll create the `version` module, the `main` module, and the `users` package.\n\n### Version Module (`version.py`)\n\nLet's start by creating the `version` module. This module will contain the `version` command.\n\n{* docs_src/one_file_per_command/version.py *}\n\nIn this file we are creating a new Typer app instance for the `version` command.\n\nThis is not required in single-file applications, but in the case of multi-file applications it will allow us to include this command in the main application using `app.add_typer()`.\n\nLet's see that next!\n\n### Main Module (`main.py`)\n\nThe main module will be the entry point of the application. It will import the version module and the users module.\n\n/// tip\n\nWe'll see how to implement the users module in the next section.\n\n///\n\n{* docs_src/one_file_per_command/main.py hl[8,9] *}\n\nIn this module, we import the `version` and `users` modules and add them to the main app using `app.add_typer()`.\n\nFor the `users` module, we specify the name as `\"users\"` to group the commands under the `users` sub-command.\n\nNotice that we didn't add a name for the `version_app` Typer app. Because of this, Typer will add the commands (just one in this case) declared in the `version_app` directly at the top level. So, there will be a top-level `version` sub-command.\n\nBut for `users`, we add a name `\"users\"`, this way those commands will be under the sub-command `users` instead of at the top level. So, there will be a `users add` and `users delete` sub-sub-commands. \ud83d\ude05\n\n/// tip\n\nIf you want a command to group the included commands in a sub-app, add a name.\n\nIf you want to include the commands from a sub-app directly at the top level, don't add a name, or set it to `None`. \ud83e\udd13\n\n///\n\nLet's now create the `users` module with the `add` and `delete` commands.\n\n### Users Add Command (`users/add.py`)\n\n{* docs_src/one_file_per_command/users/add.py *}\n\nLike the `version` module, we create a new Typer app instance for the `users/add` command. This allows us to include the `add` command in the users app.\n\n### Users Delete Command (`users/delete.py`)\n\n{* docs_src/one_file_per_command/users/delete.py *}\n\nAnd once again, we create a new Typer app instance for the `users/delete` command. This allows us to include the `delete` command in the users app.\n\n### Users' app (`users/__init__.py`)\n\nFinally, we need to create an `__init__.py` file in the `users` directory to define the `users` app.\n\n{* docs_src/one_file_per_command/users/__init__.py *}\n\nSimilarly to the `version` module, we create a new `Typer` app instance for the `users` module. This allows us to include the `add` and `delete` commands in the users app.\n\n## Running the Application\n\nNow we are ready to run the application! \ud83d\ude0e\n\nTo run the application, you can execute it as a Python module:\n\n<div class=\"termy\">\n\n```console\n$ python -m mycli.main version\n\nMy CLI Version 1.0\n\n$ python -m mycli.main users add Camila\n\nAdding user: Camila\n```\n\n</div>\n\nAnd if you built a package and installed your app, you can then use the `mycli` command:\n\n<div class=\"termy\">\n\n```console\n$ mycli version\n\nMy CLI Version 1.0\n\n$ mycli users add Camila\n\nAdding user: Camila\n```\n\n</div>\n\n## Callbacks\n\nHave in mind that if you include a sub-app with `app.add_typer()` **without a name**, the commands will be added to the top level, so **only the top level callback** (if there's any) will be used, the one declared in the main app.\n\nIf you **want to use a callback** for a sub-app, you need to include the sub-app **with a name**, which creates a sub-command grouping the commands in that sub-app. \ud83e\udd13\n\nIn the example above, if the `users` sub-app had a callback, it would be used. But if the `version` sub-app had a callback, it would not be used, because the `version` sub-app was included without a name.\n"
  },
  {
    "file": "docs/tutorial/options-autocompletion.md",
    "type": "markdown",
    "content": "# CLI Option autocompletion\n\nAs you have seen, apps built with **Typer** have completion in your shell that works when you create a Python package or using the `typer` command.\n\nIt normally completes *CLI options*, *CLI arguments*, and subcommands (that you will learn about later).\n\nBut you can also provide auto completion for the **values** of *CLI options* and *CLI arguments*. We will learn about that here.\n\n## Review completion\n\nBefore checking how to provide custom completions, let's check again how it works.\n\nAfter installing completion for your own Python package (or using the `typer` command), when you use your CLI program and start adding a *CLI option* with `--` and then hit <kbd>TAB</kbd>, your shell will show you the available *CLI options* (the same for *CLI arguments*, etc).\n\nTo check it quickly without creating a new Python package, use the `typer` command.\n\nThen let's create a small example program:\n\n{* docs_src/options_autocompletion/tutorial001_an.py *}\n\nAnd let's try it with the `typer` command to get completion:\n\n<div class=\"termy\">\n\n```console\n// Hit the TAB key in your keyboard below where you see the: [TAB]\n$ typer ./main.py [TAB][TAB]\n\n// Depending on your terminal/shell you will get some completion like this \u2728\nrun    -- Run the provided Typer app.\nutils  -- Extra utility commands for Typer apps.\n\n// Then try with \"run\" and --\n$ typer ./main.py run --[TAB][TAB]\n\n// You will get completion for --name, depending on your terminal it will look something like this\n--name  -- The name to say hi to.\n\n// And you can run it as if it was with Python directly\n$ typer ./main.py run --name Camila\n\nHello Camila\n```\n\n</div>\n\n## Custom completion for values\n\nRight now we get completion for the *CLI option* names, but not for the values.\n\nWe can provide completion for the values creating an `autocompletion` function, similar to the `callback` functions from [CLI Option Callback and Context](./options/callback-and-context.md){.internal-link target=_blank}:\n\n{* docs_src/options_autocompletion/tutorial002_an.py hl[5:6,15] *}\n\nWe return a `list` of strings from the `complete_name()` function.\n\nAnd then we get those values when using completion:\n\n<div class=\"termy\">\n\n```console\n$ typer ./main.py run --name [TAB][TAB]\n\n// We get the values returned from the function \ud83c\udf89\nCamila     Carlos     Sebastian\n```\n\n</div>\n\nWe got the basics working. Now let's improve it.\n\n## Check the incomplete value\n\nRight now, we always return those values, even if users start typing `Sebast` and then hit <kbd>TAB</kbd>, they will also get the completion for `Camila` and `Carlos` (depending on the shell), while we should only get completion for `Sebastian`.\n\nBut we can fix that so that it always works correctly.\n\nModify the `complete_name()` function to receive a parameter of type `str`, it will contain the incomplete value.\n\nThen we can check and return only the values that start with the incomplete value from the command line:\n\n{* docs_src/options_autocompletion/tutorial003_an.py hl[7:12] *}\n\nNow let's try it:\n\n<div class=\"termy\">\n\n```console\n$ typer ./main.py run --name Ca[TAB][TAB]\n\n// We get the values returned from the function that start with Ca \ud83c\udf89\nCamila     Carlos\n```\n\n</div>\n\nNow we are only returning the valid values, that start with `Ca`, we are no longer returning `Sebastian` as a completion option.\n\n/// tip\n\nYou have to declare the incomplete value of type `str` and that's what you will receive in the function.\n\nNo matter if the actual value will be an `int`, or something else, when doing completion, you will only get a `str` as the incomplete value.\n\nAnd the same way, you can only return `str`, not `int`, etc.\n\n///\n\n## Add help to completions\n\nRight now we are returning a `list` of `str`.\n\nBut some shells (Zsh, Fish, PowerShell) are capable of showing extra help text for completion.\n\nWe can provide that extra help text so that those shells can show it.\n\nIn the `complete_name()` function, instead of providing one `str` per completion element, we provide a `tuple` with 2 items. The first item is the actual completion string, and the second item is the help text.\n\nSo, in the end, we return a `list` of `tuples` of `str`:\n\n{* docs_src/options_autocompletion/tutorial004_an.py hl[4:8,11:17] *}\n\n/// tip\n\nIf you want to have help text for each item, make sure each item in the list is a `tuple`. Not a `list`.\n\nClick checks specifically for a `tuple` when extracting the help text.\n\nSo in the end, the return will be a `list` (or other iterable) of `tuples` of 2 `str`.\n\n///\n\n/// info\n\nThe help text will be visible in Zsh, Fish, and PowerShell.\n\nBash doesn't support showing the help text, but completion will still work the same.\n\n///\n\nIf you have a shell like Zsh, it would look like:\n\n<div class=\"termy\">\n\n```console\n$ typer ./main.py run --name [TAB][TAB]\n\n// We get the completion items with their help text \ud83c\udf89\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\nSebastian  -- The type hints guy.\n```\n\n</div>\n\n## Simplify with `yield`\n\nInstead of creating and returning a list with values (`str` or `tuple`), we can use `yield` with each value that we want in the completion.\n\nThat way our function will be a <a href=\"https://docs.python.org/3.8/glossary.html#index-19\" class=\"external-link\" target=\"_blank\">generator</a> that **Typer** (actually Click) can iterate:\n\n{* docs_src/options_autocompletion/tutorial005_an.py hl[11:14] *}\n\nThat simplifies our code a bit and works the same.\n\n/// tip\n\nIf the `yield` part seems complex for you, don't worry, you can just use the version with the `list` above.\n\nIn the end, that's just to save us a couple of lines of code.\n\n///\n\n/// info\n\nThe function can use `yield`, so it doesn't have to return strictly a `list`, it just has to be <a href=\"https://docs.python.org/3.8/glossary.html#term-iterable\" class=\"external-link\" target=\"_blank\">iterable</a>.\n\nBut each of the elements for completion has to be a `str` or a `tuple` (when containing a help text).\n\n///\n\n## Access other *CLI parameters* with the Context\n\nLet's say that now we want to modify the program to be able to \"say hi\" to multiple people at the same time.\n\nSo, we will allow multiple `--name` *CLI options*.\n\n/// tip\n\nYou will learn more about *CLI parameters* with multiple values later in the tutorial.\n\nSo, for now, take this as a sneak peek \ud83d\ude09.\n\n///\n\nFor this we use a `List` of `str`:\n\n{* docs_src/options_autocompletion/tutorial006_an.py hl[9:14] *}\n\nAnd then we can use it like:\n\n<div class=\"termy\">\n\n```console\n$ typer ./main.py run --name Camila --name Sebastian\n\nHello Camila\nHello Sebastian\n```\n\n</div>\n\n### Getting completion for multiple values\n\nAnd the same way as before, we want to provide **completion** for those names. But we don't want to provide the **same names** for completion if they were already given in previous parameters.\n\nFor that, we will access and use the \"Context\". When you create a **Typer** application it uses Click underneath. And every Click application has a special object called a <a href=\"https://click.palletsprojects.com/en/7.x/commands/#nested-handling-and-contexts\" class=\"external-link\" target=\"_blank\">\"Context\"</a> that is normally hidden.\n\nBut you can access the context by declaring a function parameter of type `typer.Context`.\n\nAnd from that context you can get the current values for each parameter.\n\n{* docs_src/options_autocompletion/tutorial007_an.py hl[13:14,16] *}\n\nWe are getting the `names` already provided with `--name` in the command line before this completion was triggered.\n\nIf there's no `--name` in the command line, it will be `None`, so we use `or []` to make sure we have a `list` (even if empty) to check its contents later.\n\nThen, when we have a completion candidate, we check if each `name` was already provided with `--name` by checking if it's in that list of `names` with `name not in names`.\n\nAnd then we `yield` each item that has not been used yet.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ typer ./main.py run --name [TAB][TAB]\n\n// The first time we trigger completion, we get all the names\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\nSebastian  -- The type hints guy.\n\n// Add a name and trigger completion again\n$ typer ./main.py run --name Sebastian --name Ca[TAB][TAB]\n\n// Now we get completion only for the names we haven't used \ud83c\udf89\nCamila  -- The reader of books.\nCarlos  -- The writer of scripts.\n\n// And if we add another of the available names:\n$ typer ./main.py run --name Sebastian --name Camila --name [TAB][TAB]\n\n// We get completion for the only available one\nCarlos  -- The writer of scripts.\n```\n\n</div>\n\n/// tip\n\nIt's quite possible that if there's only one option left, your shell will complete it right away instead of showing the option with the help text, to save you more typing.\n\n///\n\n## Getting the raw *CLI parameters*\n\nYou can also get the raw *CLI parameters*, just a `list` of `str` with everything passed in the command line before the incomplete value.\n\nFor example, something like `[\"typer\", \"main.py\", \"run\", \"--name\"]`.\n\n/// tip\n\nThis would be for advanced scenarios, in most use cases you would be better off using the context.\n\nBut it's still possible if you need it.\n\n///\n\nAs a simple example, let's show it on the screen before completion.\n\nBecause completion is based on the output printed by your program (handled internally by **Typer**), during completion we can't just print something else as we normally do.\n\n### Printing to \"standard error\"\n\n/// tip\n\nIf you need a refresher about what is \"standard output\" and \"standard error\" check the section in [Printing and Colors: \"Standard Output\" and \"Standard Error\"](./printing.md#standard-output-and-standard-error){.internal-link target=_blank}.\n\n///\n\nThe completion system only reads from \"standard output\", so, printing to \"standard error\" won't break completion. \ud83d\ude80\n\nYou can print to \"standard error\" with a **Rich** `Console(stderr=True)`.\n\nUsing `stderr=True` tells **Rich** that the output should be shown in \"standard error\".\n\n{* docs_src/options_autocompletion/tutorial008_an.py hl[13,16:17] *}\n\n/// info\n\nIf you can't install and use Rich, you can also use `print(lastname, file=sys.stderr)` or `typer.echo(\"some text\", err=True)` instead.\n\n///\n\nWe get all the *CLI parameters* as a raw `list` of `str` by declaring a parameter with type `List[str]`, here it's named `args`.\n\n/// tip\n\nHere we name the list of all the raw *CLI parameters* `args` because that's the convention with Click.\n\nBut it doesn't contain only *CLI arguments*, it has everything, including *CLI options* and values, as a raw `list` of `str`.\n\n///\n\nAnd then we just print it to \"standard error\".\n\n<div class=\"termy\">\n\n```console\n$ typer ./main.py run --name [TAB][TAB]\n\n// First we see the raw CLI parameters\n['./main.py', 'run', '--name']\n\n// And then we see the actual completion\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\nSebastian  -- The type hints guy.\n```\n\n</div>\n\n/// tip\n\nThis is a very simple (and quite useless) example, just so you know how it works and that you can use it.\n\nBut it's probably useful only in very advanced use cases.\n\n///\n\n## Getting the Context and the raw *CLI parameters*\n\nOf course, you can declare everything if you need it, the context, the raw *CLI parameters*, and the incomplete `str`:\n\n{* docs_src/options_autocompletion/tutorial009_an.py hl[16] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ typer ./main.py run --name [TAB][TAB]\n\n// First we see the raw CLI parameters\n['./main.py', 'run', '--name']\n\n// And then we see the actual completion\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\nSebastian  -- The type hints guy.\n\n$ typer ./main.py run --name Sebastian --name Ca[TAB][TAB]\n\n// Again, we see the raw CLI parameters\n['./main.py', 'run', '--name', 'Sebastian', '--name']\n\n// And then we see the rest of the valid completion items\nCamila     -- The reader of books.\nCarlos     -- The writer of scripts.\n```\n\n</div>\n\n## Types, types everywhere\n\n**Typer** uses the type declarations to detect what it has to provide to your `autocompletion` function.\n\nYou can declare function parameters of these types:\n\n* `str`: for the incomplete value.\n* `typer.Context`: for the current context.\n* `List[str]`: for the raw *CLI parameters*.\n\nIt doesn't matter how you name them, in which order, or which ones of the 3 options you declare. It will all \"**just work**\" \u2728\n\n## Comparison to Click functionality\n\nNote that Click 7 had a similar [`autocompletion` function](https://click.palletsprojects.com/en/7.x/bashcomplete/), but it worked slightly differently.\n\nIt required the callback function to take exactly the 3 arguments `ctx`, `args` and `incomplete` in that exact order, instead of matching them dynamically based on types, as Typer does.\n\nSince Click 8, this functionality has been replaced by [`shell_complete`](https://click.palletsprojects.com/en/8.1.x/api/#click.ParamType.shell_complete), which still depends on the exact order of arguments for the callback function.\n\nHowever, Typer continues to use the `autocompletion` functionality as described on this page.\n"
  },
  {
    "file": "docs/tutorial/options/callback-and-context.md",
    "type": "markdown",
    "content": "# CLI Option Callback and Context\n\nIn some occasions you might want to have some custom logic for a specific *CLI parameter* (for a *CLI option*  or *CLI argument*) that is executed with the value received from the terminal.\n\nIn those cases you can use a *CLI parameter* callback function.\n\n## Validate *CLI parameters*\n\nFor example, you could do some validation before the rest of the code is executed.\n\n{* docs_src/options/callback/tutorial001_an.py hl[7:10,13] *}\n\nHere you pass a function to `typer.Option()` or `typer.Argument()` with the keyword argument `callback`.\n\nThe function receives the value from the command line. It can do anything with it, and then return the value.\n\nIn this case, if the `--name` is not `Camila` we raise a `typer.BadParameter()` exception.\n\nThe `BadParameter` exception is special, it shows the error with the parameter that generated it.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --name Camila\n\nHello Camila\n\n$ python main.py --name Rick\n\nUsage: main.py [OPTIONS]\n\n// We get the error from the callback\nError: Invalid value for '--name': Only Camila is allowed\n```\n\n</div>\n\n## Handling completion\n\nThere's something to be aware of with callbacks and completion that requires some small special handling.\n\nBut first let's just use completion in your shell (Bash, Zsh, Fish, or PowerShell).\n\nAfter installing completion (for your own Python package), when you use your CLI program and start adding a *CLI option* with `--` and then hit <kbd>TAB</kbd>, your shell will show you the available *CLI options* (the same for *CLI arguments*, etc).\n\nTo check it quickly with the previous script use the `typer` command:\n\n<div class=\"termy\">\n\n```console\n// Hit the TAB key in your keyboard below where you see the: [TAB]\n$ typer ./main.py [TAB][TAB]\n\n// Depending on your terminal/shell you will get some completion like this \u2728\nrun    -- Run the provided Typer app.\nutils  -- Extra utility commands for Typer apps.\n\n// Then try with \"run\" and --help\n$ typer ./main.py run --help\n\n// You get a help text with your CLI options as you normally would\nUsage: typer run [OPTIONS]\n\n  Run the provided Typer app.\n\nOptions:\n  --name TEXT  [required]\n  --help       Show this message and exit.\n\n// Then try completion with your program\n$ typer ./main.py run --[TAB][TAB]\n\n// You get completion for CLI options\n--help  -- Show this message and exit.\n--name\n\n// And you can run it as if it was with Python directly\n$ typer ./main.py run --name Camila\n\nHello Camila\n```\n\n</div>\n\n### How shell completion works\n\nThe way it works internally is that the shell/terminal will call your CLI program with some special environment variables (that hold the current *CLI parameters*, etc) and your CLI program will print some special values that the shell will use to present completion. All this is handled for you by **Typer** behind the scenes.\n\nBut the main **important point** is that it is all based on values printed by your program that the shell reads.\n\n### Breaking completion in a callback\n\nLet's say that when the callback is running, we want to show a message saying that it's validating the name:\n\n{* docs_src/options/callback/tutorial002_an.py hl[8] *}\n\nAnd because the callback will be called when the shell calls your program asking for completion, that message `\"Validating name\"` will be printed and it will break completion.\n\nIt will look something like:\n\n<div class=\"termy\">\n\n```console\n// Run it normally\n$ typer ./main.py run --name Camila\n\n// See the extra message \"Validating name\"\nValidating name\nHello Camila\n\n$ typer ./main.py run --[TAB][TAB]\n\n// Some weird broken error message \u26d4\ufe0f\n(eval):1: command not found: Validating\nrutyper ./main.pyed Typer app.\n```\n\n</div>\n\n### Fix completion - using the `Context`\n\nWhen you create a **Typer** application it uses Click underneath.\n\nAnd every Click application has a special object called a <a href=\"https://click.palletsprojects.com/en/7.x/commands/#nested-handling-and-contexts\" class=\"external-link\" target=\"_blank\">\"Context\"</a> that is normally hidden.\n\nBut you can access the context by declaring a function parameter of type `typer.Context`.\n\nThe \"context\" has some additional data about the current execution of your program:\n\n{* docs_src/options/callback/tutorial003_an.py hl[7:9] *}\n\nThe `ctx.resilient_parsing` will be `True` when handling completion, so you can just return without printing anything else.\n\nBut it will be `False` when calling the program normally. So you can continue the execution of your previous code.\n\nThat's all is needed to fix completion. \ud83d\ude80\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ typer ./main.py run --[TAB][TAB]\n\n// Now it works correctly \ud83c\udf89\n--help  -- Show this message and exit.\n--name\n\n// And you can call it normally\n$ typer ./main.py run --name Camila\n\nValidating name\nHello Camila\n```\n\n</div>\n\n## Using the `CallbackParam` object\n\nThe same way you can access the `typer.Context` by declaring a function parameter with its value, you can declare another function parameter with type `typer.CallbackParam` to get the specific Click `Parameter` object.\n\n{* docs_src/options/callback/tutorial004_an.py hl[7,10] *}\n\nIt's probably not very common, but you could do it if you need it.\n\nFor example if you had a callback that could be used by several *CLI parameters*, that way the callback could know which parameter is each time.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --name Camila\n\nValidating param: name\nHello Camila\n```\n\n</div>\n\n## Technical Details\n\nBecause you get the relevant data in the callback function based on standard Python type annotations, you get type checks and autocompletion in your editor for free.\n\nAnd **Typer** will make sure you get the function parameters you want.\n\nYou don't have to worry about their names, their order, etc.\n\nAs it's based on standard Python types, it \"**just works**\". \u2728\n\n### Click's `Parameter`\n\nThe `typer.CallbackParam` is actually just a sub-class of Click's <a href=\"https://click.palletsprojects.com/en/7.x/api/#click.Parameter\" class=\"external-link\" target=\"_blank\">`Parameter`</a>, so you get all the right completion in your editor.\n\n### Callback with type annotations\n\nYou can get the `typer.Context` and the `typer.CallbackParam` simply by declaring a function parameter of each type.\n\nThe order doesn't matter, the name of the function parameters doesn't matter.\n\nYou could also get only the `typer.CallbackParam` and not the `typer.Context`, or vice versa, it will still work.\n\n### `value` function parameter\n\nThe `value` function parameter in the callback can also have any name (e.g. `lastname`) and any type, but it should have the same type annotation as in the main function, because that's what it will receive.\n\nIt's also possible to not declare its type. It will still work.\n\nAnd it's possible to not declare the `value` parameter at all, and, for example, only get the `typer.Context`. That will also work.\n"
  },
  {
    "file": "docs/tutorial/options/help.md",
    "type": "markdown",
    "content": "# CLI Options with Help\n\nYou already saw how to add a help text for *CLI arguments* with the `help` parameter.\n\nLet's now do the same for *CLI options*:\n\n{* docs_src/options/help/tutorial001_an.py hl[7:8] *}\n\nThe same way as with `typer.Argument()`, we can put `typer.Option()` inside of `Annotated`.\n\nWe can then pass the `help` keyword parameter:\n\n```Python\nlastname: Annotated[str, typer.Option(help=\"this option does this and that\")] = \"\"\n```\n\n...to create the help for that *CLI option*.\n\nThe same way as with `typer.Argument()`, **Typer** also supports the old style using the function parameter default value:\n\n```Python\nlastname: str = typer.Option(default=\"\", help=\"this option does this and that\")\n```\n\nCopy that example from above to a file `main.py`.\n\nTest it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\n  Say hi to NAME, optionally with a --lastname.\n\n  If --formal is used, say hi very formally.\n\nArguments:\n  NAME  [required]\n\nOptions:\n  --lastname TEXT         Last name of person to greet. [default: ]\n  --formal / --no-formal  Say hi formally.  [default: False]\n  --help                  Show this message and exit.\n\n// Now you have a help text for the --lastname and --formal CLI options \ud83c\udf89\n```\n\n</div>\n\n## *CLI Options* help panels\n\nThe same as with *CLI arguments*, you can put the help for some *CLI options* in different panels to be shown with the `--help` option.\n\nIf you have installed Rich as described in the docs for [Printing and Colors](../printing.md){.internal-link target=_blank}, you can set the `rich_help_panel` parameter to the name of the panel you want for each *CLI option*:\n\n{* docs_src/options/help/tutorial002_an.py hl[11,17] *}\n\nNow, when you check the `--help` option, you will see a default panel named \"`Options`\" for the *CLI options* that don't have a custom `rich_help_panel`.\n\nAnd below you will see other panels for the *CLI options* that have a custom panel set in the `rich_help_panel` parameter:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n<b> </b><font color=\"#F4BF75\"><b>Usage: </b></font><b>main.py [OPTIONS] NAME                                </b>\n<b>                                                                     </b>\n Say hi to NAME, optionally with a <font color=\"#A1EFE4\"><b>--lastname</b></font>.\n If <font color=\"#6B9F98\"><b>--formal</b></font><font color=\"#A5A5A1\"> is used, say hi very formally.                          </font>\n\n<font color=\"#A5A5A1\">\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#F92672\">*</font>    name      <font color=\"#F4BF75\"><b>TEXT</b></font>  [default: None] <font color=\"#A6194C\">[required]</font>                   \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--lastname</b></font>                  <font color=\"#F4BF75\"><b>TEXT</b></font>  Last name of person to greet.   \u2502\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--help</b></font>                      <font color=\"#F4BF75\"><b>    </b></font>  Show this message and exit.     \u2502\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n<font color=\"#A5A5A1\">\u256d\u2500 Customization and Utils \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--formal</b></font>    <font color=\"#AE81FF\"><b>--no-formal</b></font>      Say hi formally.                     \u2502\n<font color=\"#A5A5A1\">\u2502                              [default: no-formal]                 \u2502</font>\n<font color=\"#A5A5A1\">\u2502 </font><font color=\"#A1EFE4\"><b>--debug</b></font>     <font color=\"#AE81FF\"><b>--no-debug</b></font>       Enable debugging.                    \u2502\n<font color=\"#A5A5A1\">\u2502                              [default: no-debug]                  \u2502</font>\n<font color=\"#A5A5A1\">\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f</font>\n```\n\n</div>\n\nHere we have a custom *CLI options* panel named \"`Customization and Utils`\".\n\n## Help with style using Rich\n\nIn a future section you will see how to use custom markup in the `help` for *CLI options* when reading about [Commands - Command Help](../commands/help.md#rich-markdown-and-markup){.internal-link target=_blank}.\n\nIf you are in a hurry you can jump there, but otherwise, it would be better to continue reading here and following the tutorial in order.\n\n\n## Hide default from help\n\nYou can tell Typer to not show the default value in the help text with `show_default=False`:\n\n{* docs_src/options/help/tutorial003_an.py hl[5] *}\n\nAnd it will no longer show the default value in the help text:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nHello Wade Wilson\n\n// Show the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS]\n\nOptions:\n  --fullname TEXT\n  --help                Show this message and exit.\n\n// Notice there's no [default: Wade Wilson] \ud83d\udd25\n```\n\n</div>\n\n/// note | Technical Details\n\nIn Click applications the default values are hidden by default. \ud83d\ude48\n\nIn **Typer** these default values are shown by default. \ud83d\udc40\n\n///\n\n## Custom default string\n\nYou can use the same `show_default` to pass a custom string (instead of a `bool`) to customize the default value to be shown in the help text:\n\n{* docs_src/options/help/tutorial004_an.py hl[7] *}\n\nAnd it will be used in the help text:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nHello Wade Wilson\n\n// Show the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS]\n\nOptions:\n  --fullname TEXT       [default: (Deadpoolio the amazing's name)]\n  --help                Show this message and exit.\n\n// Notice how it shows \"(Deadpoolio the amazing's name)\" instead of the actual default of \"Wade Wilson\"\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/options/index.md",
    "type": "markdown",
    "content": "# CLI Options\n\nIn the next short sections we will see how to modify *CLI options* using `typer.Option()`.\n\n`typer.Option()` works very similarly to `typer.Argument()`, but has some extra features that we'll see next.\n"
  },
  {
    "file": "docs/tutorial/options/name.md",
    "type": "markdown",
    "content": "# CLI Option Name\n\nBy default **Typer** will create a *CLI option* name from the function parameter.\n\nSo, if you have a function with:\n\n```Python\ndef main(user_name: Optional[str] = None):\n    pass\n```\n\nor\n\n```Python\ndef main(user_name: Annotated[Optional[str], typer.Option()] = None):\n    pass\n```\n\n**Typer** will create a *CLI option*:\n\n```\n--user-name\n```\n\nBut you can customize it if you want to.\n\nLet's say the function parameter name is `user_name` as above, but you want the *CLI option* to be just `--name`.\n\nYou can pass the *CLI option* name that you want to have in the following positional argument passed to `typer.Option()`:\n\n{* docs_src/options/name/tutorial001_an.py hl[5] *}\n\n/// info\n\n\"<a href=\"https://docs.python.org/3.8/glossary.html#term-argument\" class=\"external-link\" target=\"_blank\">Positional</a>\" means that it's not a function argument with a keyword name.\n\nFor example `show_default=True` is a keyword argument. \"`show_default`\" is the keyword.\n\nBut in `\"--name\"` there's no `option_name=\"--name\"` or something similar, it's just the string value `\"--name\"` that goes in `typer.Option()`.\n\nThat's a \"positional argument\" in a function.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice the --name instead of --user-name\nUsage: main.py [OPTIONS]\n\nOptions:\n  --name TEXT           [required]\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py --name Camila\n\nHello Camila\n```\n\n</div>\n\n## *CLI option* short names\n\nA short name is a *CLI option* name with a single dash (`-`) instead of 2 (`--`) and a single letter, like `-n` instead of `--name`.\n\nFor example, the `ls` program has a *CLI option* named `--size`, and the same *CLI option* also has a short name `-s`:\n\n<div class=\"termy\">\n\n```console\n// With the long name --size\n$ ls ./myproject --size\n\n12 first-steps.md   4 intro.md\n\n// With the short name -s\n$ ls ./myproject -s\n\n12 first-steps.md   4 intro.md\n\n// Both CLI option names do the same\n```\n\n</div>\n\n### *CLI option* short names together\n\nShort names have another feature, when they have a single letter, as in `-s`, you can put several of these *CLI options* together, with a single dash.\n\nFor example, the `ls` program has these 2 *CLI options* (among others):\n\n* `--size`: show the sizes of the listed files.\n* `--human`: show a human-readable format, like `1MB` instead of just `1024`.\n\nAnd these 2 *CLI options* have short versions too:\n\n* `--size`: short version `-s`.\n* `--human`: short version `-h`.\n\nSo, you can put them together with `-sh` or `-hs`:\n\n<div class=\"termy\">\n\n```console\n// Call ls with long CLI options\n$ ls --size --human\n\n12K first-steps.md   4.0K intro.md\n\n// Now with short versions\n$ ls -s -h\n\n12K first-steps.md   4.0K intro.md\n\n// And with short versions together\n$ ls -sh\n\n12K first-steps.md   4.0K intro.md\n\n// Order in short versions doesn't matter\n$ ls -hs\n\n12K first-steps.md   4.0K intro.md\n\n// They all work the same \ud83c\udf89\n```\n\n</div>\n\n### *CLI option* short names with values\n\nWhen you use *CLI options* with short names, you can put them together if they are just boolean flags, like `--size` or `--human`.\n\nBut if you have a *CLI option* `--file` with a short name `-f` that takes a value, if you put it with other short names for *CLI options*, you have to put it as the last letter, so that it can receive the value that comes right after.\n\nFor example, let's say you are decompressing/extracting a file `myproject.tar.gz` with the program `tar`.\n\nYou can pass these *CLI option* short names to `tar`:\n\n* `-x`: means \"e`X`tract\", to decompress and extract the contents.\n* `-v`: means \"`V`erbose\", to print on the screen what it is doing, so you can know that it's decompressing each file and can entertain yourself while you wait.\n* `-f`: means \"`F`ile\", this one requires a value, the compressed file to extract (in our example, this is `myproject.tar.gz`).\n    * So if you use all the short names together, this `-f` has to come last, to receive the value that comes next to it.\n\nFor example:\n\n<div class=\"termy\">\n\n```console\n$ tar -xvf myproject.tar.gz\n\nmyproject/\nmyproject/first-steps.md\nmyproject/intro.md\n\n// But if you put the -f before\n$ tar -fxv myproject.tar.gz\n\n// You get an ugly error\ntar: You must specify one of the blah, blah, error, error\n```\n\n</div>\n\n### Defining *CLI option* short names\n\nIn **Typer** you can also define *CLI option* short names the same way you can customize the long names.\n\nYou can pass *positional* arguments to `typer.Option()` to define the *CLI option* name(s).\n\n/// tip\n\nRemember the *positional* function arguments are those that don't have a keyword.\n\nAll the other function arguments/parameters you pass to `typer.Option()` like `prompt=True` and `help=\"This option blah, blah\"` require the keyword.\n\n///\n\nYou can overwrite the *CLI option* name to use as in the previous example, but you can also declare extra alternatives, including short names.\n\nFor example, extending the previous example, let's add a *CLI option* short name `-n`:\n\n{* docs_src/options/name/tutorial002_an.py hl[5] *}\n\nHere we are overwriting the *CLI option* name that by default would be `--user-name`, and we are defining it to be `--name`. And we are also declaring a *CLI option* short name of `-n`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice the two CLI option names -n and --name\nUsage: main.py [OPTIONS]\n\nOptions:\n  -n, --name TEXT       [required]\n  --help                Show this message and exit.\n\n// Try the short version\n$ python main.py -n Camila\n\nHello Camila\n```\n\n</div>\n\n### *CLI option* only short name\n\nIf you only declare a short name like `-n` then that will be the only *CLI option* name. And neither `--name` nor `--user-name` will be available.\n\n{* docs_src/options/name/tutorial003_an.py hl[5] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice there's no --name nor --user-name, only -n\nUsage: main.py [OPTIONS]\n\nOptions:\n  -n TEXT               [required]\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py -n Camila\n\nHello Camila\n```\n\n</div>\n\n### *CLI option* short name and default\n\nContinuing with the example above, as **Typer** allows you to declare a *CLI option* as having only a short name, if you want to have the default long name plus a short name, you have to declare both explicitly:\n\n{* docs_src/options/name/tutorial004_an.py hl[5] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice that we have the long version --user-name back\n// and we also have the short version -n\nUsage: main.py [OPTIONS]\n\nOptions:\n  -n, --user-name TEXT  [required]\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py --user-name Camila\n\nHello Camila\n\n// And try the short version\n$ python main.py -n Camila\n```\n\n</div>\n\n### *CLI option* short names together\n\nYou can create multiple short names and use them together.\n\nYou don't have to do anything special for it to work (apart from declaring those short versions):\n\n{* docs_src/options/name/tutorial005_an.py hl[6:7] *}\n\n/// tip\n\nNotice that, again, we are declaring the long and short version of the *CLI option* names.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// We now have short versions -n and -f\n// And also long versions --name and --formal\nUsage: main.py [OPTIONS]\n\nOptions:\n  -n, --name TEXT       [required]\n  -f, --formal\n  --help                Show this message and exit.\n\n// Try the short versions\n$ python main.py -n Camila -f\n\nGood day Ms. Camila.\n\n// And try the 2 short versions together\n// See how -n has to go last, to be able to get the value\n$ python main.py -fn Camila\n\nGood day Ms. Camila.\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/options/password.md",
    "type": "markdown",
    "content": "# Password CLI Option and Confirmation Prompt\n\nApart from having a prompt, you can make a *CLI option* have a `confirmation_prompt=True`:\n\n{* docs_src/options/password/tutorial001_an.py hl[7] *}\n\nAnd the CLI program will ask for confirmation:\n\n<div class=\"termy\">\n\n```console\n$ python main.py Camila\n\n// It prompts for the email\n# Email: $ camila@example.com\n# Repeat for confirmation: $ camila@example.com\n\nHello Camila, your email is camila@example.com\n```\n\n</div>\n\n## A Password prompt\n\nWhen receiving a password, it is very common (in most shells) to not show anything on the screen while typing the password.\n\nThe program will still receive the password, but nothing will be shown on screen, not even `****`.\n\nYou can achieve the same using `hide_input=True`.\n\nAnd if you combine it with `confirmation_prompt=True` you can easily receive a password with double confirmation:\n\n{* docs_src/options/password/tutorial002_an.py hl[8] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py Camila\n\n// It prompts for the password, but doesn't show anything when you type\n# Password: $\n# Repeat for confirmation: $\n\n// Let's imagine the password typed was \"typerrocks\"\nHello Camila. Doing something very secure with password.\n...just kidding, here it is, very insecure: typerrocks\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/options/prompt.md",
    "type": "markdown",
    "content": "# CLI Option Prompt\n\nIt's also possible to, instead of just showing an error, ask for the missing value with `prompt=True`:\n\n{* docs_src/options/prompt/tutorial001_an.py hl[5] *}\n\nAnd then your program will ask the user for it in the terminal:\n\n<div class=\"termy\">\n\n```console\n// Call it with the NAME CLI argument\n$ python main.py Camila\n\n// It asks for the missing CLI option --lastname\n# Lastname: $ Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n```\n\n</div>\n\n## Customize the prompt\n\nYou can also set a custom prompt, passing the string that you want to use instead of just `True`:\n\n{* docs_src/options/prompt/tutorial002_an.py hl[7] *}\n\nAnd then your program will ask for it using with your custom prompt:\n\n<div class=\"termy\">\n\n```console\n// Call it with the NAME CLI argument\n$ python main.py Camila\n\n// It uses the custom prompt\n# Please tell me your last name: $ Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n```\n\n</div>\n\n## Confirmation prompt\n\nIn some cases you could want to prompt for something and then ask the user to confirm it by typing it twice.\n\nYou can do it passing the parameter `confirmation_prompt=True`.\n\nLet's say it's a CLI app to delete a project:\n\n{* docs_src/options/prompt/tutorial003_an.py hl[6] *}\n\nAnd it will prompt the user for a value and then for the confirmation:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n// Your app will first prompt for the project name, and then for the confirmation\n# Project name: $ Old Project\n# Repeat for confirmation: $ Old Project\n\nDeleting project Old Project\n\n// If the user doesn't type the same, receives an error and a new prompt\n$ python main.py\n\n# Project name: $ Old Project\n# Repeat for confirmation: $ New Spice\n\nError: The two entered values do not match\n\n# Project name: $ Old Project\n# Repeat for confirmation: $ Old Project\n\nDeleting project Old Project\n\n// Now it works \ud83c\udf89\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/options/required.md",
    "type": "markdown",
    "content": "# Required CLI Options\n\nWe said before that *by default*:\n\n* *CLI options* are **optional**\n* *CLI arguments* are **required**\n\nWell, that's how they work *by default*, and that's the convention in many CLI programs and systems.\n\nBut if you really want, you can change that.\n\nTo make a *CLI option* required, you can put `typer.Option()` inside of `Annotated` and leave the parameter without a default value.\n\nLet's make `--lastname` a required *CLI option*:\n\n{* docs_src/options/required/tutorial001_an.py hl[5] *}\n\nThe same way as with `typer.Argument()`, the old style of using the function parameter default value is also supported, in that case you would just not pass anything to the `default` parameter.\n\n{* docs_src/options/required/tutorial001.py hl[4] *}\n\nOr you can explicitly pass `...` to `typer.Option(default=...)`:\n\n{* docs_src/options/required/tutorial002.py hl[4] *}\n\n/// info\n\nIf you hadn't seen that `...` before: it is a special single value, it is <a href=\"https://docs.python.org/3/library/constants.html#Ellipsis\" class=\"external-link\" target=\"_blank\">part of Python and is called \"Ellipsis\"</a>.\n\n///\n\nThat will tell **Typer** that it's still a *CLI option*, but it doesn't have a default value, and it's required.\n\n/// tip\n\nAgain, prefer to use the `Annotated` version if possible. That way your code will mean the same in standard Python and in **Typer**.\n\n///\n\nAnd test it:\n\n<div class=\"termy\">\n\n```console\n// Pass the NAME CLI argument\n$ python main.py Camila\n\n// We didn't pass the now required --lastname CLI option\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Missing option '--lastname'.\n\n// Now update it to pass the required --lastname CLI option\n$ python main.py Camila --lastname Guti\u00e9rrez\n\nHello Camila Guti\u00e9rrez\n\n// And if you check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] NAME\n\nOptions:\n  --lastname TEXT       [required]\n  --help                Show this message and exit.\n\n// It now tells you that --lastname is required \ud83c\udf89\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/options/version.md",
    "type": "markdown",
    "content": "# Version CLI Option, `is_eager`\n\nYou could use a callback to implement a `--version` *CLI option*.\n\nIt would show the version of your CLI program and then it would terminate it. Even before any other *CLI parameter* is processed.\n\n## First version of `--version`\n\nLet's see a first version of how it could look like:\n\n{* docs_src/options/version/tutorial001_an.py hl[9:12,17:19] *}\n\n/// tip\n\nNotice that we don't have to get the `typer.Context` and check for `ctx.resilient_parsing` for completion to work, because we only print and modify the program when `--version` is passed, otherwise, nothing is printed or changed from the callback.\n\n///\n\nIf the `--version` *CLI option* is passed, we get a value `True` in the callback.\n\nThen we can print the version and raise `typer.Exit()` to make sure the program is terminated before anything else is executed.\n\nWe also declare the explicit *CLI option* name `--version`, because we don't want an automatic `--no-version`, it would look awkward.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// We get a --version, and don't get an awkward --no-version \ud83c\udf89\nUsage: main.py [OPTIONS]\n\nOptions:\n  --version\n  --name TEXT\n  --help                Show this message and exit.\n\n\n// We can call it normally\n$ python main.py --name Camila\n\nHello Camila\n\n// And we can get the version\n$ python main.py --version\n\nAwesome CLI Version: 0.1.0\n\n// Because we exit in the callback, we don't get a \"Hello World\" message after the version \ud83d\ude80\n```\n\n</div>\n\n## Previous parameters and `is_eager`\n\nBut now let's say that the `--name` *CLI option* that we declared before `--version` is required, and it has a callback that could exit the program:\n\n{* docs_src/options/version/tutorial002_an.py hl[15:17,22:24] *}\n\nThen our CLI program could not work as expected in some cases as it is *right now*, because if we use `--version` after `--name` then the callback for `--name` will be processed before and we can get its error:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --name Rick --version\n\nOnly Camila is allowed\nAborted!\n```\n\n</div>\n\n/// tip\n\nWe don't have to check for `ctx.resilient_parsing` in the `name_callback()` for completion to work, because we are not using `typer.echo()`, instead we are raising a `typer.BadParameter`.\n\n///\n\n/// note | Technical Details\n\n`typer.BadParameter` prints the error to \"standard error\", not to \"standard output\", and because the completion system only reads from \"standard output\", it won't break completion.\n\n///\n\n/// info\n\nIf you need a refresher about what is \"standard output\" and \"standard error\" check the section in [Printing and Colors: \"Standard Output\" and \"Standard Error\"](../printing.md#standard-output-and-standard-error){.internal-link target=_blank}.\n\n///\n\n### Fix with `is_eager`\n\nFor those cases, we can mark a *CLI parameter* (a *CLI option* or *CLI argument*) with `is_eager=True`.\n\nThat will tell **Typer** (actually Click) that it should process this *CLI parameter* before the others:\n\n{* docs_src/options/version/tutorial003_an.py hl[23:26] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --name Rick --version\n\n// Now we only get the version, and the name is not used\nAwesome CLI Version: 0.1.0\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/package.md",
    "type": "markdown",
    "content": "# Building a Package\n\nWhen you create a CLI program with **Typer** you probably want to create your own Python package.\n\nThat's what allows your users to install it and have it as an independent program that they can use in their terminal.\n\nAnd that's also required for shell auto completion to work (unless you use your program through `typer` command).\n\nNowadays, there are several ways and tools to create Python packages (what you install with `pip install something`).\n\nYou might even have your favorite already.\n\nHere's a very opinionated, short guide, showing one of the alternative ways of creating a Python package with a **Typer** app, from scratch.\n\n/// tip\n\nIf you already have a favorite way of creating Python packages, feel free to skip this.\n\n///\n\n## Prerequisites\n\nFor this guide we'll use <a href=\"https://python-poetry.org/\" class=\"external-link\" target=\"_blank\">Poetry</a>.\n\nPoetry's docs are great, so go ahead, check them and install it.\n\n## Create a project\n\nLet's say we want to create a CLI application called `portal-gun`.\n\nTo make sure your package doesn't collide with the package created by someone else, we'll name it with a prefix of your name.\n\nSo, if your name is Rick, we'll call it `rick-portal-gun`.\n\nCreate a project with Poetry:\n\n<div class=\"termy\">\n\n```console\n$ poetry new rick-portal-gun\n\nCreated package rick_portal_gun in rick-portal-gun\n\n// Enter the new project directory\ncd ./rick-portal-gun\n```\n\n</div>\n\n## Dependencies and environment\n\nAdd `typer` to your dependencies:\n\n<div class=\"termy\">\n\n```console\n$ poetry add typer\n\n// It creates a virtual environment for your project\nCreating virtualenv rick-portal-gun-w31dJa0b-py3.10 in /home/rick/.cache/pypoetry/virtualenvs\nUsing version ^0.12.0 for typer\n\nUpdating dependencies\nResolving dependencies... (1.2s)\n\n---> 100%\n\nPackage operations: 8 installs, 0 updates, 0 removals\n\n  - Installing mdurl (0.1.2)\n  - Installing markdown-it-py (3.0.0)\n  - Installing pygments (2.17.2)\n  - Installing click (8.1.7)\n  - Installing rich (13.7.1)\n  - Installing shellingham (1.5.4)\n  - Installing typing-extensions (4.11.0)\n  - Installing typer (0.12.3)\n\nWriting lock file\n\n// Activate that new virtual environment\n$ poetry shell\n\nSpawning shell within /home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.10\n\n// Open an editor using this new environment, for example VS Code\n$ code ./\n```\n\n</div>\n\nYou can see that you have a generated project structure that looks like:\n\n```\n.\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 rick_portal_gun\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n```\n\n## Create your app\n\nNow let's create an extremely simple **Typer** app.\n\nCreate a file `rick_portal_gun/main.py` with:\n\n```Python\nimport typer\n\n\napp = typer.Typer()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Awesome Portal Gun\n    \"\"\"\n\n\n@app.command()\ndef shoot():\n    \"\"\"\n    Shoot the portal gun\n    \"\"\"\n    typer.echo(\"Shooting portal gun\")\n\n\n@app.command()\ndef load():\n    \"\"\"\n    Load the portal gun\n    \"\"\"\n    typer.echo(\"Loading portal gun\")\n```\n\n/// tip\n\nAs we are creating an installable Python package, there's no need to add a section with `if __name__ == \"__main__\":`.\n\n///\n\n## Modify the README\n\nLet's change the README to have something like:\n\n```Markdown\n# Portal Gun\n\nThe awesome Portal Gun\n```\n\n## Add a \"script\"\n\nWe are creating a Python package that can be installed with `pip install`.\n\nBut we want it to provide a CLI program that can be executed in the shell.\n\nTo do that, we add a configuration to the `pyproject.toml` in the section `[tool.poetry.scripts]`:\n\n```TOML hl_lines=\"8 9\"\n[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez <rick@example.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ntyper = \"^0.12.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\nHere's what that line means:\n\n`rick-portal-gun`: will be the name of the CLI program. That's how we will call it in the terminal once it is installed. Like:\n\n<div class=\"termy\">\n\n```console\n$ rick-portal-gun\n\n// Something happens here \u2728\n```\n\n</div>\n\n`rick_portal_gun.main`, in the part `\"rick_portal_gun.main:app\"`, with underscores, refers to the Python module to import. That's what someone would use in a section like:\n\n```Python\nfrom rick_portal_gun.main import # something goes here\n```\n\nThe `app` in `\"rick_portal_gun.main:app\"` is the thing to import from the module, and to call as a function, like:\n\n```Python\nfrom rick_portal_gun.main import app\napp()\n```\n\nThat config section tells Poetry that when this package is installed we want it to create a command line program called `rick-portal-gun`.\n\nAnd that the object to call (like a function) is the one in the variable `app` inside of the module `rick_portal_gun.main`.\n\n## Install your package\n\nThat's what we need to create a package.\n\nYou can now install it:\n\n<div class=\"termy\">\n\n```console\n$ poetry install\n\nInstalling dependencies from lock file\n\nNo dependencies to install or update\n\n  - Installing the current project: rick-portal-gun (0.1.0)\n```\n\n</div>\n\n## Try your CLI program\n\nYour package is installed in the environment created by Poetry, but you can already use it.\n\n<div class=\"termy\">\n\n```console\n// You can use the which program to check which rick-portal-gun program is available (if any)\n$ which rick-portal-gun\n\n// You get the one from your environment\n/home/rick/.cache/pypoetry/virtualenvs/rick-portal-gun-w31dJa0b-py3.10/bin/rick-portal-gun\n\n// Try it\n$ rick-portal-gun --help\n\n// You get all the standard help\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n```\n\n</div>\n\n## Create a wheel package\n\nPython packages have a standard format called a \"wheel\". It's a file that ends in `.whl`.\n\nYou can create a wheel with Poetry:\n\n<div class=\"termy\">\n\n```console\n$ poetry build\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n```\n\n</div>\n\nAfter that, if you check in your project directory, you should now have a couple of extra files at `./dist/`:\n\n``` hl_lines=\"3 4\"\n.\n\u251c\u2500\u2500 dist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rick_portal_gun-0.1.0-py3-none-any.whl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rick-portal-gun-0.1.0.tar.gz\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ...\n```\n\nThe `.whl` is the wheel file. You can send that wheel file to anyone and they can use it to install your program (we'll see how to upload it to PyPI in a bit).\n\n## Test your wheel package\n\nNow you can open another terminal and install that package from the file for your own user with:\n\n<div class=\"termy\">\n\n```console\n$ pip install --user /home/rick/rick-portal-gun/dist/rick_portal_gun-0.1.0-py3-none-any.whl\n\n---> 100%\n```\n\n</div>\n\n/// warning\n\nThe `--user` is important, that ensures you install it in your user's directory and not in the global system.\n\nIf you installed it in the global system (e.g. with `sudo`) you could install a version of a library (e.g. a sub-dependency) that is incompatible with your system.\n\n///\n\n/// tip\n\nBonus points if you use <a href=\"https://github.com/pipxproject/pipx\" class=\"external-link\" target=\"_blank\">`pipx`</a> to install it while keeping an isolated environment for your Python CLI programs \ud83d\ude80\n\n///\n\nNow you have your CLI program installed. And you can use it freely:\n\n<div class=\"termy\">\n\n```console\n$ rick-portal-gun shoot\n\n// It works \ud83c\udf89\nShooting portal gun\n```\n\n</div>\n\nHaving it installed globally (and not in a single environment), you can now install completion globally for it:\n\n<div class=\"termy\">\n\n```console\n$ rick-portal-gun --install-completion\n\nzsh completion installed in /home/rick/.zshrc.\nCompletion will take effect once you restart the terminal.\n```\n\n</div>\n\n/// tip\n\nIf you want to remove completion you can just delete the added line in that file.\n\n///\n\nAnd after you restart the terminal you will get completion for your new CLI program:\n\n<div class=\"termy\">\n\n```console\n$ rick-portal-gun [TAB][TAB]\n\n// You get completion for your CLI program \u2728\nload   -- Load the portal gun\nshoot  -- Shoot the portal gun\n```\n\n</div>\n\n## Support `python -m` (optional)\n\nYou may have seen that you can call many Python modules as scripts with `python -m some-module`.\n\nFor example, one way to call `pip` is:\n\n<div class=\"termy\">\n\n```console\n$ pip install fastapi\n```\n\n</div>\n\nBut you can also call Python with the `-m` *CLI Option* and pass a module for it to execute as if it was a script, like:\n\n<div class=\"termy\">\n\n```console\n$ python -m pip install fastapi\n```\n\n</div>\n\nHere we pass `pip` as the value for `-m`, so, Python will execute the module `pip` as if it was a script. And then it will pass the rest of the *CLI Parameters* (`install fastapi`) to it.\n\nThese two are more or less equivalent, the `install fastapi` will be passed to `pip`.\n\n/// tip\n\nIn the case of `pip`, in many occasions it's actually recommended that you run it with `python -m`, because if you create a virtual environment with its own `python`, that will ensure that you use the `pip` from *that* environment.\n\n///\n\n### Add a `__main__.py`\n\nYou can support that same style of calling the package/module for your own package, simply by adding a file `__main__.py`.\n\nPython will look for that file and execute it.\n\nThe file would live right beside `__init__.py`:\n\n``` hl_lines=\"7\"\n.\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 rick_portal_gun\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __main__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n```\n\nNo other file has to import it, you don't have to reference it in your `pyproject.toml` or anything else, it just works by default, as it is standard Python behavior.\n\nThen in that file you can execute your **Typer** program:\n\n```Python\nfrom .main import app\napp()\n```\n\nNow, after installing your package, if you call it with `python -m` it will work (for the main part):\n\n<div class=\"termy\">\n\n```console\n$ python -m rick_portal_gun --help\n\nUsage: __main__.py [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n```\n\n</div>\n\n/// tip\n\nNotice that you have to pass the importable version of the package name, so `rick_portal_gun` instead of `rick-portal-gun`.\n\n///\n\nThat works! \ud83d\ude80 Sort of... \ud83e\udd14\n\nSee the `__main__.py` in the help instead of `rick-portal-gun`? We'll fix that next.\n\n### Set a program name in `__main__.py`\n\nWe are setting the program name in the file `pyproject.toml` in the line like:\n\n```TOML\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n```\n\nBut when Python runs our package as a script with `python -m`, it doesn't have the information of the program name.\n\nSo, to fix the help text to use the correct program name when called with `python -m`, we can pass it to the app in `__main__.py`:\n\n```Python\nfrom .main import app\napp(prog_name=\"rick-portal-gun\")\n```\n\n/// tip\n\nYou can pass all the arguments and keyword arguments you could pass to a Click application, including `prog_name`.\n\n///\n\n<div class=\"termy\">\n\n```console\n$ python -m rick_portal_gun --help\n\nUsage: rick-portal-gun [OPTIONS] COMMAND [ARGS]...\n\n  Awesome Portal Gun\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n\n  --help                Show this message and exit.\n\nCommands:\n  load   Load the portal gun\n  shoot  Shoot the portal gun\n```\n\n</div>\n\nGreat! That works correctly! \ud83c\udf89 \u2705\n\nNotice that now it uses `rick-portal-gun` instead of `__main__.py` in the help.\n\n### Autocompletion and `python -m`\n\nHave in mind that TAB completion (shell auto-completion) won't work when using `python -m`.\n\nAuto-completion depends on the name of the program called, it's tied to each specific program name.\n\nSo, to have shell completion for `rick-portal-gun` you would have to call it directly:\n\n<div class=\"termy\">\n\n```console\n$ rick-portal-gun [TAB][TAB]\n```\n\n</div>\n\nBut you can still support `python -m` for the cases where it's useful.\n\n## Publish to PyPI (optional)\n\nYou can publish that new package to <a href=\"https://pypi.org/\" class=\"external-link\" target=\"_blank\">PyPI</a> to make it public, so others can install it easily.\n\nSo, go ahead and create an account there (it's free).\n\n### PyPI API token\n\nTo do it, you first need to configure a PyPI auth token.\n\nLogin to <a href=\"https://pypi.org/\" class=\"external-link\" target=\"_blank\">PyPI</a>.\n\nAnd then go to <a href=\"https://pypi.org/manage/account/token/\" class=\"external-link\" target=\"_blank\">https://pypi.org/manage/account/token/</a> to create a new token.\n\nLet's say your new API token is:\n\n```\npypi-wubalubadubdub-deadbeef1234\n```\n\nNow configure Poetry to use this token with the command `poetry config pypi-token.pypi`:\n\n<div class=\"termy\">\n\n```console\n$ poetry config pypi-token.pypi pypi-wubalubadubdub-deadbeef1234\n// It won't show any output, but it's already configured\n```\n\n</div>\n\n### Publish to PyPI\n\nNow you can publish your package with Poetry.\n\nYou could build the package (as we did above) and then publish later, or you could tell poetry to build it before publishing in one go:\n\n<div class=\"termy\">\n\n```console\n$ poetry publish --build\n\n# There are 2 files ready for publishing. Build anyway? (yes/no) [no] $ yes\n\n---> 100%\n\nBuilding rick-portal-gun (0.1.0)\n - Building sdist\n - Built rick-portal-gun-0.1.0.tar.gz\n - Building wheel\n - Built rick_portal_gun-0.1.0-py3-none-any.whl\n\nPublishing rick-portal-gun (0.1.0) to PyPI\n - Uploading rick-portal-gun-0.1.0.tar.gz 100%\n - Uploading rick_portal_gun-0.1.0-py3-none-any.whl 100%\n```\n\n</div>\n\nNow you can go to PyPI and check your projects at <a href=\"https://pypi.org/manage/projects/\" class=\"external-link\" target=\"_blank\">https://pypi.org/manage/projects/</a>.\n\nYou should now see your new \"rick-portal-gun\" package.\n\n### Install from PyPI\n\nNow to see that we can install it form PyPI, open another terminal, and uninstall the currently installed package.\n\n<div class=\"termy\">\n\n```console\n$ pip uninstall rick-portal-gun\n\nFound existing installation: rick-portal-gun 0.1.0\nUninstalling rick-portal-gun-0.1.0:\n  Would remove:\n    /home/rick/.local/bin/rick-portal-gun\n    /home/rick/.local/lib/python3.10/site-packages/rick_portal_gun-0.1.0.dist-info/*\n    /home/rick/.local/lib/python3.10/site-packages/rick_portal_gun/*\n# Proceed (Y/n)? $ Y\n    Successfully uninstalled rick-portal-gun-0.1.0\n```\n\n</div>\n\nAnd now install it again, but this time using just the name, so that `pip` pulls it from PyPI:\n\n<div class=\"termy\">\n\n```console\n$ pip install --user rick-portal-gun\n\n// Notice that it says \"Downloading\" \ud83d\ude80\nCollecting rick-portal-gun\n  Downloading rick_portal_gun-0.1.0-py3-none-any.whl.metadata (435 bytes)\nRequirement already satisfied: typer<0.13.0,>=0.12.3 in ./.local/lib/python3.10/site-packages (from rick-portal-gun==0.1.0) (0.12.3)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in ./.local/lib/python3.10/site-packages (from typer<0.13.0,>=0.12.3->rick-portal-gun==0.1.0) (4.11.0)\nRequirement already satisfied: click>=8.0.0 in ./.local/lib/python3.10/site-packages (from typer<0.13.0,>=0.12.3->rick-portal-gun==0.1.0) (8.1.7)\nRequirement already satisfied: shellingham>=1.3.0 in ./.local/lib/python3.10/site-packages (from typer<0.13.0,>=0.12.3->rick-portal-gun==0.1.0) (1.5.4)\nRequirement already satisfied: rich>=10.11.0 in ./.local/lib/python3.10/site-packages (from typer<0.13.0,>=0.12.3->rick-portal-gun==0.1.0) (13.7.1)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in ./.local/lib/python3.10/site-packages (from rich>=10.11.0->typer<0.13.0,>=0.12.3->rick-portal-gun==0.1.0) (2.17.2)\nRequirement already satisfied: markdown-it-py>=2.2.0 in ./.local/lib/python3.10/site-packages (from rich>=10.11.0->typer<0.13.0,>=0.12.3->rick-portal-gun==0.1.0) (3.0.0)\nRequirement already satisfied: mdurl~=0.1 in ./.local/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<0.13.0,>=0.12.3->rick-portal-gun==0.1.0) (0.1.2)\nDownloading rick_portal_gun-0.1.0-py3-none-any.whl (1.8 kB)\nInstalling collected packages: rick-portal-gun\nSuccessfully installed rick-portal-gun-0.1.0\n```\n\n</div>\n\nAnd now test the newly installed package from PyPI:\n\n<div class=\"termy\">\n\n```console\n$ rick-portal-gun load\n\n// It works! \ud83c\udf89\nLoading portal gun\n```\n\n</div>\n\n## Generate docs\n\nYou can use the `typer` command to generate docs for your package that you can put in your `README.md`:\n\n<div class=\"termy\">\n\n```console\n$ typer rick_portal_gun.main utils docs --output README.md --name rick-portal-gun\n\nDocs saved to: README.md\n```\n\n</div>\n\nYou just have to pass it the module to import (`rick_portal_gun.main`) and it will detect the `typer.Typer` app automatically.\n\nBy specifying the `--name` of the program it will be able to use it while generating the docs.\n\n/// tip\n\nIf you installed `typer-slim` and don't have the `typer` command, you can use `python -m typer` instead.\n\n///\n\n### Publish a new version with the docs\n\nNow you can publish a new version with the updated docs.\n\nFor that you need to first increase the version in `pyproject.toml`:\n\n```TOML hl_lines=\"3\"\n[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.2.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez <rick@example.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ntyper = \"^0.12.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\nAnd in the file `rick_portal_gun/__init__.py`:\n\n```Python\n__version__ = '0.2.0'\n```\n\nAnd then build and publish again:\n\n<div class=\"termy\">\n\n```console\n$ poetry publish --build\n\n---> 100%\n\nBuilding rick-portal-gun (0.2.0)\n - Building sdist\n - Built rick-portal-gun-0.2.0.tar.gz\n - Building wheel\n - Built rick_portal_gun-0.2.0-py3-none-any.whl\n\nPublishing rick-portal-gun (0.2.0) to PyPI\n - Uploading rick-portal-gun-0.2.0.tar.gz 100%\n - Uploading rick_portal_gun-0.2.0-py3-none-any.whl 100%\n```\n\n</div>\n\nAnd now you can go to PyPI, to the project page, and reload it, and it will now have your new generated docs.\n\n## What's next\n\nThis is a very simple guide. You could add many more steps.\n\nFor example, you should use <a href=\"https://git-scm.com/\" class=\"external-link\" target=\"_blank\">Git</a>, the version control system, to save your code.\n\nYou can add a lot of extra metadata to your `pyproject.toml`, check the docs for <a href=\"https://python-poetry.org/docs/libraries/\" class=\"external-link\" target=\"_blank\">Poetry: Libraries</a>.\n\nYou could use <a href=\"https://github.com/pipxproject/pipx\" class=\"external-link\" target=\"_blank\">`pipx`</a> to manage your installed CLI Python programs in isolated environments.\n\nMaybe use automatic formatting with <a href=\"https://github.com/psf/black\" class=\"external-link\" target=\"_blank\">Black</a>.\n\nYou'll probably want to publish your code as open source to <a href=\"https://github.com/\" class=\"external-link\" target=\"_blank\">GitHub</a>.\n\nAnd then you could integrate a <abbr title=\"Continuous Integration\">CI</abbr> tool to run your tests and deploy your package automatically.\n\nAnd there's a long etc. But now you have the basics and you can continue on your own \ud83d\ude80.\n"
  },
  {
    "file": "docs/tutorial/parameter-types/bool.md",
    "type": "markdown",
    "content": "# Boolean CLI Options\n\nWe have seen some examples of *CLI options* with `bool`, and how **Typer** creates `--something` and `--no-something` automatically.\n\nBut we can customize those names.\n\n## Only `--force`\n\nLet's say that we want a `--force` *CLI option* only, we want to discard `--no-force`.\n\nWe can do that by specifying the exact name we want:\n\n{* docs_src/parameter_types/bool/tutorial001_an.py hl[5] *}\n\nNow there's only a `--force` *CLI option*:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice there's only --force, we no longer have --no-force\nUsage: main.py [OPTIONS]\n\nOptions:\n  --force               [default: False]\n  --help                Show this message and exit.\n\n// Try it:\n$ python main.py\n\nNot forcing\n\n// Now add --force\n$ python main.py --force\n\nForcing operation\n\n// And --no-force no longer exists \u26d4\ufe0f\n$ python main.py --no-force\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: No such option: --no-force\n```\n\n</div>\n\n## Alternative names\n\nNow let's imagine we have a *CLI option* `--accept`.\n\nAnd we want to allow setting `--accept` or the contrary, but `--no-accept` looks ugly.\n\nWe might want to instead have `--accept` and `--reject`.\n\nWe can do that by passing a single `str` with the 2 names for the `bool` *CLI option* separated by `/`:\n\n{* docs_src/parameter_types/bool/tutorial002_an.py hl[7] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice the --accept / --reject\nUsage: main.py [OPTIONS]\n\nOptions:\n  --accept / --reject\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py\n\nI don't know what you want yet\n\n// Now pass --accept\n$ python main.py --accept\n\nAccepting!\n\n// And --reject\n$ python main.py --reject\n\nRejecting!\n```\n\n</div>\n\n## Short names\n\nThe same way, you can declare short versions of the names for these *CLI options*.\n\nFor example, let's say we want `-f` for `--force` and `-F` for `--no-force`:\n\n{* docs_src/parameter_types/bool/tutorial003_an.py hl[5] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice the -f, --force / -F, --no-force\nUsage: main.py [OPTIONS]\n\nOptions:\n  -f, --force / -F, --no-force  [default: False]\n  --help                        Show this message and exit.\n\n// Try with the short name -f\n$ python main.py -f\n\nForcing operation\n\n// Try with the short name -F\n$ python main.py -F\n\nNot forcing\n```\n\n</div>\n\n## Only names for `False`\n\nIf you want to (although it might not be a good idea), you can declare only *CLI option* names to set the `False` value.\n\nTo do that, use a space and a single `/` and pass the negative name after:\n\n{* docs_src/parameter_types/bool/tutorial004_an.py hl[5] *}\n\n/// tip\n\nHave in mind that it's a string with a preceding space and then a `/`.\n\nSo, it's `\" /-S\"` not `\"/-S\"`.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice the / -d, --demo\nUsage: main.py [OPTIONS]\n\nOptions:\n   / -d, --demo         [default: True]\n  --help                Show this message and exit.\n\n// Try it\n$ python main.py\n\nRunning in production\n\n// Now pass --demo\n$ python main.py --demo\n\nRunning demo\n\n// And the short version\n$ python main.py -d\n\nRunning demo\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/parameter-types/custom-types.md",
    "type": "markdown",
    "content": "# Custom Types\n\nYou can easily use your own custom types in your **Typer** applications.\n\nThe way to do it is by providing a way to <abbr title=\"convert from some plain format, like the input text in the CLI, into Python objects\">parse</abbr> input into your own types.\n\nThere are two ways to achieve this:\n\n* Adding a type `parser`\n* Expanding Click's custom types\n\n## Type Parser\n\n`typer.Argument` and `typer.Option` can create custom parameter types with a `parser` <abbr title=\"something that can be called like a function\">callable</abbr>.\n\n{* docs_src/parameter_types/custom_types/tutorial001_an.py hl[13:14,18:19] *}\n\nThe function (or callable) that you pass to the parameter `parser` will receive the input value as a string and should return the parsed value with your own custom type.\n\n## Click Custom Type\n\nIf you already have a <a href=\"https://click.palletsprojects.com/en/8.1.x/parameters/#implementing-custom-types\" class=\"external-link\" target=\"_blank\">Click Custom Type</a>, you can use it in `typer.Argument()` and `typer.Option()` with the `click_type` parameter.\n\n{* docs_src/parameter_types/custom_types/tutorial002_an.py hl[14:18,22:25] *}\n"
  },
  {
    "file": "docs/tutorial/parameter-types/datetime.md",
    "type": "markdown",
    "content": "# DateTime\n\nYou can specify a *CLI parameter* as a Python <a href=\"https://docs.python.org/3/library/datetime.html\" class=\"external-link\" target=\"_blank\">`datetime`</a>.\n\nYour function will receive a standard Python `datetime` object, and again, your editor will give you completion, etc.\n\n{* docs_src/parameter_types/datetime/tutorial001.py hl[1,6,7,8] *}\n\nTyper will accept any string from the following formats:\n\n* `%Y-%m-%d`\n* `%Y-%m-%dT%H:%M:%S`\n* `%Y-%m-%d %H:%M:%S`\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\nUsage: main.py [OPTIONS] BIRTH:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]\n\nArguments:\n  BIRTH:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S][required]\n\nOptions:\n  --help                Show this message and exit.\n\n// Pass a datetime\n$ python main.py 1956-01-31T10:00:00\n\nInteresting day to be born: 1956-01-31 10:00:00\nBirth hour: 10\n\n// An invalid date\n$ python main.py july-19-1989\n\nUsage: main.py [OPTIONS] [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d%H:%M:%S]\n\nError: Invalid value for 'BIRTH:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]': 'july-19-1989' does not match the formats '%Y-%m-%d', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%d %H:%M:%S'.\n```\n\n</div>\n\n## Custom date format\n\nYou can also customize the formats received for the `datetime` with the `formats` parameter.\n\n`formats` receives a list of strings with the date formats that would be passed to <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime\" class=\"external-link\" target=\"_blank\">datetime.strptime()</a>.\n\nFor example, let's imagine that you want to accept an ISO formatted datetime, but for some strange reason, you also want to accept a format with:\n\n* first the month\n* then the day\n* then the year\n* separated with \"`/`\"\n\n...It's a crazy example, but let's say you also needed that strange format:\n\n{* docs_src/parameter_types/datetime/tutorial002_an.py hl[11] *}\n\n/// tip\n\nNotice the last string in `formats`: `\"%m/%d/%Y\"`.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// ISO dates work\n$ python main.py 1969-10-29\n\nLaunch will be at: 1969-10-29 00:00:00\n\n// But the strange custom format also works\n$ python main.py 10/29/1969\n\nLaunch will be at: 1969-10-29 00:00:00\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/parameter-types/enum.md",
    "type": "markdown",
    "content": "# Enum - Choices\n\nTo define a *CLI parameter* that can take a value from a predefined set of values you can use a standard Python <a href=\"https://docs.python.org/3/library/enum.html\" class=\"external-link\" target=\"_blank\">`enum.Enum`</a>:\n\n{* docs_src/parameter_types/enum/tutorial001.py hl[1,6,7,8,9,12,13] *}\n\n/// tip\n\nNotice that the function parameter `network` will be an `Enum`, not a `str`.\n\nTo get the `str` value in your function's code use `network.value`.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice the predefined values [simple|conv|lstm]\nUsage: main.py [OPTIONS]\n\nOptions:\n  --network [simple|conv|lstm]  [default: simple]\n  --help                        Show this message and exit.\n\n// Try it\n$ python main.py --network conv\n\nTraining neural network of type: conv\n\n// Invalid value\n$ python main.py --network capsule\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--network': 'capsule' is not one of 'simple', 'conv', 'lstm'.\n\n// Note that enums are case sensitive by default\n$ python main.py --network CONV\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--network': 'CONV' is not one of 'simple', 'conv', 'lstm'.\n```\n\n</div>\n\n### Case insensitive Enum choices\n\nYou can make an `Enum` (choice) *CLI parameter* be case-insensitive with the `case_sensitive` parameter:\n\n{* docs_src/parameter_types/enum/tutorial002_an.py hl[15] *}\n\nAnd then the values of the `Enum` will be checked no matter if lower case, upper case, or a mix:\n\n<div class=\"termy\">\n\n```console\n// Notice the upper case CONV\n$ python main.py --network CONV\n\nTraining neural network of type: conv\n\n// A mix also works\n$ python main.py --network LsTm\n\nTraining neural network of type: lstm\n```\n\n</div>\n\n### List of Enum values\n\nA *CLI parameter* can also take a list of `Enum` values:\n\n{* docs_src/parameter_types/enum/tutorial003_an.py hl[14] *}\n\nThis works just like any other parameter value taking a list of things:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice the default values being shown\nUsage: main.py [OPTIONS]\n\nOptions:\n  --groceries [Eggs|Bacon|Cheese]  [default: Eggs, Cheese]\n  --help                           Show this message and exit.\n\n// Try it with the default values\n$ python main.py\n\nBuying groceries: Eggs, Cheese\n\n// Try it with a single value\n$ python main.py --groceries \"Eggs\"\n\nBuying groceries: Eggs\n\n// Try it with multiple values\n$ python main.py --groceries \"Eggs\" --groceries \"Bacon\"\n\nBuying groceries: Eggs, Bacon\n```\n\n</div>\n\n### Literal choices\n\nYou can also use `Literal` to represent a set of possible predefined choices, without having to use an `Enum`:\n\n{* docs_src/parameter_types/enum/tutorial004_an.py hl[6] *}\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice the predefined values [simple|conv|lstm]\nUsage: main.py [OPTIONS]\n\nOptions:\n  --network [simple|conv|lstm]  [default: simple]\n  --help                        Show this message and exit.\n\n// Try it\n$ python main.py --network conv\n\nTraining neural network of type: conv\n\n// Invalid value\n$ python main.py --network capsule\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--network': 'capsule' is not one of 'simple', 'conv', 'lstm'.\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/parameter-types/file.md",
    "type": "markdown",
    "content": "# File\n\nApart from `Path` *CLI parameters* you can also declare some types of \"files\".\n\n/// tip\n\nIn most of the cases you are probably fine just using `Path`.\n\nYou can read and write data with `Path` the same way.\n\n///\n\nThe difference is that these types will give you a Python <a href=\"https://docs.python.org/3/glossary.html#term-file-object\" class=\"external-link\" target=\"_blank\">file-like object</a> instead of a Python <a href=\"https://docs.python.org/3/library/pathlib.html#basic-use\" class=\"external-link\" target=\"_blank\">Path</a>.\n\nA \"file-like object\" is the same type of object returned by `open()` as in:\n\n```Python\nwith open('file.txt') as f:\n    # Here f is the file-like object\n    read_data = f.read()\n    print(read_data)\n```\n\nBut in some special use cases you might want to use these special types. For example if you are migrating an existing application.\n\n## `FileText` reading\n\n`typer.FileText` gives you a file-like object for reading text, you will get `str` data from it.\n\nThis means that even if your file has text written in a non-english language, e.g. a `text.txt` file with:\n\n```\nla cig\u00fce\u00f1a trae al ni\u00f1o\n```\n\nYou will have a `str` with the text inside, e.g.:\n\n```Python\ncontent = \"la cig\u00fce\u00f1a trae al ni\u00f1o\"\n```\n\ninstead of having `bytes`, e.g.:\n\n```Python\ncontent = b\"la cig\\xc3\\xbce\\xc3\\xb1a trae al ni\\xc3\\xb1o\"\n```\n\nYou will get all the correct editor support, attributes, methods, etc for the file-like object:`\n\n{* docs_src/parameter_types/file/tutorial001_an.py hl[5] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Create a quick text config\n$ echo \"some settings\" > config.txt\n\n// Add another line to the config to test it\n$ echo \"some more settings\" >> config.txt\n\n// Now run your program\n$ python main.py --config config.txt\n\nConfig line: some settings\n\nConfig line: some more settings\n```\n\n</div>\n\n## `FileTextWrite`\n\nFor writing text, you can use `typer.FileTextWrite`:\n\n{* docs_src/parameter_types/file/tutorial002_an.py hl[5:6] *}\n\nThis would be for writing human text, like:\n\n```\nsome settings\nla cig\u00fce\u00f1a trae al ni\u00f1o\n```\n\n...not to write binary `bytes`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --config text.txt\n\nConfig written\n\n// Check the contents of the file\n$ cat text.txt\n\nSome config written by the app\n```\n\n</div>\n\n/// info | Technical Details\n\n`typer.FileTextWrite` is a just a convenience class.\n\nIt's the same as using `typer.FileText` and setting `mode=\"w\"`. You will learn about `mode` later below.\n\n///\n\n## `FileBinaryRead`\n\nTo read binary data you can use `typer.FileBinaryRead`.\n\nYou will receive `bytes` from it.\n\nIt's useful for reading binary files like images:\n\n{* docs_src/parameter_types/file/tutorial003_an.py hl[5] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --file lena.jpg\n\nProcessed bytes total: 512\nProcessed bytes total: 1024\nProcessed bytes total: 1536\nProcessed bytes total: 2048\n```\n\n</div>\n\n## `FileBinaryWrite`\n\nTo write binary data you can use `typer.FileBinaryWrite`.\n\nYou would write `bytes` to it.\n\nIt's useful for writing binary files like images.\n\nHave in mind that you have to pass `bytes` to its `.write()` method, not `str`.\n\nIf you have a `str`, you have to encode it first to get `bytes`.\n\n{* docs_src/parameter_types/file/tutorial004_an.py hl[5] *}\n\n<div class=\"termy\">\n\n```console\n$ python main.py --file binary.dat\n\nBinary file written\n\n// Check the binary file was created\n$ ls ./binary.dat\n\n./binary.dat\n```\n\n</div>\n\n## File *CLI parameter* configurations\n\nYou can use several configuration parameters for these types (classes) in `typer.Option()` and `typer.Argument()`:\n\n* `mode`: controls the \"<a href=\"https://docs.python.org/3/library/functions.html#open\" class=\"external-link\" target=\"_blank\">mode</a>\" to open the file with.\n    * It's automatically set for you by using the classes above.\n    * Read more about it below.\n* `encoding`: to force a specific encoding, e.g. `\"utf-8\"`.\n* `lazy`: delay <abbr title=\"input and output, reading and writing files\">I/O</abbr> operations. Automatic by default.\n    * By default, when writing files, Click will generate a file-like object that is not yet the actual file. Once you start writing, it will go, open the file and start writing to it, but not before. This is mainly useful to avoid creating the file until you start writing to it. It's normally safe to leave this automatic. But you can overwrite it setting `lazy=False`. By default, it's `lazy=True` for writing and `lazy=False` for reading.\n* `atomic`: if true, all writes will actually go to a temporal file and then moved to the final destination after completing. This is useful with files modified frequently by several users/programs.\n\n## Advanced `mode`\n\nBy default, **Typer** will configure the <a href=\"https://docs.python.org/3/library/functions.html#open\" class=\"external-link\" target=\"_blank\">`mode`</a> for you:\n\n* `typer.FileText`: `mode=\"r\"`, to read text.\n* `typer.FileTextWrite`: `mode=\"w\"`, to write text.\n* `typer.FileBinaryRead`: `mode=\"rb\"`, to read binary data.\n* `typer.FileBinaryWrite`: `mode=\"wb\"`, to write binary data.\n\n### Note about `FileTextWrite`\n\n`typer.FileTextWrite` is actually just a convenience class. It's the same as using `typer.FileText` with `mode=\"w\"`.\n\nBut it's probably shorter and more intuitive as you can get it with autocompletion in your editor by just starting to type `typer.File`... just like the other classes.\n\n### Customize `mode`\n\nYou can override the `mode` from the defaults above.\n\nFor example, you could use `mode=\"a\"` to write \"appending\" to the same file:\n\n{* docs_src/parameter_types/file/tutorial005_an.py hl[5] *}\n\n/// tip\n\nAs you are manually setting `mode=\"a\"`, you can use `typer.FileText` or `typer.FileTextWrite`, both will work.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --config config.txt\n\nConfig line written\n\n// Run your program a couple more times to see how it appends instead of overwriting\n$ python main.py --config config.txt\n\nConfig line written\n\n$ python main.py --config config.txt\n\nConfig line written\n\n// Check the contents of the file, it should have each of the 3 lines appended\n$ cat config.txt\n\nThis is a single line\nThis is a single line\nThis is a single line\n```\n\n</div>\n\n## About the different types\n\n/// info\n\nThese are technical details about why the different types/classes provided by **Typer**.\n\nBut you don't need this information to be able to use them. You can skip it.\n\n///\n\n**Typer** provides you these different types (classes) because they inherit directly from the actual Python implementation that will be provided underneath for each case.\n\nThis way your editor will give you the right type checks and completion for each type.\n\nEven if you use `lazy`. When you use `lazy` Click creates a especial object to delay writes, and serves as a \"proxy\" to the actual file that will be written. But this especial proxy object doesn't expose the attributes and methods needed for type checks and completion in the editor. If you access those attributes or call the methods, the \"proxy\" lazy object will call them in the final object and it will all work. But you wouldn't get autocompletion for them.\n\nBut because these **Typer** classes inherit from the actual implementation that will be provided underneath (not the lazy object), you will get all the autocompletion and type checks in the editor.\n"
  },
  {
    "file": "docs/tutorial/parameter-types/index.md",
    "type": "markdown",
    "content": "# CLI Parameter Types\n\nYou can use several data types for the *CLI options* and *CLI arguments*, and you can add data validation requirements too.\n\n## Data conversion\n\nWhen you declare a *CLI parameter* with some type **Typer** will convert the data received in the command line to that data type.\n\nFor example:\n\n{* docs_src/parameter_types/index/tutorial001.py hl[4] *}\n\nIn this example, the value received for the *CLI argument* `NAME` will be treated as `str`.\n\nThe value for the *CLI option* `--age` will be converted to an `int` and `--height-meters` will be converted to a `float`.\n\nAnd as `female` is a `bool` *CLI option*, **Typer** will convert it to a \"flag\" `--female` and the counterpart `--no-female`.\n\nAnd here's how it looks like:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice how --age is an INTEGER and --height-meters is a FLOAT\nUsage: main.py [OPTIONS] NAME\n\nArguments:\n  NAME  [required]\n\nOptions:\n  --age INTEGER           [default: 20]\n  --height-meters FLOAT   [default: 1.89]\n  --female / --no-female  [default: True]\n  --help                  Show this message and exit.\n\n// Call it with CLI parameters\n$ python main.py Camila --age 15 --height-meters 1.70 --female\n\n// All the data has the correct Python type\nNAME is Camila, of type: class 'str'\n--age is 15, of type: class 'int'\n--height-meters is 1.7, of type: class 'float'\n--female is True, of type: class 'bool'\n\n// And if you pass an incorrect type\n$ python main.py Camila --age 15.3\n\nUsage: main.py [OPTIONS] NAME\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--age': '15.3' is not a valid integer\n\n// Because 15.3 is not an INTEGER (it's a float)\n```\n\n</div>\n\n## Watch next\n\nSee more about specific types and validations in the next sections...\n\n\n/// info | Technical Details\n\nAll the types you will see in the next sections are handled underneath by <a href=\"https://click.palletsprojects.com/en/7.x/parameters/#parameter-types\" class=\"external-link\" target=\"_blank\">Click's Parameter Types</a>.\n\n///\n"
  },
  {
    "file": "docs/tutorial/parameter-types/number.md",
    "type": "markdown",
    "content": "# Number\n\nYou can define numeric validations with `max` and `min` values for `int` and `float` *CLI parameters*:\n\n{* docs_src/parameter_types/number/tutorial001_an.py hl[6:8] *}\n\n*CLI arguments* and *CLI options* can both use these validations.\n\nYou can specify `min`, `max` or both.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice the extra RANGE in the help text for --age and --score\nUsage: main.py [OPTIONS] ID\n\nArguments:\n  ID  [required]\n\nOptions:\n  --age INTEGER RANGE   [default: 20]\n  --score FLOAT RANGE   [default: 0]\n  --help                Show this message and exit.\n\n// Pass all the CLI parameters\n$ python main.py 5 --age 20 --score 90\n\nID is 5\n--age is 20\n--score is 90.0\n\n// Pass an invalid ID\n$ python main.py 1002\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for 'ID': 1002 is not in the range 0<=x<=1000.\n\n// Pass an invalid age\n$ python main.py 5 --age 15\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--age': 15 is not in the range x>=18.\n\n// Pass an invalid score\n$ python main.py 5 --age 20 --score 100.5\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--score': 100.5 is not in the range x<=100.\n\n// But as we didn't specify a minimum score, this is accepted\n$ python main.py 5 --age 20 --score -5\n\nID is 5\n--age is 20\n--score is -5.0\n```\n\n</div>\n\n## Clamping numbers\n\nYou might want to, instead of showing an error, use the closest minimum or maximum valid values.\n\nYou can do it with the `clamp` parameter:\n\n{* docs_src/parameter_types/number/tutorial002_an.py hl[6:8] *}\n\nAnd then, when you pass data that is out of the valid range, it will be \"clamped\", the closest valid value will be used:\n\n<div class=\"termy\">\n\n```console\n// ID doesn't have clamp, so it shows an error\n$ python main.py 1002\n\nUsage: main.py [OPTIONS] ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for 'ID': 1002 is not in the range 0<=x<=1000.\n\n// But --rank and --score use clamp\n$ python main.py 5 --rank 11 --score -5\n\nID is 5\n--rank is 10\n--score is 0\n```\n\n</div>\n\n## Counter *CLI options*\n\nYou can make a *CLI option* work as a counter with the `count` parameter:\n\n{* docs_src/parameter_types/number/tutorial003_an.py hl[5] *}\n\nIt means that the *CLI option* will be like a boolean flag, e.g. `--verbose`.\n\nAnd the value you receive in the function will be the amount of times that `--verbose` was added:\n\n<div class=\"termy\">\n\n```console\n// Check it\n$ python main.py\n\nVerbose level is 0\n\n// Now use one --verbose\n$ python main.py --verbose\n\nVerbose level is 1\n\n// Now 3 --verbose\n$ python main.py --verbose --verbose --verbose\n\nVerbose level is 3\n\n// And with the short name\n$ python main.py -v\n\nVerbose level is 1\n\n// And with the short name 3 times\n$ python main.py -v -v -v\n\nVerbose level is 3\n\n// As short names can be put together, this also works\n$ python main.py -vvv\n\nVerbose level is 3\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/parameter-types/path.md",
    "type": "markdown",
    "content": "# Path\n\nYou can declare a *CLI parameter* to be a standard Python <a href=\"https://docs.python.org/3/library/pathlib.html#basic-use\" class=\"external-link\" target=\"_blank\">`pathlib.Path`</a>.\n\nThis is what you would do for directory paths, file paths, etc:\n\n{* docs_src/parameter_types/path/tutorial001_an.py hl[1,8] *}\n\nAnd again, as you receive a standard Python `Path` object the same as the type annotation, your editor will give you autocompletion for all its attributes and methods.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// No config\n$ python main.py\n\nNo config file\nAborted!\n\n// Pass a config that doesn't exist\n$ python main.py --config config.txt\n\nThe config doesn't exist\n\n// Now create a quick config\n$ echo \"some settings\" > config.txt\n\n// And try again\n$ python main.py --config config.txt\n\nConfig file contents: some settings\n\n// And with a directory\n$ python main.py --config ./\n\nConfig is a directory, will use all its config files\n```\n\n</div>\n\n## Path validations\n\nYou can perform several validations for `Path` *CLI parameters*:\n\n* `exists`: if set to true, the file or directory needs to exist for this value to be valid. If this is not required and a file does indeed not exist, then all further checks are silently skipped.\n* `file_okay`: controls if a file is a possible value.\n* `dir_okay`: controls if a directory is a possible value.\n* `writable`: if true, a writable check is performed.\n* `readable`: if true, a readable check is performed.\n* `resolve_path`: if this is true, then the path is fully resolved before the value is passed onwards. This means that it\u2019s absolute and <abbr title=\"symbolic links, also known as shortcuts. Links in a file system that point to other location. For example, some applications when installed create symlinks in the desktop to launch them.\">symlinks</abbr> are resolved.\n\n/// note | Technical Details\n\nIt will not expand a tilde-prefix (something with `~`, like `~/Documents/`), as this is supposed to be done by the shell only.\n\n///\n\n/// tip\n\nAll these parameters come directly from <a href=\"https://click.palletsprojects.com/en/7.x/parameters/#parameter-types\" class=\"external-link\" target=\"_blank\">Click</a>.\n\n///\n\nFor example:\n\n{* docs_src/parameter_types/path/tutorial002_an.py hl[11:16] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --config config.txt\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--config': File 'config.txt' does not exist.\n\n// Now create a quick config\n$ echo \"some settings\" > config.txt\n\n// And try again\n$ python main.py --config config.txt\n\nConfig file contents: some settings\n\n// And with a directory\n$ python main.py --config ./\n\nUsage: main.py [OPTIONS]\nTry \"main.py --help\" for help.\n\nError: Invalid value for '--config': File './' is a directory.\n```\n\n</div>\n\n### Advanced `Path` configurations\n\n/// warning | Advanced Details\n\nYou probably won't need these configurations at first, you may want to skip it.\n\nThey are used for more advanced use cases.\n\n///\n\n* `allow_dash`: If this is set to True, a single dash to indicate standard streams is permitted.\n* `path_type`: optionally a string type that should be used to represent the path. The default is None which means the return value will be either bytes or unicode depending on what makes most sense given the input data Click deals with.\n"
  },
  {
    "file": "docs/tutorial/parameter-types/uuid.md",
    "type": "markdown",
    "content": "# UUID\n\n/// info\n\nA UUID is a <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" class=\"external-link\" target=\"_blank\">\"Universally Unique Identifier\"</a>.\n\nIt's a standard format for identifiers, like passport numbers, but for anything, not just people in countries.\n\nThey look like this:\n\n```\nd48edaa6-871a-4082-a196-4daab372d4a1\n```\n\nThe way they are generated makes them sufficiently long and random that you could assume that every UUID generated is unique. Even if it was generated by a different application, database, or system.\n\nSo, if your system uses UUIDs to identify your data, you could mix it with the data from some other system that also uses UUIDs with some confidence that their IDs (UUIDs) won't clash with yours.\n\nThis wouldn't be true if you just used `int`s as identifiers, as most databases do.\n\n///\n\nYou can declare a *CLI parameter* as a UUID:\n\n{* docs_src/parameter_types/uuid/tutorial001.py hl[1,6,7,8] *}\n\nYour Python code will receive a standard Python <a href=\"https://docs.python.org/3.8/library/uuid.html\" class=\"external-link\" target=\"_blank\">`UUID`</a> object with all its attributes and methods, and as you are annotating your function parameter with that type, you will have type checks, autocompletion in your editor, etc.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Pass a valid UUID v4\n$ python main.py d48edaa6-871a-4082-a196-4daab372d4a1\n\nUSER_ID is d48edaa6-871a-4082-a196-4daab372d4a1\nUUID version is: 4\n\n// An invalid value\n$ python main.py 7479706572-72756c6573\n\nUsage: main.py [OPTIONS] USER_ID\nTry \"main.py --help\" for help.\n\nError: Invalid value for 'USER_ID': 7479706572-72756c6573 is not a valid UUID.\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/printing.md",
    "type": "markdown",
    "content": "# Printing and Colors\n\nYou can use the normal `print()` to show information on the screen:\n\n{* docs_src/first_steps/tutorial001.py hl[5] *}\n\nIt will show the output normally:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nHello World\n```\n\n</div>\n\n## Use Rich\n\nYou can also display beautiful and more complex information using <a href=\"https://rich.readthedocs.io/\" class=\"external-link\" target=\"_blank\">Rich</a>. It comes by default when you install `typer`.\n\n### Use Rich `print`\n\nFor the simplest cases, you can just import `print` from `rich` and use it instead of the standard `print`:\n\n{* docs_src/printing/tutorial001.py hl[2,15] *}\n\nJust with that, **Rich** will be able to print your data with nice colors and structure:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nHere's the data\n<b>{</b>\n    <font color=\"#A6E22E\">&apos;name&apos;</font>: <font color=\"#A6E22E\">&apos;Rick&apos;</font>,\n    <font color=\"#A6E22E\">&apos;age&apos;</font>: <font color=\"#A1EFE4\"><b>42</b></font>,\n    <font color=\"#A6E22E\">&apos;items&apos;</font>: <b>[</b>\n        <b>{</b><font color=\"#A6E22E\">&apos;name&apos;</font>: <font color=\"#A6E22E\">&apos;Portal Gun&apos;</font><b>}</b>,\n        <b>{</b><font color=\"#A6E22E\">&apos;name&apos;</font>: <font color=\"#A6E22E\">&apos;Plumbus&apos;</font><b>}</b>\n    <b>]</b>,\n    <font color=\"#A6E22E\">&apos;active&apos;</font>: <font color=\"#A6E22E\"><i>True</i></font>,\n    <font color=\"#A6E22E\">&apos;affiliation&apos;</font>: <font color=\"#AE81FF\"><i>None</i></font>\n<b>}</b>\n```\n\n</div>\n\n### Rich Markup\n\nRich also supports a <a href=\"https://rich.readthedocs.io/en/stable/markup.html\" class=\"external-link\" target=\"_blank\">custom markup syntax</a> to set colors and styles, for example:\n\n{* docs_src/printing/tutorial002.py hl[6] *}\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n<font color=\"#F92672\"><b>Alert!</b></font> <font color=\"#A6E22E\">Portal gun</font> shooting! \ud83d\udca5\n```\n\n</div>\n\nIn this example you can see how to use font styles, colors, and even emojis.\n\nTo learn more check out the <a href=\"https://rich.readthedocs.io/en/stable/markup.html\" class=\"external-link\" target=\"_blank\">Rich docs</a>.\n\n### Rich Tables\n\nThe way Rich works internally is that it uses a `Console` object to display the information.\n\nWhen you call Rich's `print`, it automatically creates this object and uses it.\n\nBut for advanced use cases, you could create a `Console` yourself.\n\n{* docs_src/printing/tutorial003.py hl[2:3,5,9:12] *}\n\nIn this example, we create a `Console`, and a `Table`. And then we can add some rows to the table, and print it.\n\nIf you run it, you will see a nicely formatted table:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503<b> Name  </b>\u2503<b> Item       </b>\u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Rick  \u2502 Portal Gun \u2502\n\u2502 Morty \u2502 Plumbus    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n</div>\n\nRich has many other features, as an example, you can check the docs for:\n\n* <a href=\"https://rich.readthedocs.io/en/stable/prompt.html\" class=\"external-link\" target=\"_blank\">Prompt</a>\n* <a href=\"https://rich.readthedocs.io/en/stable/markdown.html\" class=\"external-link\" target=\"_blank\">Markdown</a>\n* <a href=\"https://rich.readthedocs.io/en/stable/panel.html\" class=\"external-link\" target=\"_blank\">Panel</a>\n* ...and more.\n\n### Typer and Rich\n\nIf you are wondering what tool should be used for what, **Typer** is useful for structuring the command line application, with options, arguments, subcommands, data validation, etc.\n\nIn general, **Typer** tends to be the entry point to your program, taking the first input from the user.\n\n**Rich** is useful for the parts that need to *display* information. Showing beautiful content on the screen.\n\nThe best results for your command line application would be achieved combining both **Typer** and **Rich**.\n\n## \"Standard Output\" and \"Standard Error\"\n\nThe way printing works underneath is that the **operating system** (Linux, Windows, macOS) treats what we print as if our CLI program was **writing text** to a \"**virtual file**\" called \"**standard output**\".\n\nWhen our code \"prints\" things it is actually \"writing\" to this \"virtual file\" of \"standard output\".\n\nThis might seem strange, but that's how the CLI program and the operating system interact with each other.\n\nAnd then the operating system **shows on the screen** whatever our CLI program \"**wrote**\" to that \"**virtual file**\" called \"**standard output**\".\n\n### Standard Error\n\nAnd there's another \"**virtual file**\" called \"**standard error**\" that is normally only used for errors.\n\nBut we can also \"print\" to \"standard error\". And both are shown on the terminal to the users.\n\n/// info\n\nIf you use PowerShell it's quite possible that what you print to \"standard error\" won't be shown in the terminal.\n\nIn PowerShell, to see \"standard error\" you would have to check the variable `$Error`.\n\nBut it will work normally in Bash, Zsh, and Fish.\n\n///\n\n### Printing to \"standard error\"\n\nYou can print to \"standard error\" creating a Rich `Console` with `stderr=True`.\n\n/// tip\n\n`stderr` is short for \"standard error\".\n\n///\n\nUsing `stderr=True` tells **Rich** that the output should be shown in \"standard error\".\n\n{* docs_src/printing/tutorial004.py hl[4,8] *}\n\nWhen you try it in the terminal, it will probably just look the same:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nHere is something written to standard error\n```\n\n</div>\n\n## \"Standard Input\"\n\nAs a final detail, when you type text in your keyboard to your terminal, the operating system also considers it another \"**virtual file**\" that you are writing text to.\n\nThis virtual file is called \"**standard input**\".\n\n### What is this for\n\nRight now this probably seems quite useless \ud83e\udd37\u200d\u2642.\n\nBut understanding that will come handy in the future, for example for autocompletion and testing.\n\n## Typer Echo\n\n/// warning\n\nIn most of the cases, for displaying advanced information, it is recommended to use <a href=\"https://rich.readthedocs.io/\" class=\"external-link\" target=\"_blank\">Rich</a>.\n\nYou can probably skip the rest of this section. \ud83c\udf89\ud83d\ude0e\n\n///\n\n**Typer** also has a small utility `typer.echo()` to print information on the screen, it comes directly from Click. But normally you shouldn't need it.\n\nFor the simplest cases, you can use the standard Python `print()`.\n\nAnd for the cases where you want to display data more beautifully, or more advanced content, you should use **Rich** instead.\n\n### Why `typer.echo`\n\n`typer.echo()` (which is actually just `click.echo()`) applies some checks to try and convert binary data to strings, and other similar things.\n\nBut in most of the cases you wouldn't need it, as in modern Python strings (`str`) already support and use Unicode, and you would rarely deal with pure `bytes` that you want to print on the screen.\n\nIf you have some `bytes` objects, you would probably want to decode them intentionally and directly before trying to print them.\n\nAnd if you want to print data with colors and other features, you are much better off with the more advanced tools in **Rich**.\n\n/// info\n\n`typer.echo()` comes directly from Click, you can read more about it in <a href=\"https://click.palletsprojects.com/en/7.x/quickstart/#echoing\" class=\"external-link\" target=\"_blank\">Click's docs</a>.\n\n///\n\n### Color\n\n/// note | Technical Details\n\nThe way color works in terminals is by using some codes (ANSI escape sequences) as part of the text.\n\nSo, a colored text is still just a `str`.\n\n///\n\n/// tip\n\nAgain, you are much better off using <a href=\"https://rich.readthedocs.io/\" class=\"external-link\" target=\"_blank\">Rich</a> for this. \ud83d\ude0e\n\n///\n\nYou can create colored strings to output to the terminal with `typer.style()`, that gives you `str`s that you can then pass to `typer.echo()`:\n\n{* docs_src/printing/tutorial005.py hl[7,9] *}\n\n/// tip\n\nThe parameters `fg` and `bg` receive strings with the color names for the \"**f**ore**g**round\" and \"**b**ack**g**round\" colors. You could simply pass `fg=\"green\"` and `bg=\"red\"`.\n\nBut **Typer** provides them all as variables like `typer.colors.GREEN` just so you can use autocompletion while selecting them.\n\n///\n\nCheck it:\n\n<div class=\"use-termynal\" data-termynal>\n<span data-ty=\"input\">python main.py</span>\n<span data-ty>everything is <span style=\"color: green; font-weight: bold;\">good</span></span>\n<span data-ty=\"input\">python main.py --no-good</span>\n<span data-ty>everything is <span style=\"color: white; background-color: red;\">bad</span></span>\n</div>\n\nYou can pass these function arguments to `typer.style()`:\n\n* `fg`: the foreground color.\n* `bg`: the background color.\n* `bold`: enable or disable bold mode.\n* `dim`: enable or disable dim mode. This is badly supported.\n* `underline`: enable or disable underline.\n* `blink`: enable or disable blinking.\n* `reverse`: enable or disable inverse rendering (foreground becomes background and the other way round).\n* `reset`: by default a reset-all code is added at the end of the string which means that styles do not carry over.  This can be disabled to compose styles.\n\n/// info\n\nYou can read more about it in <a href=\"https://click.palletsprojects.com/en/7.x/api/#click.style\" class=\"external-link\" target=\"_blank\">Click's docs about `style()`</a>\n\n///\n\n### `typer.secho()` - style and print\n\n/// tip\n\nIn case you didn't see above, you are much better off using <a href=\"https://rich.readthedocs.io/\" class=\"external-link\" target=\"_blank\">Rich</a> for this. \ud83d\ude0e\n\n///\n\nThere's a shorter form to style and print at the same time with `typer.secho()` it's like `typer.echo()` but also adds style like `typer.style()`:\n\n{* docs_src/printing/tutorial006.py hl[5] *}\n\nCheck it:\n\n<div class=\"use-termynal\" data-termynal>\n<span data-ty=\"input\">python main.py Camila</span>\n<span style=\"color: magenta;\" data-ty>Welcome here Camila</span>\n</div>\n"
  },
  {
    "file": "docs/tutorial/progressbar.md",
    "type": "markdown",
    "content": "# Progress Bar\n\nIf you are executing an operation that can take some time, you can inform it to the user. \ud83e\udd13\n\n## Progress Bar\n\nYou can use <a href=\"https://rich.readthedocs.io/en/stable/progress.html\" class=\"external-link\" target=\"_blank\">Rich's Progress Display</a> to show a progress bar, for example:\n\n{* docs_src/progressbar/tutorial001.py hl[4,9] *}\n\nYou put the thing that you want to iterate over inside of Rich's `track()`, and then iterate over that.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n---> 100%\n\nProcessed 100 things.\n```\n\n</div>\n\n...actually, it will look a lot prettier. \u2728 But I can't show you the animation here in the docs. \ud83d\ude05\n\nThe colors and information will look something like this:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nProcessing... <font color=\"#F92672\">\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578</font><font color=\"#3A3A3A\">\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501</font> <font color=\"#AE81FF\"> 74%</font> <font color=\"#A1EFE4\">0:00:01</font>\n```\n\n</div>\n\n## Spinner\n\nWhen you don't know how long the operation will take, you can use a spinner instead.\n\nRich allows you to display many things in complex and advanced ways.\n\nFor example, this will show two spinners:\n\n{* docs_src/progressbar/tutorial002.py hl[4,8:15] *}\n\nI can't show you the beautiful animation here in the docs. \ud83d\ude05\n\nBut at some point in time it will look like this (imagine it's spinning). \ud83e\udd13\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n<font color=\"#A6E22E\">\u2839</font> Processing...\n<font color=\"#A6E22E\">\u2839</font> Preparing...\n```\n\n</div>\n\nYou can learn more about it in the <a href=\"https://rich.readthedocs.io/en/stable/progress.html\" class=\"external-link\" target=\"_blank\">Rich docs for Progress Display</a>.\n\n## Typer `progressbar`\n\nIf you can, you should use **Rich** as explained above, it has more features, it's more advanced, and can display information more beautifully. \u2728\n\n/// tip\n\nIf you can use Rich, use the information above, the Rich docs, and skip the rest of this page. \ud83d\ude0e\n\n///\n\nBut if you can't use Rich, Typer (actually Click) comes with a simple utility to show progress bars.\n\n/// info\n\n`typer.progressbar()` comes directly from Click, you can read more about it in <a href=\"https://click.palletsprojects.com/en/8.1.x/utils/#showing-progress-bars\" class=\"external-link\" target=\"_blank\">Click's docs</a>.\n\n///\n\n### Use `typer.progressbar`\n\n/// tip\n\nRemember, you are much better off using <a href=\"https://rich.readthedocs.io/\" class=\"external-link\" target=\"_blank\">Rich</a> for this. \ud83d\ude0e\n\n///\n\nYou can use `typer.progressbar()` with a `with` statement, as in:\n\n```Python\nwith typer.progressbar(something) as progress:\n    pass\n```\n\nAnd you pass as function argument to `typer.progressbar()` the thing that you would normally iterate over.\n\n{* docs_src/progressbar/tutorial003.py hl[8] *}\n\nSo, if you have a list of users, this could be:\n\n```Python\nusers = [\"Camila\", \"Rick\", \"Morty\"]\n\nwith typer.progressbar(users) as progress:\n    pass\n```\n\nAnd the `with` statement using `typer.progressbar()` gives you an object that you can iterate over, just like if it was the same thing that you would iterate over normally.\n\nBut by iterating over this object **Typer** (actually Click) will know to update the progress bar:\n\n```Python\nusers = [\"Camila\", \"Rick\", \"Morty\"]\n\nwith typer.progressbar(users) as progress:\n    for user in progress:\n        typer.echo(user)\n```\n\n/// tip\n\nNotice that there are 2 levels of code blocks. One for the `with` statement and one for the `for` statement.\n\n///\n\n/// info\n\nThis is mostly useful for operations that take some time.\n\nIn the example above we are faking it with `time.sleep()`.\n\n///\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n---> 100%\n\nProcessed 100 things.\n```\n\n</div>\n\n### Setting a Progress Bar `length`\n\n/// tip\n\nRemember, you are much better off using <a href=\"https://rich.readthedocs.io/\" class=\"external-link\" target=\"_blank\">Rich</a> for this. \ud83d\ude0e\n\n///\n\nThe progress bar is generated from the length of the iterable (e.g. the list of users).\n\nBut if the length is not available (for example, with something that fetches a new user from a web API each time) you can pass an explicit `length` to `typer.progressbar()`.\n\n{* docs_src/progressbar/tutorial004.py hl[14] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n---> 100%\n\nProcessed 100 user IDs.\n```\n\n</div>\n\n#### About the function with `yield`\n\nIf you hadn't seen something like that `yield` above, that's a \"<a href=\"https://docs.python.org/3/glossary.html#term-generator\" class=\"external-link\" target=\"_blank\">generator</a>\".\n\nYou can iterate over that function with a `for` and at each iteration it will give you the value at `yield`.\n\n`yield` is like a `return` that gives values multiple times and let's you use the function in a `for` loop.\n\nFor example:\n\n```Python\ndef iterate_user_ids():\n    # Let's imagine this is a web API, not a range()\n    for i in range(100):\n        yield i\n\nfor i in iterate_user_ids():\n    print(i)\n```\n\nwould print each of the \"user IDs\" (here it's just the numbers from `0` to `99`).\n\n### Add a `label`\n\n/// tip\n\nRemember, you are much better off using <a href=\"https://rich.readthedocs.io/\" class=\"external-link\" target=\"_blank\">Rich</a> for this. \ud83d\ude0e\n\n///\n\nYou can also set a `label`:\n\n{* docs_src/progressbar/tutorial005.py hl[8] *}\n\nCheck it:\n\n<div class=\"use-termynal\">\n<span data-ty=\"input\">python main.py</span>\n<span data-ty=\"progress\" data-ty-prompt=\"Processing\"></span>\n<span data-ty>Processed 100 things.</span>\n</div>\n\n## Iterate manually\n\nIf you need to manually iterate over something and update the progress bar irregularly, you can do it by not passing an iterable but just a `length` to `typer.progressbar()`.\n\nAnd then calling the `.update()` method in the object from the `with` statement:\n\n{* docs_src/progressbar/tutorial006.py hl[8,12] *}\n\nCheck it:\n\n<div class=\"use-termynal\">\n<span data-ty=\"input\">python main.py</span>\n<span data-ty=\"progress\" data-ty-prompt=\"Batches\"></span>\n<span data-ty>Processed 1000 things in batches.</span>\n</div>\n"
  },
  {
    "file": "docs/tutorial/prompt.md",
    "type": "markdown",
    "content": "# Ask with Prompt\n\nWhen you need to ask the user for info interactively you should normally use [*CLI Option*s with Prompt](options/prompt.md){.internal-link target=_blank}, because they allow using the CLI program in a non-interactive way (for example, a Bash script could use it).\n\nBut if you absolutely need to ask for interactive information without using a *CLI option*, you can use `typer.prompt()`:\n\n{* docs_src/prompt/tutorial001.py hl[5] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n# What's your name?:$ Camila\n\nHello Camila\n```\n\n</div>\n\n## Confirm\n\nThere's also an alternative to ask for confirmation. Again, if possible, you should use a [*CLI Option* with a confirmation prompt](options/prompt.md){.internal-link target=_blank}:\n\n{* docs_src/prompt/tutorial002.py hl[5] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n# Are you sure you want to delete it? [y/N]:$ y\n\nDeleting it!\n\n// This time cancel it\n$ python main.py\n\n# Are you sure you want to delete it? [y/N]:$ n\n\nNot deleting\nAborted!\n```\n\n</div>\n\n## Confirm or abort\n\nAs it's very common to abort if the user doesn't confirm, there's an integrated parameter `abort` that does it automatically:\n\n{* docs_src/prompt/tutorial003.py hl[5] *}\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n# Are you sure you want to delete it? [y/N]:$ y\n\nDeleting it!\n\n// This time cancel it\n$ python main.py\n\n# Are you sure you want to delete it? [y/N]:$ n\n\nAborted!\n```\n\n</div>\n\n## Prompt with Rich\n\nIf you installed Rich as described in [Printing and Colors](printing.md){.internal-link target=_blank}, you can use Rich to prompt the user for input:\n\n{* docs_src/prompt/tutorial004.py hl[2,6] *}\n\nAnd when you run it, it will look like:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n# Enter your name \ud83d\ude0e:$ Morty\n\nHello Morty\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/subcommands/add-typer.md",
    "type": "markdown",
    "content": "# Add Typer\n\nWe'll start with the core idea.\n\nTo add a `typer.Typer()` app inside of another.\n\n## Manage items\n\nLet's imagine that you are creating a *CLI program* to manage items in some distant land.\n\nIt could be in an `items.py` file with this:\n\n{* docs_src/subcommands/tutorial001/items.py *}\n\nAnd you would use it like:\n\n<div class=\"termy\">\n\n```console\n$ python items.py create Wand\n\nCreating item: Wand\n```\n\n</div>\n\n## Manage users\n\nBut then you realize that you also have to manage users from your *CLI app*.\n\nIt could be a file `users.py` with something like:\n\n{* docs_src/subcommands/tutorial001/users.py *}\n\nAnd you would use it like:\n\n<div class=\"termy\">\n\n```console\n$ python users.py create Camila\n\nCreating user: Camila\n```\n\n</div>\n\n## Put them together\n\nBoth parts are similar. In fact, `items.py` and `users.py` both have commands `create` and `delete`.\n\nBut we need them to be part of the same *CLI program*.\n\nIn this case, as with `git remote`, we can put them together as subcommands in another `typer.Typer()` *CLI program*.\n\nNow create a `main.py` with:\n\n{* docs_src/subcommands/tutorial001/main.py hl[3,4,7,8] *}\n\nHere's what we do in `main.py`:\n\n* Import the other Python modules (the files `users.py` and `items.py`).\n* Create the main `typer.Typer()` application.\n* Use `app.add_typer()` to include the `app` from `items.py` and `users.py`, each of those 2 was also created with `typer.Typer()`.\n* Define a `name` with the command that will be used for each of these \"sub-Typers\" to group their own commands.\n\nAnd now your *CLI program* has 2 commands:\n\n* `users`: with all of the commands (subcommands) in the `app` from `users.py`.\n* `items` with all the commands (subcommands) in the `app` from `items.py`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  items\n  users\n```\n\n</div>\n\nNow you have a *CLI program* with commands `items` and `users`, and they in turn have their own commands (subcommands).\n\nLet's check the `items` command:\n\n<div class=\"termy\">\n\n```console\n// Check the help for items\n$ python main.py items --help\n\n// It shows its own commands (subcommands): create, delete, sell\nUsage: main.py items [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n  sell\n\n// Try it\n$ python main.py items create Wand\n\nCreating item: Wand\n\n$ python main.py items sell Vase\n\nSelling item: Vase\n```\n\n</div>\n\n/// tip\n\nNotice that we are still calling `$ python main.py` but now we are using the command `items`.\n\n///\n\nAnd now check the command `users`, with all its subcommands:\n\n<div class=\"termy\">\n\n```console\n$ python main.py users --help\n\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Try it\n$ python main.py users create Camila\n\nCreating user: Camila\n```\n\n</div>\n\n## Recap\n\nThat's the core idea.\n\nYou can just create `typer.Typer()` apps and add them inside one another.\n\nAnd you can do that with any levels of commands that you want.\n\nDo you need sub-sub-sub-subcommands? Go ahead, create all the `typer.Typer()`s you need and put them together with `app.add_typer()`.\n\nIn the next sections we'll update this with more features, but you already have the core idea.\n\nThis way, in the same spirit of Click, **Typer** applications are composable, each `typer.Typer()` can be a *CLI app* by itself, but it can also be added as a command group to another Typer app.\n"
  },
  {
    "file": "docs/tutorial/subcommands/callback-override.md",
    "type": "markdown",
    "content": "# Sub-Typer Callback Override\n\nWhen creating a **Typer** app you can define a callback function, it always executes and defines the *CLI arguments* and *CLI options* that go before a command.\n\nWhen adding a Typer app inside of another, the sub-Typer can also have its own callback.\n\nIt can handle any *CLI parameters* that go before its own commands and execute any extra code:\n\n{* docs_src/subcommands/callback_override/tutorial001.py hl[9,10,11] *}\n\nIn this case it doesn't define any *CLI parameters*, it just writes a message.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py users create Camila\n\n// Notice the first message is not created by the command function but by the callback\nRunning a users command\nCreating user: Camila\n```\n\n</div>\n\n## Add a callback on creation\n\nIt's also possible to add a callback when creating the `typer.Typer()` app that will be added to another Typer app:\n\n{* docs_src/subcommands/callback_override/tutorial002.py hl[6,7,10] *}\n\nThis achieves exactly the same as above, it's just another place to add the callback.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py users create Camila\n\nRunning a users command\nCreating user: Camila\n```\n\n</div>\n\n## Overriding the callback on creation\n\nIf a callback was added when creating the `typer.Typer()` app, it's possible to override it with a new one using `@app.callback()`.\n\nThis is the same information you saw on the section about [Commands - Typer Callback](../commands/callback.md){.internal-link target=_blank}, and it applies the same for sub-Typer apps:\n\n{* docs_src/subcommands/callback_override/tutorial003.py hl[6,7,10,14,15,16] *}\n\nHere we had defined a callback when creating the `typer.Typer()` sub-app, but then we override it with a new callback with the function `user_callback()`.\n\nAs `@app.callback()` takes precedence over `typer.Typer(callback=some_function)`, now our CLI app will use this new callback.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py users create Camila\n\n// Notice the message from the new callback\nCallback override, running users command\nCreating user: Camila\n```\n\n</div>\n\n## Overriding the callback when adding a sub-Typer\n\nLastly, you can override the callback defined anywhere else when adding a sub-Typer with `app.add_typer()` using the `callback` parameter.\n\nThis has the highest priority:\n\n{* docs_src/subcommands/callback_override/tutorial004.py hl[13,14,17] *}\n\nNotice that the precedence goes to `app.add_typer()` and is not affected by the order of execution. There's another callback defined below, but the one from `app.add_typer()` wins.\n\nNow when you use the CLI program it will use the new callback function `callback_for_add_typer()`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python users create Camila\n\n// Notice the message from the callback added in add_typer()\nI have the high land! Running users command\nCreating user: Camila\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/subcommands/index.md",
    "type": "markdown",
    "content": "# SubCommands - Command Groups\n\nYou read before how to create a program with [Commands](../commands/index.md){.internal-link target=_blank}.\n\nNow we'll see how to create a *CLI program* with commands that have their own subcommands. Also known as command groups.\n\nFor example, the *CLI program* `git` has a command `remote`.\n\nBut `git remote`, in turn, has its own subcommands, like `add`:\n\n<div class=\"termy\">\n\n```console\n// git remote alone shows the current remote repositories\n$ git remote\n\norigin\n\n// Use -v to make it verbose and show more info\n$ git remote -v\n\norigin  git@github.com:yourusername/typer.git (fetch)\norigin  git@github.com:yourusername/typer.git (push)\n\n// git remote add takes 2 CLI arguments, a name and URL\n$ git remote add upstream https://github.com/fastapi/typer.git\n\n// Doesn't output anything, but now you have another remote repository called upstream\n\n// Now check again\n$ git remote -v\n\norigin  git@github.com:yourusername/typer.git (fetch)\norigin  git@github.com:yourusername/typer.git (push)\nupstream        https://github.com/fastapi/typer.git (fetch)\nupstream        https://github.com/fastapi/typer.git (push)\n```\n\n</div>\n\nIn the next sections we'll see how to create subcommands like these.\n"
  },
  {
    "file": "docs/tutorial/subcommands/name-and-help.md",
    "type": "markdown",
    "content": "# SubCommand Name and Help\n\nWhen adding a Typer app to another we have seen how to set the `name` to use for the command.\n\nFor example to set the command to `users`:\n\n```Python\napp.add_typer(users.app, name=\"users\")\n```\n\n## Add a help text\n\nWe can also set the `help` text while adding a Typer:\n\n{* docs_src/subcommands/name_help/tutorial001.py hl[6] *}\n\nAnd then we get that help text for that command in the *CLI program*:\n\n<div class=\"termy\">\n\n```console\n// Check the main help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Manage users in the app.\n\n// Check the help for the users command\n$ python main.py users --help\n\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the app.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n</div>\n\nWe can set the `help` in several places, each one taking precedence over the other, overriding the previous value.\n\nLet's see those locations.\n\n/// tip\n\nThere are other attributes that can be set in that same way in the same places we'll see next.\n\nBut those are documented later in another section.\n\n///\n\n## Inferring help text from callback\n\n### Inferring a command's help text\n\nWhen you create a command with `@app.command()`, by default, it generates the name from the function name.\n\nAnd by default, the help text is extracted from the function's docstring.\n\nFor example:\n\n```Python\n@app.command()\ndef create(item: str):\n    \"\"\"\n    Create an item.\n    \"\"\"\n    typer.echo(f\"Creating item: {item}\")\n```\n\n...will create a command `create` with a help text of `Create an item`.\n\n### Inferring the help text from `@app.callback()`\n\nThe same way, if you define a callback in a `typer.Typer()`, the help text is extracted from the callback function's docstring.\n\nHere's an example:\n\n{* docs_src/subcommands/name_help/tutorial002.py hl[9,10,11,12,13] *}\n\nThe help text for that command will be the callback function's docstring: `Manage users in the app.`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the main help\n$ python main.py --help\n\n// Notice the help text \"Manage users in the app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Manage users in the app.\n\n// Check the help for the users command\n$ python main.py users --help\n\n// Notice the main description: \"Manage users in the app.\"\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the app.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n</div>\n\n/// note\n\nBefore Typer 0.14.0, in addition to the help text, the command name was also inferred from the callback function name, this is no longer the case.\n\n///\n\n### Help from callback parameter in `typer.Typer()`\n\nIf you pass a `callback` parameter while creating a `typer.Typer(callback=some_function)` it will be used to infer the help text.\n\nThis has the lowest priority, we'll see later what has a higher priority and can override it.\n\nCheck the code:\n\n{* docs_src/subcommands/name_help/tutorial003.py hl[6,7,8,9,12] *}\n\nThis achieves exactly the same as the previous example.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the main help\n$ python main.py --help\n\n// Notice the help text \"Manage users in the app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Manage users in the app.\n\n// Check the help for the users command\n$ python main.py users --help\n\n// Notice the main description: \"Manage users in the app.\"\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the app.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n</div>\n\n### Override a callback set in `typer.Typer()` with `@app.callback()`\n\nThe same as with normal **Typer** apps, if you pass a `callback` to `typer.Typer(callback=some_function)` and then override it with `@app.callback()`, the help text will be inferred from the new callback:\n\n{* docs_src/subcommands/name_help/tutorial004.py hl[16,17,18,19,20] *}\n\nNow the help text will be `Manage users in the app.` instead of `Old callback help.`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the main help\n$ python main.py --help\n\n// Notice the help text \"Manage users in the app.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Manage users in the app.\n\n// Check the help for the users command\n$ python main.py users --help\n\n// Notice the main description: \"Manage users in the app.\"\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Manage users in the app.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n</div>\n\n### Help from callback in `app.add_typer()`\n\nIf you override the callback in `app.add_typer()` when including a sub-app, the help will be inferred from this callback function.\n\nThis takes precedence over inferring the help from a callback set in `@sub_app.callback()` and `typer.Typer(callback=sub_app_callback)`.\n\nCheck the code:\n\n{* docs_src/subcommands/name_help/tutorial005.py hl[15,16,17,18,21] *}\n\nThe help text will be `I have the highland! Create some users.` instead of the previous ones.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the main help\n$ python main.py --help\n\n// Check the command new-users and its help text\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  new-users  I have the highland! Create some users.\n\n// Now check the help for the new-users command\n$ python main.py new-users --help\n\n// Notice the help text\nUsage: main.py new-users [OPTIONS] COMMAND [ARGS]...\n\n  I have the highland! Create some users.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n</div>\n\n### Enough inferring\n\nSo, when inferring help text, the precedence order from lowest priority to highest is:\n\n* `sub_app = typer.Typer(callback=some_function)`\n* `@sub_app.callback()`\n* `app.add_typer(sub_app, callback=new_function)`\n\nThat's for inferring the help text from functions.\n\nBut if you set the help text explicitly, that has a higher priority than these.\n\n## Set the name and help\n\nLet's now see the places where you can set the command name and help text, from lowest priority to highest.\n\n/// tip\n\nSetting the help text explicitly always has a higher precedence than inferring from a callback function.\n\n///\n\n### Name and help in `typer.Typer()`\n\nYou could have all the callbacks and overrides we defined before, but the help text was inferred from the function docstring.\n\nIf you set it explicitly, that takes precedence over inferring.\n\nYou can set it when creating a new `typer.Typer()`:\n\n{* docs_src/subcommands/name_help/tutorial006.py hl[12] *}\n\n/// info\n\nThe rest of the callbacks and overrides are there only to show you that they don't affect the name and help text when you set it explicitly.\n\n///\n\nWe set an explicit help `Explicit help.`.\n\nSo that will take precedence now.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the main help\n$ python main.py --help\n\n// Notice the command name is exp-users and the help text is \"Explicit help.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  exp-users  Explicit help.\n\n// Check the help for the exp-users command\n$ python main.py exp-users --help\n\n// Notice the main help text\nUsage: main.py exp-users [OPTIONS] COMMAND [ARGS]...\n\n  Explicit help.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n</div>\n\n### Help text in `@app.callback()`\n\nMany parameters that you use when creating a `typer.Typer()` app can be overridden in the parameters of `@app.callback()`.\n\nContinuing with the previous example, we now override the `help` in `@user_app.callback()`:\n\n{* docs_src/subcommands/name_help/tutorial007.py hl[24] *}\n\nAnd now the help text will be `Help from callback for users.`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// The help text is now \"Help from callback for users.\".\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  users  Help from callback for users.\n\n// Check the users command help\n$ python main.py users --help\n\n// Notice the main help text\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\n  Help from callback for users.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n</div>\n\n### Name and help in `app.add_typer()`\n\nAnd finally, with the highest priority, you can override all that by explicitly setting the `name` and `help` in `app.add_typer()`, just like we did on the first example above:\n\n{* docs_src/subcommands/name_help/tutorial008.py hl[21] *}\n\nAnd now, with the highest priorities of them all, the command name will now be `cake-sith-users` and the help text will be `Unlimited powder! Eh, users.`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\n// Notice the command name cake-sith-users and the new help text \"Unlimited powder! Eh, users.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  cake-sith-users  Unlimited powder! Eh, users.\n\n// And check the help for the command cake-sith-users\n$ python main.py cake-sith-users --help\n\n// Notice the main help text\nUsage: main.py cake-sith-users [OPTIONS] COMMAND [ARGS]...\n\n  Unlimited powder! Eh, users.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n</div>\n\n## Recap\n\nThe precedence to generate a command's **help**, from lowest priority to highest, is:\n\n* Implicitly inferred from `sub_app = typer.Typer(callback=some_function)`\n* Implicitly inferred from the callback function under `@sub_app.callback()`\n* Implicitly inferred from `app.add_typer(sub_app, callback=some_function)`\n* Explicitly set on `sub_app = typer.Typer(help=\"Some help.\")`\n* Explicitly set on `app.add_typer(sub_app, help=\"Some help.\")`\n\nAnd the priority to set the command's **name**, from lowest priority to highest, is:\n\n* Explicitly set on `sub_app = typer.Typer(name=\"some-name\")`\n* Explicitly set on `app.add_typer(sub_app, name=\"some-name\")`\n\nSo, `app.add_typer(sub_app, name=\"some-name\", help=\"Some help.\")` always wins.\n"
  },
  {
    "file": "docs/tutorial/subcommands/nested-subcommands.md",
    "type": "markdown",
    "content": "# Nested SubCommands\n\nWe'll now see how these same ideas can be extended for deeply nested commands.\n\nLet's imagine that the same *CLI program* from the previous examples now needs to handle `lands`.\n\nBut a land could be a `reign` or `town`.\n\nAnd each of those could have their own commands, like `create` and `delete`.\n\n## A CLI app for reigns\n\nLet's start with a file `reigns.py`:\n\n{* docs_src/subcommands/tutorial003/reigns.py *}\n\nThis is already a simple *CLI program* to manage reigns:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python reigns.py --help\n\nUsage: reigns.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  conquer\n  destroy\n\n// Try it\n$ python reigns.py conquer Cintra\n\nConquering reign: Cintra\n\n$ python reigns.py destroy Mordor\n\nDestroying reign: Mordor\n```\n\n</div>\n\n## A CLI app for towns\n\nAnd now the equivalent for managing towns in `towns.py`:\n\n{* docs_src/subcommands/tutorial003/towns.py *}\n\nWith it, you can manage towns:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python towns.py --help\n\nUsage: towns.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  burn\n  found\n\n// Try it\n$ python towns.py found \"New Asgard\"\n\nFounding town: New Asgard\n\n$ python towns.py burn Vizima\n\nBurning town: Vizima\n```\n\n</div>\n\n## Manage the land in a CLI app\n\nNow let's put the `reigns` and `towns` together in the same *CLI program* in `lands.py`:\n\n{* docs_src/subcommands/tutorial003/lands.py *}\n\nAnd now we have a single *CLI program* with a command (or command group) `reigns` that has its own commands. And another command `towns` with its own subcommands.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python lands.py --help\n\nUsage: lands.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  reigns\n  towns\n\n// We still have the help for reigns\n$ python lands.py reigns --help\n\nUsage: lands.py reigns [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  conquer\n  destroy\n\n// And the help for towns\n$ python lands.py towns --help\n\nUsage: lands.py towns [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  burn\n  found\n```\n\n</div>\n\nNow try it, manage the lands through the CLI:\n\n<div class=\"termy\">\n\n```console\n// Try the reigns command\n$ python lands.py reigns conquer Gondor\n\nConquering reign: Gondor\n\n$ python lands.py reigns destroy Nilfgaard\n\nDestroying reign: Nilfgaard\n\n// Try the towns command\n$ python lands.py towns found Springfield\n\nFounding town: Springfield\n\n$ python lands.py towns burn Atlantis\n\nBurning town: Atlantis\n```\n\n</div>\n\n## Deeply nested subcommands\n\nNow let's say that all these commands in the `lands.py` *CLI program* should be part of the previous *CLI program* we built in the first example.\n\nWe want our *CLI program* to have these commands/command groups:\n\n* `users`:\n    * `create`\n    * `delete`\n* `items`:\n    * `create`\n    * `delete`\n    * `sell`\n* `lands`:\n    * `reigns`:\n        * `conquer`\n        * `destroy`\n    * `towns`:\n        * `found`\n        * `burn`\n\nThis already is a quite deeply nested \"tree\" of commands/command groups.\n\nBut to achieve that, we just have to add the `lands` **Typer** app to the same `main.py` file we already had:\n\n{* docs_src/subcommands/tutorial003/main.py hl[4,10] *}\n\nAnd now we have everything in a single *CLI program*:\n\n<div class=\"termy\">\n\n```console\n// Check the main help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  items\n  lands\n  users\n\n// Try some users commands\n$ python main.py users create Camila\n\nCreating user: Camila\n\n// Now try some items commands\n$ python main.py items create Sword\n\nCreating item: Sword\n\n// And now some lands commands for reigns\n$ python main.py lands reigns conquer Gondor\n\nConquering reign: Gondor\n\n// And for towns\n$ python main.py lands towns found Cartagena\n\nFounding town: Cartagena\n```\n\n</div>\n\n## Review the files\n\nHere are all the files if you want to review/copy them:\n\n`reigns.py`:\n\n{* docs_src/subcommands/tutorial003/reigns.py *}\n\n`towns.py`:\n\n{* docs_src/subcommands/tutorial003/towns.py *}\n\n`lands.py`:\n\n{* docs_src/subcommands/tutorial003/lands.py *}\n\n`users.py`:\n\n{* docs_src/subcommands/tutorial003/users.py *}\n\n`items.py`:\n\n{* docs_src/subcommands/tutorial003/items.py *}\n\n`main.py`:\n\n{* docs_src/subcommands/tutorial003/main.py *}\n\n/// tip\n\nAll these files have an `if __name__ == \"__main__\"` block just to demonstrate how each of them can also be an independent *CLI app*.\n\nBut for your final application, only `main.py` would need it.\n\n///\n\n## Recap\n\nThat's it, you can just add **Typer** applications one inside another as much as you want and create complex *CLI programs* while writing simple code.\n\nYou can probably achieve a simpler *CLI program* design that's easier to use than the example here. But if your requirements are complex, **Typer** helps you build your *CLI app* easily.\n\n/// tip\n\nAuto completion helps a lot, specially with complex programs.\n\nCheck the docs about adding auto completion to your *CLI apps*.\n\n///\n"
  },
  {
    "file": "docs/tutorial/subcommands/single-file.md",
    "type": "markdown",
    "content": "# SubCommands in a Single File\n\nIn some cases, it's possible that your application code needs to live on a single file.\n\nYou can still use the same ideas:\n\n{* docs_src/subcommands/tutorial002/main.py *}\n\nThere are several things to notice here...\n\n## Apps at the top\n\nFirst, you can create `typer.Typer()` objects and add them to another one at the top.\n\nIt doesn't have to be done after creating the subcommands:\n\n{* docs_src/subcommands/tutorial002/main.py hl[4,5,6,7] *}\n\nYou can add the commands (subcommands) to each `typer.Typer()` app later and it will still work.\n\n## Function names\n\nAs you now have subcommands like `create` for `users` and for `items`, you can no longer call the functions with just the name, like `def create()`, because they would overwrite each other.\n\nSo we use longer names:\n\n{* docs_src/subcommands/tutorial002/main.py hl[11,16,21,26,31] *}\n\n## Command name\n\nWe are naming the functions with longer names so that they don't overwrite each other.\n\nBut we still want the subcommands to be `create`, `delete`, etc.\n\nTo call them like:\n\n<div class=\"termy\">\n\n```console\n// We want this \u2714\ufe0f\n$ python main.py items create\n```\n\n</div>\n\ninstead of:\n\n<div class=\"termy\">\n\n```console\n// We don't want this \u26d4\ufe0f\n$ python main.py items items-create\n```\n\n</div>\n\nSo we pass the name we want to use for each subcommand as the function argument to the decorator:\n\n{* docs_src/subcommands/tutorial002/main.py hl[10,15,20,25,30] *}\n\n## Check it\n\nIt still works the same:\n\n\n<div class=\"termy\">\n\n```console\n// Check the help\n$ python main.py --help\n\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  items\n  users\n```\n\n</div>\n\nCheck the `items` command:\n\n\n<div class=\"termy\">\n\n```console\n// Check the help for items\n$ python main.py items --help\n\n// It shows its own commands (subcommands): create, delete, sell\nUsage: main.py items [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n  sell\n\n// Try it\n$ python main.py items create Wand\n\nCreating item: Wand\n\n$ python main.py items sell Vase\n\nSelling item: Vase\n```\n\n</div>\n\nAnd the same for the `users` command:\n\n\n<div class=\"termy\">\n\n```console\n$ python main.py users --help\n\nUsage: main.py users [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n  delete\n\n// Try it\n$ python main.py users create Camila\n\nCreating user: Camila\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/terminating.md",
    "type": "markdown",
    "content": "# Terminating\n\nThere are some cases where you might want to terminate a command at some point, and stop all subsequent execution.\n\nIt could be that your code determined that the program completed successfully, or it could be an operation aborted.\n\n## `Exit` a CLI program\n\nYou can normally just let the code of your CLI program finish its execution, but in some scenarios, you might want to terminate at some point in the middle of it. And prevent any subsequent code to run.\n\nThis doesn't have to mean that there's an error, just that nothing else needs to be executed.\n\nIn that case, you can raise a `typer.Exit()` exception:\n\n{* docs_src/terminating/tutorial001.py hl[9] *}\n\nThere are several things to see in this example.\n\n* The CLI program is the function `main()`, not the others. This is the one that takes a *CLI argument*.\n* The function `maybe_create_user()` can terminate the program by raising `typer.Exit()`.\n* If the program is terminated by `maybe_create_user()` then `send_new_user_notification()` will never execute inside of `main()`.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py Camila\n\nUser created: Camila\nNotification sent for new user: Camila\n\n// Try with an existing user\n$ python main.py rick\n\nThe user already exists\n\n// Notice that the notification code was never run, the second message is not printed\n```\n\n</div>\n\n/// tip\n\nEven though you are raising an exception, it doesn't necessarily mean there's an error.\n\nThis is done with an exception because it works as an \"error\" and stops all execution.\n\nBut then **Typer** (actually Click) catches it and just terminates the program normally.\n\n///\n\n## Exit with an error\n\n`typer.Exit()` takes an optional `code` parameter. By default, `code` is `0`, meaning there was no error.\n\nYou can pass a `code` with a number other than `0` to tell the terminal that there was an error in the execution of the program:\n\n{* docs_src/terminating/tutorial002.py hl[7] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py Camila\n\nNew user created: Camila\n\n// Print the result code of the last program executed\n$ echo $?\n\n0\n\n// Now make it exit with an error\n$ python main.py root\n\nThe root user is reserved\n\n// Print the result code of the last program executed\n$ echo $?\n\n1\n\n// 1 means there was an error, 0 means no errors.\n```\n\n</div>\n\n/// tip\n\nThe error code might be used by other programs (for example a Bash script) that execute your CLI program.\n\n///\n\n## Abort\n\nThere's a special exception that you can use to \"abort\" a program.\n\nIt works more or less the same as `typer.Exit()` but will print `\"Aborted!\"` to the screen and can be useful in certain cases later to make it explicit that the execution was aborted:\n\n{* docs_src/terminating/tutorial003.py hl[7] *}\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py Camila\n\nNew user created: Camila\n\n// Now make it exit with an error\n$ python main.py root\n\nThe root user is reserved\nAborted!\n```\n\n</div>\n"
  },
  {
    "file": "docs/tutorial/testing.md",
    "type": "markdown",
    "content": "# Testing\n\nTesting **Typer** applications is very easy with <a href=\"https://docs.pytest.org/en/latest/\" class=\"external-link\" target=\"_blank\">pytest</a>.\n\nLet's say you have an application `app/main.py` with:\n\n{* docs_src/testing/app01/main.py *}\n\nSo, you would use it like:\n\n<div class=\"termy\">\n\n```console\n$ python main.py Camila --city Berlin\n\nHello Camila\nLet's have a coffee in Berlin\n```\n\n</div>\n\nAnd the directory also has an empty `app/__init__.py` file.\n\nSo, the `app` is a \"Python package\".\n\n## Test the app\n\n### Import and create a `CliRunner`\n\nCreate another file/module `app/test_main.py`.\n\nImport `CliRunner` and create a `runner` object.\n\nThis runner is what will \"invoke\" or \"call\" your command line application.\n\n{* docs_src/testing/app01/test_main.py hl[1,5] *}\n\n/// tip\n\nIt's important that the name of the file starts with `test_`, that way pytest will be able to detect it and use it automatically.\n\n///\n\n### Call the app\n\nThen create a function `test_app()`.\n\nAnd inside of the function, use the `runner` to `invoke` the application.\n\nThe first parameter to `runner.invoke()` is a `Typer` app.\n\nThe second parameter is a `list` of `str`, with all the text you would pass in the command line, right as you would pass it:\n\n{* docs_src/testing/app01/test_main.py hl[8,9] *}\n\n/// tip\n\nThe name of the function has to start with `test_`, that way pytest can detect it and use it automatically.\n\n///\n\n### Check the result\n\nThen, inside of the test function, add `assert` statements to ensure that everything in the result of the call is as it should be.\n\n{* docs_src/testing/app01/test_main.py hl[10,11,12] *}\n\nHere we are checking that the exit code is 0, as it is for programs that exit without errors.\n\nThen we check that the text printed to \"standard output\" contains the text that our CLI program prints.\n\n/// tip\n\nYou could also check the output sent to \"standard error\" (`stderr`) or \"standard output\" (`stdout`) independently by accessing `result.stdout` and `result.stderr` in your tests.\n\n///\n\n/// info\n\nIf you need a refresher about what is \"standard output\" and \"standard error\" check the section in [Printing and Colors: \"Standard Output\" and \"Standard Error\"](printing.md#standard-output-and-standard-error){.internal-link target=_blank}.\n\n///\n\n### Call `pytest`\n\nThen you can call `pytest` in your directory and it will run your tests:\n\n<div class=\"termy\">\n\n```console\n$ pytest\n\n================ test session starts ================\nplatform linux -- Python 3.10, pytest-5.3.5, py-1.8.1, pluggy-0.13.1\nrootdir: /home/user/code/superawesome-cli/app\nplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1\ncollected 1 item\n\n---> 100%\n\ntest_main.py <span style=\"color: green; white-space: pre;\">.                                 [100%]</span>\n\n<span style=\"color: green;\">================= 1 passed in 0.03s =================</span>\n```\n\n</div>\n\n## Testing input\n\nIf you have a CLI with prompts, like:\n\n{* docs_src/testing/app02_an/main.py hl[8] *}\n\nThat you would use like:\n\n<div class=\"termy\">\n\n```console\n$ python main.py Camila\n\n# Email: $ camila@example.com\n\nHello Camila, your email is: camila@example.com\n```\n\n</div>\n\nYou can test the input typed in the terminal using `input=\"camila@example.com\\n\"`.\n\nThis is because what you type in the terminal goes to \"**standard input**\" and is handled by the operating system as if it was a \"virtual file\".\n\n/// info\n\nIf you need a refresher about what is \"standard output\", \"standard error\", and \"standard input\" check the section in [Printing and Colors: \"Standard Output\" and \"Standard Error\"](printing.md#standard-output-and-standard-error){.internal-link target=_blank}.\n\n///\n\nWhen you hit the <kbd>ENTER</kbd> key after typing the email, that is just a \"new line character\". And in Python that is represented with `\"\\n\"`.\n\nSo, if you use `input=\"camila@example.com\\n\"` it means: \"type `camila@example.com` in the terminal, then hit the <kbd>ENTER</kbd> key\":\n\n{* docs_src/testing/app02/test_main.py hl[9] *}\n\n## Test a function\n\nIf you have a script and you never created an explicit `typer.Typer` app, like:\n\n{* docs_src/testing/app03/main.py hl[9] *}\n\n...you can still test it, by creating an app during testing:\n\n{* docs_src/testing/app03/test_main.py hl[6,7,13] *}\n\nOf course, if you are testing that script, it's probably easier/cleaner to just create the explicit `typer.Typer` app in `main.py` instead of creating it just during the test.\n\nBut if you want to keep it that way, e.g. because it's a simple example in documentation, then you can use that trick.\n\n### About the `app.command` decorator\n\nNotice the `app.command()(main)`.\n\nIf it's not obvious what it's doing, continue reading...\n\nYou would normally write something like:\n\n```Python\n@app.command()\ndef main(name: str = \"World\"):\n    # Some code here\n```\n\nBut `@app.command()` is just a decorator.\n\nThat's equivalent to:\n\n```Python\ndef main(name: str = \"World\"):\n    # Some code here\n\ndecorator = app.command()\n\nnew_main = decorator(main)\nmain = new_main\n```\n\n`app.command()` returns a function (`decorator`) that takes another function as it's only parameter (`main`).\n\nAnd by using the `@something` you normally tell Python to replace the thing below (the function `main`) with the return of the `decorator` function (`new_main`).\n\nNow, in the specific case of **Typer**, the decorator doesn't change the original function. It registers it internally and returns it unmodified.\n\nSo, `new_main` is actually the same original `main`.\n\nSo, in the case of **Typer**, as it doesn't really modify the decorated function, that would be equivalent to:\n\n```Python\ndef main(name: str = \"World\"):\n    # Some code here\n\ndecorator = app.command()\n\ndecorator(main)\n```\n\nBut then we don't need to create the variable `decorator` to use it below, we can just use it directly:\n\n```Python\ndef main(name: str = \"World\"):\n    # Some code here\n\napp.command()(main)\n```\n\n...that's it. It's still probably simpler to just create the explicit `typer.Typer` in the `main.py` file \ud83d\ude05.\n"
  },
  {
    "file": "docs/tutorial/typer-command.md",
    "type": "markdown",
    "content": "# `typer` command\n\nThe `typer` command provides \u2728 completion \u2728 in the Terminal for your own small scripts. Even if they don't use Typer internally. Of course, it works better if you use **Typer** in your script.\n\nIt's probably most useful if you have a small custom Python script using **Typer** (maybe as part of some project), for some small tasks, and it's not complex/important enough to create a whole installable Python package for it (something to be installed with `pip`).\n\nIn that case, you can run your program with the `typer` command in your Terminal, and it will provide completion for your script.\n\nThe `typer` command also has functionality to generate Markdown documentation for your own **Typer** programs \ud83d\udcdd.\n\n## Install\n\nWhen you install **Typer** with:\n\n```bash\npip install typer\n```\n\n...it includes the `typer` command.\n\nIf you don't want to have the `typer` command, you can install instead:\n\n```bash\npip install typer-slim\n```\n\nYou can still use it by calling the Typer library as a module with:\n\n```bash\npython -m typer\n```\n\n## Install completion\n\nYou can then install completion for the `typer` command with:\n\n<div class=\"termy\">\n\n```console\n$ typer --install-completion\n\nbash completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n```\n\n</div>\n\n### Sample script\n\nLet's say you have a script that uses **Typer** in `my_custom_script.py`:\n\n```Python\nfrom typing import Optional\n\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: Optional[str] = None):\n    if name:\n        typer.echo(f\"Hello {name}\")\n    else:\n        typer.echo(\"Hello World!\")\n\n\n@app.command()\ndef bye(name: Optional[str] = None):\n    if name:\n        typer.echo(f\"Bye {name}\")\n    else:\n        typer.echo(\"Goodbye!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\nFor it to work, you would also install **Typer**:\n\n<div class=\"termy\">\n\n```console\n$ python -m pip install typer\n---> 100%\nSuccessfully installed typer\n```\n\n</div>\n\n### Run with Python\n\nThen you could run your script with normal Python:\n\n<div class=\"termy\">\n\n```console\n$ python my_custom_script.py hello\n\nHello World!\n\n$ python my_custom_script.py hello --name Camila\n\nHello Camila!\n\n$ python my_custom_script.py bye --name Camila\n\nBye Camila\n```\n\n</div>\n\nThere's nothing wrong with using Python directly to run it. And, in fact, if some other code or program uses your script, that would probably be the best way to do it.\n\n\u26d4\ufe0f But in your terminal, you won't get completion when hitting <kbd>TAB</kbd> for any of the subcommands or options, like `hello`, `bye`, and `--name`.\n\n### Run with the `typer` command.\n\nYou can also run the same script with the `typer` command:\n\n<div class=\"termy\">\n\n```console\n$ typer my_custom_script.py run hello\n\nHello World!\n\n$ typer my_custom_script.py run hello --name Camila\n\nHello Camila!\n\n$ typer my_custom_script.py run bye --name Camila\n\nBye Camila\n```\n\n</div>\n\n* Instead of using `python` directly you use the `typer` command.\n* After the name of the file, add the subcommand `run`.\n\n\u2714\ufe0f If you installed completion for the `typer` command as described above, when you hit <kbd>TAB</kbd> you will have \u2728 completion for everything \u2728, including all the subcommands and options of your script, like `hello`, `bye`, and `--name` \ud83d\ude80.\n\n## If main\n\nBecause the `typer` command won't use the block with:\n\n```Python\nif __name__ == \"__main__\":\n    app()\n```\n\n...you can also remove it if you are calling that script only with the `typer` command.\n\n## Run other files\n\nThe `typer` command can run any script with **Typer**, but the script doesn't even have to use **Typer** at all.\n\nYou could even run a file with a function that could be used with `typer.run()`, even if the script doesn't use `typer.run()` or anything else.\n\nFor example, a file `main.py` like this will still work:\n\n```Python\ndef main(name: str = \"World\"):\n    \"\"\"\n    Say hi to someone, by default to the World.\n    \"\"\"\n    print(f\"Hello {name}\")\n```\n\nThen you can call it with:\n\n<div class=\"termy\">\n\n```console\n$ typer main.py run --help\nUsage: typer run [OPTIONS]\n\n  Say hi to someone, by default to the World.\n\nOptions:\n  --name TEXT\n  --help       Show this message and exit.\n\n$ typer main.py run --name Camila\n\nHello Camila\n```\n\n</div>\n\nAnd it will also have completion for things like the `--name` *CLI Option*.\n\n## Run a package or module\n\nInstead of a file path you can pass a module (possibly in a package) to import.\n\nFor example:\n\n<div class=\"termy\">\n\n```console\n$ typer my_package.main run --help\nUsage: typer run [OPTIONS]\n\nOptions:\n  --name TEXT\n  --help       Show this message and exit.\n\n$ typer my_package.main run --name Camila\n\nHello Camila\n```\n\n</div>\n\n## Options\n\nYou can specify one of the following **CLI options**:\n\n* `--app`: the name of the variable with a `Typer()` object to run as the main app.\n* `--func`: the name of the variable with a function that would be used with `typer.run()`.\n\n### Defaults\n\nWhen your run a script with the `typer` command it will use the app from the following priority:\n\n* An app object from the `--app` *CLI Option*.\n* A function to convert to a **Typer** app from `--func` *CLI Option* (like when using `typer.run()`).\n* A **Typer** app in a variable with a name of `app`, `cli`, or `main`.\n* The first **Typer** app available in the file, with any name.\n* A function in a variable with a name of `main`, `cli`, or `app`.\n* The first function in the file, with any name.\n\n## Generate docs\n\nYou can also use the `typer` command to generate Markdown documentation for your **Typer** application.\n\n### Sample script with docs\n\nFor example, you could have a script like:\n\n{* docs_src/commands/help/tutorial001.py *}\n\n### Generate docs with the `typer` command\n\nThen you could generate docs for it with the `typer` command.\n\nYou can use the subcommand `utils`.\n\nAnd then the subcommand `docs`.\n\n<div class=\"termy\">\n\n```console\n$ typer some_script.py utils docs\n```\n\n</div>\n\n/// tip\n\nIf you installed only `typer-slim` and you don't have the `typer` command, you can still generate docs with:\n\n```console\n$ python -m typer some_script.py utils docs\n```\n\n///\n\n**Options**:\n\n* `--name TEXT`: The name of the CLI program to use in docs.\n* `--output FILE`: An output file to write docs to, like README.md.\n* `--title TEXT`: A title to use in the docs, by default the name of the command.\n\nFor example:\n\n<div class=\"termy\">\n\n```console\n$ typer my_package.main utils docs --name awesome-cli --output README.md\n\nDocs saved to: README.md\n```\n\n</div>\n\n### Sample docs output\n\nFor example, for the previous script, the generated docs would look like:\n\n---\n\n## `awesome-cli`\n\nAwesome CLI user manager.\n\n**Usage**:\n\n```console\n$ awesome-cli [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options**:\n\n* `--install-completion`: Install completion for the current shell.\n* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.\n* `--help`: Show this message and exit.\n\n**Commands**:\n\n* `create`: Create a new user with USERNAME.\n* `delete`: Delete a user with USERNAME.\n* `delete-all`: Delete ALL users in the database.\n* `init`: Initialize the users database.\n\n## `awesome-cli create`\n\nCreate a new user with USERNAME.\n\n**Usage**:\n\n```console\n$ awesome-cli create [OPTIONS] USERNAME\n```\n\n**Options**:\n\n* `--help`: Show this message and exit.\n\n## `awesome-cli delete`\n\nDelete a user with USERNAME.\n\nIf --force is not used, will ask for confirmation.\n\n**Usage**:\n\n```console\n$ awesome-cli delete [OPTIONS] USERNAME\n```\n\n**Options**:\n\n* `--force / --no-force`: Force deletion without confirmation.  [required]\n* `--help`: Show this message and exit.\n\n## `awesome-cli delete-all`\n\nDelete ALL users in the database.\n\nIf --force is not used, will ask for confirmation.\n\n**Usage**:\n\n```console\n$ awesome-cli delete-all [OPTIONS]\n```\n\n**Options**:\n\n* `--force / --no-force`: Force deletion without confirmation.  [required]\n* `--help`: Show this message and exit.\n\n## `awesome-cli init`\n\nInitialize the users database.\n\n**Usage**:\n\n```console\n$ awesome-cli init [OPTIONS]\n```\n\n**Options**:\n\n* `--help`: Show this message and exit.\n"
  },
  {
    "file": "docs/tutorial/using-click.md",
    "type": "markdown",
    "content": "# Using Click\n\n/// warning\n\nThis is a more advanced topic, if you are starting with **Typer**, feel free to skip it.\n\nIt will be mostly useful for people that already work with Click and have questions around it.\n\n///\n\n**Typer** is powered by <a href=\"https://click.palletsprojects.com\" class=\"external-link\" target=\"_blank\">Click</a>. It does all the work underneath.\n\nHere is some more information related to using both together.\n\n## A single app with both Click and **Typer**\n\nIf you already have a Click application and want to migrate to **Typer**, or to add some Typer components, you can get a Click `Command` from your Typer application and then use Click directly.\n\n### How Click works\n\nBefore knowing how to combine Click and **Typer**, let's first check a little about how Click works.\n\n#### Click `Command`\n\nAny Click application has an object of class `Command`. That's, more or less, the most basic Click object.\n\nA `Command` can have its own *CLI arguments* and *CLI options*, and it has a function that it calls.\n\nFor example, in this Click app:\n\n{* docs_src/using_click/tutorial001.py hl[7,14] *}\n\nThe original `hello` variable is converted by Click from a function to a `Command` object. And the original `hello` function is used by that `Command` internally, but it is no longer named `hello` (as `hello` is now a Click `Command`).\n\n#### Click `Group`\n\nThen Click also has a `Group` class, it **inherits from `Command`**. So, a `Group` object is *also* a `Command`.\n\nA `Group` can also have its own *CLI arguments* and *CLI options*.\n\nA `Group` can have subcommands of class `Command` or sub groups of class `Group` as well.\n\nAnd a `Group` can also have a function that it calls, right before calling the function for any specific subcommand.\n\nFor example:\n\n{* docs_src/using_click/tutorial002.py hl[5,19,20] *}\n\nThe `cli` variable is converted by Click from a function to a `Group` object. And the original `cli` function is used by that `Group` internally.\n\n/// tip\n\nThe original `cli` function would be the equivalent of a [Typer Callback](./commands/callback.md){.internal-link target=_blank}.\n\n///\n\nThen the `cli` variable, that now is a `Group` object, is used to add sub-commands.\n\n### How **Typer** works\n\nTyper doesn't modify the functions. You create an explicit variable of class `typer.Typer` and use it to *register* those functions.\n\nAnd then, when you call the app, Typer goes and creates a Click `Command` (or `Group`), and then calls it.\n\nIf your app only has one command, then when you call it, **Typer** creates a single Click `Command` object and calls it.\n\nBut **Typer** creates a Click `Group` object if your app has any of:\n\n* More than one command.\n* A callback.\n* Sub-Typer apps (sub commands).\n\n/// tip\n\nIf you want to learn more about this check the section [One or Multiple Commands](./commands/one-or-multiple.md){.internal-link target=_blank}.\n\n///\n\n### Combine Click and **Typer**\n\n**Typer** uses an internal function `typer.main.get_command()` to generate a Click `Command` (or `Group`) from a `typer.Typer` object.\n\nYou can use it directly, and use the Click object with other Click applications.\n\n### Including a Click app in a **Typer** app\n\nFor example, you could have a **Typer** app, generate a Click `Group` from it, and then include other Click apps in it:\n\n{* docs_src/using_click/tutorial003.py hl[15,16,29,31,34] *}\n\nNotice that we add a callback that does nothing (only document the CLI program), to make sure **Typer** creates a Click `Group`. That way we can add sub-commands to that Click `Group`.\n\nThen we generate a Click object from our `typer.Typer` app (`typer_click_object`), and then we can include another Click object (`hello`) in this Click `Group`.\n\nAnd that way, our **Typer** app will have a subcommand `top` built with Typer, and a subcommand `hello` built with Click.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py --help\n\n// Notice we have both subcommands, top and hello\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  hello\n  top\n\n// Call the Typer part\n$ python main.py top\n\nThe Typer app is at the top level\n\n// Call the Click part\n$ python main.py hello --name Camila\n\nHello Camila!\n```\n\n</div>\n\n### Including a **Typer** app in a Click app\n\nThe same way, you can do the contrary and include a **Typer** sub app in a bigger Click app:\n\n{* docs_src/using_click/tutorial004.py hl[31,33,36] *}\n\nNotice that we don't have to add a callback or more commands, we can just create a **Typer** app that generates a single Click `Command`, as we don't need to include anything under the Typer app.\n\nThen we generate a Click object from our `typer.Typer` app (`typer_click_object`), and then we use **the Click `cli` to include** our Click object from our Typer app.\n\nIn this case, the original Click app includes the **Typer** app.\n\nAnd then we call the *original Click* app, not the Typer app.\n\nCheck it:\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\n// We get our Typer app down there in the sub command\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  dropdb\n  initdb\n  sub     A single-command Typer sub app\n\n\n// Use the Click part\n$ python main.py initdb\n\nInitialized the database\n\n// And use the Typer part\n$ python main.py sub\n\nTyper is now below Click, the Click app is the top level\n```\n\n</div>\n\n## About Click decorators\n\nTyper apps don't work with Click decorators directly.\n\nThis is because **Typer** doesn't modify functions to add metadata or to convert them to another object like Click does.\n\nSo, things like `@click.pass_context` won't work.\n\nMost of the functionality provided by decorators in Click has an alternative way of doing it in **Typer**.\n\nFor example, to access the context, you can just declare a function parameter of type `typer.Context`.\n\n/// tip\n\nYou can read more about using the context in the docs: [Commands: Using the Context](commands/context.md){.internal-link target=_blank}\n\n///\n\nBut if you need to use something based on Click decorators, you can always generate a Click object using the methods described above, and use it as you would normally use Click.\n"
  },
  {
    "file": "docs/virtual-environments.md",
    "type": "markdown",
    "content": "# Virtual Environments\n\nWhen you work in Python projects you probably should use a **virtual environment** (or a similar mechanism) to isolate the packages you install for each project.\n\n/// info\n\nIf you already know about virtual environments, how to create them and use them, you might want to skip this section. \ud83e\udd13\n\n///\n\n/// tip\n\nA **virtual environment** is different than an **environment variable**.\n\nAn **environment variable** is a variable in the system that can be used by programs.\n\nA **virtual environment** is a directory with some files in it.\n\n///\n\n/// info\n\nThis page will teach you how to use **virtual environments** and how they work.\n\nIf you are ready to adopt a **tool that manages everything** for you (including installing Python), try <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">uv</a>.\n\n///\n\n## Create a Project\n\nFirst, create a directory for your project.\n\nWhat I normally do is that I create a directory named `code` inside my home/user directory.\n\nAnd inside of that I create one directory per project.\n\n<div class=\"termy\">\n\n```console\n// Go to the home directory\n$ cd\n// Create a directory for all your code projects\n$ mkdir code\n// Enter into that code directory\n$ cd code\n// Create a directory for this project\n$ mkdir awesome-project\n// Enter into that project directory\n$ cd awesome-project\n```\n\n</div>\n\n## Create a Virtual Environment\n\nWhen you start working on a Python project **for the first time**, create a virtual environment **<abbr title=\"there are other options, this is a simple guideline\">inside your project</abbr>**.\n\n/// tip\n\nYou only need to do this **once per project**, not every time you work.\n\n///\n\n//// tab | `venv`\n\nTo create a virtual environment, you can use the `venv` module that comes with Python.\n\n<div class=\"termy\">\n\n```console\n$ python -m venv .venv\n```\n\n</div>\n\n/// details | What that command means\n\n* `python`: use the program called `python`\n* `-m`: call a module as a script, we'll tell it which module next\n* `venv`: use the module called `venv` that normally comes installed with Python\n* `.venv`: create the virtual environment in the new directory `.venv`\n\n///\n\n////\n\n//// tab | `uv`\n\nIf you have <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a> installed, you can use it to create a virtual environment.\n\n<div class=\"termy\">\n\n```console\n$ uv venv\n```\n\n</div>\n\n/// tip\n\nBy default, `uv` will create a virtual environment in a directory called `.venv`.\n\nBut you could customize it passing an additional argument with the directory name.\n\n///\n\n////\n\nThat command creates a new virtual environment in a directory called `.venv`.\n\n/// details | `.venv` or other name\n\nYou could create the virtual environment in a different directory, but there's a convention of calling it `.venv`.\n\n///\n\n## Activate the Virtual Environment\n\nActivate the new virtual environment so that any Python command you run or package you install uses it.\n\n/// tip\n\nDo this **every time** you start a **new terminal session** to work on the project.\n\n///\n\n//// tab | Linux, macOS\n\n<div class=\"termy\">\n\n```console\n$ source .venv/bin/activate\n```\n\n</div>\n\n////\n\n//// tab | Windows PowerShell\n\n<div class=\"termy\">\n\n```console\n$ .venv\\Scripts\\Activate.ps1\n```\n\n</div>\n\n////\n\n//// tab | Windows Bash\n\nOr if you use Bash for Windows (e.g. <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>):\n\n<div class=\"termy\">\n\n```console\n$ source .venv/Scripts/activate\n```\n\n</div>\n\n////\n\n/// tip\n\nEvery time you install a **new package** in that environment, **activate** the environment again.\n\nThis makes sure that if you use a **terminal (<abbr title=\"command line interface\">CLI</abbr>) program** installed by that package, you use the one from your virtual environment and not any other that could be installed globally, probably with a different version than what you need.\n\n///\n\n## Check the Virtual Environment is Active\n\nCheck that the virtual environment is active (the previous command worked).\n\n/// tip\n\nThis is **optional**, but it's a good way to **check** that everything is working as expected and you are using the virtual environment you intended.\n\n///\n\n//// tab | Linux, macOS, Windows Bash\n\n<div class=\"termy\">\n\n```console\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n</div>\n\nIf it shows the `python` binary at `.venv/bin/python`, inside of your project (in this case `awesome-project`), then it worked. \ud83c\udf89\n\n////\n\n//// tab | Windows PowerShell\n\n<div class=\"termy\">\n\n```console\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n</div>\n\nIf it shows the `python` binary at `.venv\\Scripts\\python`, inside of your project (in this case `awesome-project`), then it worked. \ud83c\udf89\n\n////\n\n## Upgrade `pip`\n\n/// tip\n\nIf you use <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a> you would use it to install things instead of `pip`, so you don't need to upgrade `pip`. \ud83d\ude0e\n\n///\n\nIf you are using `pip` to install packages (it comes by default with Python), you should **upgrade** it to the latest version.\n\nMany exotic errors while installing a package are solved by just upgrading `pip` first.\n\n/// tip\n\nYou would normally do this **once**, right after you create the virtual environment.\n\n///\n\nMake sure the virtual environment is active (with the command above) and then run:\n\n<div class=\"termy\">\n\n```console\n$ python -m pip install --upgrade pip\n\n---> 100%\n```\n\n</div>\n\n## Add `.gitignore`\n\nIf you are using **Git** (you should), add a `.gitignore` file to exclude everything in your `.venv` from Git.\n\n/// tip\n\nIf you used <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a> to create the virtual environment, it already did this for you, you can skip this step. \ud83d\ude0e\n\n///\n\n/// tip\n\nDo this **once**, right after you create the virtual environment.\n\n///\n\n<div class=\"termy\">\n\n```console\n$ echo \"*\" > .venv/.gitignore\n```\n\n</div>\n\n/// details | What that command means\n\n* `echo \"*\"`: will \"print\" the text `*` in the terminal (the next part changes that a bit)\n* `>`: anything printed to the terminal by the command to the left of `>` should not be printed but instead written to the file that goes to the right of `>`\n* `.gitignore`: the name of the file where the text should be written\n\nAnd `*` for Git means \"everything\". So, it will ignore everything in the `.venv` directory.\n\nThat command will create a file `.gitignore` with the content:\n\n```gitignore\n*\n```\n\n///\n\n## Install Packages\n\nAfter activating the environment, you can install packages in it.\n\n/// tip\n\nDo this **once** when installing or upgrading the packages your project needs.\n\nIf you need to upgrade a version or add a new package you would **do this again**.\n\n///\n\n### Install Packages Directly\n\nIf you're in a hurry and don't want to use a file to declare your project's package requirements, you can install them directly.\n\n/// tip\n\nIt's a (very) good idea to put the packages and versions your program needs in a file (for example `requirements.txt` or `pyproject.toml`).\n\n///\n\n//// tab | `pip`\n\n<div class=\"termy\">\n\n```console\n$ pip install typer\n\n---> 100%\n```\n\n</div>\n\n////\n\n//// tab | `uv`\n\nIf you have <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>:\n\n<div class=\"termy\">\n\n```console\n$ uv pip install typer\n---> 100%\n```\n\n</div>\n\n////\n\n### Install from `requirements.txt`\n\nIf you have a `requirements.txt`, you can now use it to install its packages.\n\n//// tab | `pip`\n\n<div class=\"termy\">\n\n```console\n$ pip install -r requirements.txt\n---> 100%\n```\n\n</div>\n\n////\n\n//// tab | `uv`\n\nIf you have <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>:\n\n<div class=\"termy\">\n\n```console\n$ uv pip install -r requirements.txt\n---> 100%\n```\n\n</div>\n\n////\n\n/// details | `requirements.txt`\n\nA `requirements.txt` with some packages could look like:\n\n```requirements.txt\ntyper==0.13.0\nrich==13.7.1\n```\n\n///\n\n## Run Your Program\n\nAfter you activated the virtual environment, you can run your program, and it will use the Python inside of your virtual environment with the packages you installed there.\n\n<div class=\"termy\">\n\n```console\n$ python main.py\n\nHello World\n```\n\n</div>\n\n## Configure Your Editor\n\nYou would probably use an editor, make sure you configure it to use the same virtual environment you created (it will probably autodetect it) so that you can get autocompletion and inline errors.\n\nFor example:\n\n* <a href=\"https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment\" class=\"external-link\" target=\"_blank\">VS Code</a>\n* <a href=\"https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html\" class=\"external-link\" target=\"_blank\">PyCharm</a>\n\n/// tip\n\nYou normally have to do this only **once**, when you create the virtual environment.\n\n///\n\n## Deactivate the Virtual Environment\n\nOnce you are done working on your project you can **deactivate** the virtual environment.\n\n<div class=\"termy\">\n\n```console\n$ deactivate\n```\n\n</div>\n\nThis way, when you run `python` it won't try to run it from that virtual environment with the packages installed there.\n\n## Ready to Work\n\nNow you're ready to start working on your project.\n\n\n\n/// tip\n\nDo you want to understand what's all that above?\n\nContinue reading. \ud83d\udc47\ud83e\udd13\n\n///\n\n## Why Virtual Environments\n\nTo work with Typer you need to install <a href=\"https://www.python.org/\" class=\"external-link\" target=\"_blank\">Python</a>.\n\nAfter that, you would need to **install** Typer and any other **packages** you want to use.\n\nTo install packages you would normally use the `pip` command that comes with Python (or similar alternatives).\n\nNevertheless, if you just use `pip` directly, the packages would be installed in your **global Python environment** (the global installation of Python).\n\n### The Problem\n\nSo, what's the problem with installing packages in the global Python environment?\n\nAt some point, you will probably end up writing many different programs that depend on **different packages**. And some of these projects you work on will depend on **different versions** of the same package. \ud83d\ude31\n\nFor example, you could create a project called `philosophers-stone`, this program depends on another package called **`harry`, using the version `1`**. So, you need to install `harry`.\n\n```mermaid\nflowchart LR\n    stone(philosophers-stone) -->|requires| harry-1[harry v1]\n```\n\nThen, at some point later, you create another project called `prisoner-of-azkaban`, and this project also depends on `harry`, but this project needs **`harry` version `3`**.\n\n```mermaid\nflowchart LR\n    azkaban(prisoner-of-azkaban) --> |requires| harry-3[harry v3]\n```\n\nBut now the problem is, if you install the packages globally (in the global environment) instead of in a local **virtual environment**, you will have to choose which version of `harry` to install.\n\nIf you want to run `philosophers-stone` you will need to first install `harry` version `1`, for example with:\n\n<div class=\"termy\">\n\n```console\n$ pip install \"harry==1\"\n```\n\n</div>\n\nAnd then you would end up with `harry` version `1` installed in your global Python environment.\n\n```mermaid\nflowchart LR\n    subgraph global[global env]\n        harry-1[harry v1]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) -->|requires| harry-1\n    end\n```\n\nBut then if you want to run `prisoner-of-azkaban`, you will need to uninstall `harry` version `1` and install `harry` version `3` (or just installing version `3` would automatically uninstall version `1`).\n\n<div class=\"termy\">\n\n```console\n$ pip install \"harry==3\"\n```\n\n</div>\n\nAnd then you would end up with `harry` version `3` installed in your global Python environment.\n\nAnd if you try to run `philosophers-stone` again, there's a chance it would **not work** because it needs `harry` version `1`.\n\n```mermaid\nflowchart LR\n    subgraph global[global env]\n        harry-1[<strike>harry v1</strike>]\n        style harry-1 fill:#ccc,stroke-dasharray: 5 5\n        harry-3[harry v3]\n    end\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) -.-x|\u26d4\ufe0f| harry-1\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) --> |requires| harry-3\n    end\n```\n\n/// tip\n\nIt's very common in Python packages to try the best to **avoid breaking changes** in **new versions**, but it's better to be safe, and install newer versions intentionally and when you can run the tests to check everything is working correctly.\n\n///\n\nNow, imagine that with **many** other **packages** that all your **projects depend on**. That's very difficult to manage. And you would probably end up running some projects with some **incompatible versions** of the packages, and not knowing why something isn't working.\n\nAlso, depending on your operating system (e.g. Linux, Windows, macOS), it could have come with Python already installed. And in that case it probably had some packages pre-installed with some specific versions **needed by your system**. If you install packages in the global Python environment, you could end up **breaking** some of the programs that came with your operating system.\n\n## Where are Packages Installed\n\nWhen you install Python, it creates some directories with some files in your computer.\n\nSome of these directories are the ones in charge of having all the packages you install.\n\nWhen you run:\n\n<div class=\"termy\">\n\n```console\n// Don't run this now, it's just an example \ud83e\udd13\n$ pip install typer\n---> 100%\n```\n\n</div>\n\nThat will download a compressed file with the Typer code, normally from <a href=\"https://pypi.org/project/typer/\" class=\"external-link\" target=\"_blank\">PyPI</a>.\n\nIt will also **download** files for other packages that Typer depends on.\n\nThen it will **extract** all those files and put them in a directory in your computer.\n\nBy default, it will put those files downloaded and extracted in the directory that comes with your Python installation, that's the **global environment**.\n\n## What are Virtual Environments\n\nThe solution to the problems of having all the packages in the global environment is to use a **virtual environment for each project** you work on.\n\nA virtual environment is a **directory**, very similar to the global one, where you can install the packages for a project.\n\nThis way, each project will have its own virtual environment (`.venv` directory) with its own packages.\n\n```mermaid\nflowchart TB\n    subgraph stone-project[philosophers-stone project]\n        stone(philosophers-stone) --->|requires| harry-1\n        subgraph venv1[.venv]\n            harry-1[harry v1]\n        end\n    end\n    subgraph azkaban-project[prisoner-of-azkaban project]\n        azkaban(prisoner-of-azkaban) --->|requires| harry-3\n        subgraph venv2[.venv]\n            harry-3[harry v3]\n        end\n    end\n    stone-project ~~~ azkaban-project\n```\n\n## What Does Activating a Virtual Environment Mean\n\nWhen you activate a virtual environment, for example with:\n\n//// tab | Linux, macOS\n\n<div class=\"termy\">\n\n```console\n$ source .venv/bin/activate\n```\n\n</div>\n\n////\n\n//// tab | Windows PowerShell\n\n<div class=\"termy\">\n\n```console\n$ .venv\\Scripts\\Activate.ps1\n```\n\n</div>\n\n////\n\n//// tab | Windows Bash\n\nOr if you use Bash for Windows (e.g. <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>):\n\n<div class=\"termy\">\n\n```console\n$ source .venv/Scripts/activate\n```\n\n</div>\n\n////\n\nThat command will create or modify some [environment variables](environment-variables.md){.internal-link target=_blank} that will be available for the next commands.\n\nOne of those variables is the `PATH` variable.\n\n/// tip\n\nYou can learn more about the `PATH` environment variable in the [Environment Variables](environment-variables.md#path-environment-variable){.internal-link target=_blank} section.\n\n///\n\nActivating a virtual environment adds its path `.venv/bin` (on Linux and macOS) or `.venv\\Scripts` (on Windows) to the `PATH` environment variable.\n\nLet's say that before activating the environment, the `PATH` variable looked like this:\n\n//// tab | Linux, macOS\n\n```plaintext\n/usr/bin:/bin:/usr/sbin:/sbin\n```\n\nThat means that the system would look for programs in:\n\n* `/usr/bin`\n* `/bin`\n* `/usr/sbin`\n* `/sbin`\n\n////\n\n//// tab | Windows\n\n```plaintext\nC:\\Windows\\System32\n```\n\nThat means that the system would look for programs in:\n\n* `C:\\Windows\\System32`\n\n////\n\nAfter activating the virtual environment, the `PATH` variable would look something like this:\n\n//// tab | Linux, macOS\n\n```plaintext\n/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\nThat means that the system will now start looking first look for programs in:\n\n```plaintext\n/home/user/code/awesome-project/.venv/bin\n```\n\nbefore looking in the other directories.\n\nSo, when you type `python` in the terminal, the system will find the Python program in\n\n```plaintext\n/home/user/code/awesome-project/.venv/bin/python\n```\n\nand use that one.\n\n////\n\n//// tab | Windows\n\n```plaintext\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts;C:\\Windows\\System32\n```\n\nThat means that the system will now start looking first look for programs in:\n\n```plaintext\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\n```\n\nbefore looking in the other directories.\n\nSo, when you type `python` in the terminal, the system will find the Python program in\n\n```plaintext\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\nand use that one.\n\n////\n\nAn important detail is that it will put the virtual environment path at the **beginning** of the `PATH` variable. The system will find it **before** finding any other Python available. This way, when you run `python`, it will use the Python **from the virtual environment** instead of any other `python` (for example, a `python` from a global environment).\n\nActivating a virtual environment also changes a couple of other things, but this is one of the most important things it does.\n\n## Checking a Virtual Environment\n\nWhen you check if a virtual environment is active, for example with:\n\n//// tab | Linux, macOS, Windows Bash\n\n<div class=\"termy\">\n\n```console\n$ which python\n\n/home/user/code/awesome-project/.venv/bin/python\n```\n\n</div>\n\n////\n\n//// tab | Windows PowerShell\n\n<div class=\"termy\">\n\n```console\n$ Get-Command python\n\nC:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n```\n\n</div>\n\n////\n\nThat means that the `python` program that will be used is the one **in the virtual environment**.\n\nyou use `which` in Linux and macOS and `Get-Command` in Windows PowerShell.\n\nThe way that command works is that it will go and check in the `PATH` environment variable, going through **each path in order**, looking for the program called `python`. Once it finds it, it will **show you the path** to that program.\n\nThe most important part is that when you call `python`, that is the exact \"`python`\" that will be executed.\n\nSo, you can confirm if you are in the correct virtual environment.\n\n/// tip\n\nIt's easy to activate one virtual environment, get one Python, and then **go to another project**.\n\nAnd the second project **wouldn't work** because you are using the **incorrect Python**, from a virtual environment for another project.\n\nIt's useful being able to check what `python` is being used. \ud83e\udd13\n\n///\n\n## Why Deactivate a Virtual Environment\n\nFor example, you could be working on a project `philosophers-stone`, **activate that virtual environment**, install packages and work with that environment.\n\nAnd then you want to work on **another project** `prisoner-of-azkaban`.\n\nYou go to that project:\n\n<div class=\"termy\">\n\n```console\n$ cd ~/code/prisoner-of-azkaban\n```\n\n</div>\n\nIf you don't deactivate the virtual environment for `philosophers-stone`, when you run `python` in the terminal, it will try to use the Python from `philosophers-stone`.\n\n<div class=\"termy\">\n\n```console\n$ cd ~/code/prisoner-of-azkaban\n\n$ python main.py\n\n// Error importing sirius, it's not installed \ud83d\ude31\nTraceback (most recent call last):\n    File \"main.py\", line 1, in <module>\n        import sirius\n```\n\n</div>\n\nBut if you deactivate the virtual environment and activate the new one for `prisoner-of-askaban` then when you run `python` it will use the Python from the virtual environment in `prisoner-of-azkaban`.\n\n<div class=\"termy\">\n\n```console\n$ cd ~/code/prisoner-of-azkaban\n\n// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project \ud83d\ude0e\n$ deactivate\n\n// Activate the virtual environment in prisoner-of-azkaban/.venv \ud83d\ude80\n$ source .venv/bin/activate\n\n// Now when you run python, it will find the package sirius installed in this virtual environment \u2728\n$ python main.py\n\nI solemnly swear \ud83d\udc3a\n```\n\n</div>\n\n## Alternatives\n\nThis is a simple guide to get you started and teach you how everything works **underneath**.\n\nThere are many **alternatives** to managing virtual environments, package dependencies (requirements), projects.\n\nOnce you are ready and want to use a tool to **manage the entire project**, packages dependencies, virtual environments, etc. I would suggest you try <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">uv</a>.\n\n`uv` can do a lot of things, it can:\n\n* **Install Python** for you, including different versions\n* Manage the **virtual environment** for your projects\n* Install **packages**\n* Manage package **dependencies and versions** for your project\n* Make sure you have an **exact** set of packages and versions to install, including their dependencies, so that you can be sure that you can run your project in production exactly the same as in your computer while developing, this is called **locking**\n* And many other things\n\n## Conclusion\n\nIf you read and understood all this, now **you know much more** about virtual environments than many developers out there. \ud83e\udd13\n\nKnowing these details will most probably be useful in a future time when you are debugging something that seems complex, but you will know **how it all works underneath**. \ud83d\ude0e\n"
  },
  {
    "file": "docs_src/app_dir/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    app_dir = typer.get_app_dir(APP_NAME)\n    config_path: Path = Path(app_dir) / \"config.json\"\n    if not config_path.is_file():\n        print(\"Config file doesn't exist yet\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "get_app_dir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/default/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(\"Wade Wilson\")):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('Wade Wilson')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/default/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument()] = \"Wade Wilson\"):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'Wade Wilson'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/default/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "random",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "get_name",
        "content": "def get_name():\n    return random.choice([\"Deadpool\", \"Rick\", \"Morty\", \"Hiro\"])",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(default_factory=get_name)):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument(default_factory=get_name)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "get_name",
        "caller_class": null,
        "called_function": "choice",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/default/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "random",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "get_name",
        "content": "def get_name():\n    return random.choice([\"Deadpool\", \"Rick\", \"Morty\", \"Hiro\"])",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument(default_factory=get_name)]):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "get_name",
        "caller_class": null,
        "called_function": "choice",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/envvar/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(\"World\", envvar=\"AWESOME_NAME\")):\n    print(f\"Hello Mr. {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('World', envvar='AWESOME_NAME')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/envvar/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument(envvar=\"AWESOME_NAME\")] = \"World\"):\n    print(f\"Hello Mr. {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/envvar/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(\"World\", envvar=[\"AWESOME_NAME\", \"GOD_NAME\"])):\n    print(f\"Hello Mr. {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('World', envvar=['AWESOME_NAME', 'GOD_NAME'])"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/envvar/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[str, typer.Argument(envvar=[\"AWESOME_NAME\", \"GOD_NAME\"])] = \"World\",\n):\n    print(f\"Hello Mr. {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/envvar/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(\"World\", envvar=\"AWESOME_NAME\", show_envvar=False)):\n    print(f\"Hello Mr. {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('World', envvar='AWESOME_NAME', show_envvar=False)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/envvar/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        str, typer.Argument(envvar=\"AWESOME_NAME\", show_envvar=False)\n    ] = \"World\",\n):\n    print(f\"Hello Mr. {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(..., help=\"The name of the user to greet\")):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument(..., help='The name of the user to greet')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument(help=\"The name of the user to greet\")]):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(..., help=\"The name of the user to greet\")):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument(..., help='The name of the user to greet')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument(help=\"The name of the user to greet\")]):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(\"World\", help=\"Who to greet\")):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('World', help='Who to greet')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument(help=\"Who to greet\")] = \"World\"):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(\"World\", help=\"Who to greet\", show_default=False)):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('World', help='Who to greet', show_default=False)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        str, typer.Argument(help=\"Who to greet\", show_default=False)\n    ] = \"World\",\n):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Argument(\n        \"Wade Wilson\", help=\"Who to greet\", show_default=\"Deadpoolio the amazing's name\"\n    ),\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('Wade Wilson', help='Who to greet', show_default=\"Deadpoolio the amazing's name\")"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        str,\n        typer.Argument(\n            help=\"Who to greet\", show_default=\"Deadpoolio the amazing's name\"\n        ),\n    ] = \"Wade Wilson\",\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'Wade Wilson'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(\"World\", metavar=\"\u2728username\u2728\")):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('World', metavar='\u2728username\u2728')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial006_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument(metavar=\"\u2728username\u2728\")] = \"World\"):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial007.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Argument(..., help=\"Who to greet\"),\n    lastname: str = typer.Argument(\n        \"\", help=\"The last name\", rich_help_panel=\"Secondary Arguments\"\n    ),\n    age: str = typer.Argument(\n        \"\", help=\"The user's age\", rich_help_panel=\"Secondary Arguments\"\n    ),\n):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "age"
          ],
          "defaults": [
            "typer.Argument(..., help='Who to greet')",
            "typer.Argument('', help='The last name', rich_help_panel='Secondary Arguments')",
            "typer.Argument('', help=\"The user's age\", rich_help_panel='Secondary Arguments')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial007_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[str, typer.Argument(help=\"Who to greet\")],\n    lastname: Annotated[\n        str, typer.Argument(help=\"The last name\", rich_help_panel=\"Secondary Arguments\")\n    ] = \"\",\n    age: Annotated[\n        str,\n        typer.Argument(help=\"The user's age\", rich_help_panel=\"Secondary Arguments\"),\n    ] = \"\",\n):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "age"
          ],
          "defaults": [
            "''",
            "''"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial008.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(\"World\", hidden=True)):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument('World', hidden=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/help/tutorial008_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument(hidden=True)] = \"World\"):\n    \"\"\"\n    Say hi to NAME very gently, like Dirk.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/optional/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument()):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument()"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/optional/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument()]):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/optional/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(default=\"World\")):\n    print(f\"Hello {name}!\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument(default='World')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/optional/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Argument()] = \"World\"):\n    print(f\"Hello {name}!\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/arguments/optional/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(default=...)):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument(default=...)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/arguments/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/callback/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    if state[\"verbose\"]:\n        print(\"About to create a user\")\n    print(f\"Creating user: {username}\")\n    if state[\"verbose\"]:\n        print(\"Just created a user\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    if state[\"verbose\"]:\n        print(\"About to delete a user\")\n    print(f\"Deleting user: {username}\")\n    if state[\"verbose\"]:\n        print(\"Just deleted a user\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "main",
        "content": "def main(verbose: bool = False):\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    if verbose:\n        print(\"Will write verbose output\")\n        state[\"verbose\"] = True",
        "signature": {
          "args": [
            "verbose"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": [
          "app.callback()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/callback/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "callback",
        "content": "def callback():\n    print(\"Running a command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/callback/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "callback",
        "content": "def callback():\n    print(\"Running a command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "new_callback",
        "content": "def new_callback():\n    print(\"Override callback, running a command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "new_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "new_callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/callback/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "callback",
        "content": "def callback():\n    \"\"\"\n    Manage users CLI app.\n\n    Use it with the create command.\n\n    A new user with the given NAME will be created.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/context/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "main",
        "content": "def main(ctx: typer.Context):\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    print(f\"About to execute command: {ctx.invoked_subcommand}\")",
        "signature": {
          "args": [
            "ctx"
          ],
          "defaults": []
        },
        "decorators": [
          "app.callback()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/context/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "main",
        "content": "def main():\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    print(\"Initializing database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.callback(invoke_without_command=True)"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/context/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "main",
        "content": "def main(ctx: typer.Context):\n    \"\"\"\n    Manage users in the awesome CLI app.\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        print(\"Initializing database\")",
        "signature": {
          "args": [
            "ctx"
          ],
          "defaults": []
        },
        "decorators": [
          "app.callback(invoke_without_command=True)"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/context/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(ctx: typer.Context):\n    for extra_arg in ctx.args:\n        print(f\"Got extra arg: {extra_arg}\")",
        "signature": {
          "args": [
            "ctx"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command(context_settings={'allow_extra_args': True, 'ignore_unknown_options': True})"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    \"\"\"\n    Create a new user with USERNAME.\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(\n    username: str,\n    force: bool = typer.Option(\n        ...,\n        prompt=\"Are you sure you want to delete the user?\",\n        help=\"Force deletion without confirmation.\",\n    ),\n):\n    \"\"\"\n    Delete a user with USERNAME.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")",
        "signature": {
          "args": [
            "username",
            "force"
          ],
          "defaults": [
            "typer.Option(..., prompt='Are you sure you want to delete the user?', help='Force deletion without confirmation.')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete_all",
        "content": "def delete_all(\n    force: bool = typer.Option(\n        ...,\n        prompt=\"Are you sure you want to delete ALL users?\",\n        help=\"Force deletion without confirmation.\",\n    ),\n):\n    \"\"\"\n    Delete ALL users in the database.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": [
            "typer.Option(..., prompt='Are you sure you want to delete ALL users?', help='Force deletion without confirmation.')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "init",
        "content": "def init():\n    \"\"\"\n    Initialize the users database.\n    \"\"\"\n    print(\"Initializing user database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "init",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "init",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    \"\"\"\n    Create a new user with USERNAME.\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(\n    username: str,\n    force: Annotated[\n        bool,\n        typer.Option(\n            prompt=\"Are you sure you want to delete the user?\",\n            help=\"Force deletion without confirmation.\",\n        ),\n    ],\n):\n    \"\"\"\n    Delete a user with USERNAME.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")",
        "signature": {
          "args": [
            "username",
            "force"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete_all",
        "content": "def delete_all(\n    force: Annotated[\n        bool,\n        typer.Option(\n            prompt=\"Are you sure you want to delete ALL users?\",\n            help=\"Force deletion without confirmation.\",\n        ),\n    ],\n):\n    \"\"\"\n    Delete ALL users in the database.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "init",
        "content": "def init():\n    \"\"\"\n    Initialize the users database.\n    \"\"\"\n    print(\"Initializing user database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "init",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "init",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    \"\"\"\n    Some internal utility function to create.\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command(help='Create a new user with USERNAME.')"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command(help='Delete a user with USERNAME.')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    \"\"\"\n    Create a user.\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    \"\"\"\n    Delete a user.\n\n    This is deprecated and will stop being supported soon.\n    \"\"\"\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command(deprecated=True)"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(\n    username: str = typer.Argument(\n        ..., help=\"The username to be [green]created[/green]\"\n    ),\n):\n    \"\"\"\n    [bold green]Create[/bold green] a new [italic]shiny[/italic] user. :sparkles:\n\n    This requires a [underline]username[/underline].\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": [
            "typer.Argument(..., help='The username to be [green]created[/green]')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(\n    username: str = typer.Argument(..., help=\"The username to be [red]deleted[/red]\"),\n    force: bool = typer.Option(\n        False, help=\"Force the [bold red]deletion[/bold red] :boom:\"\n    ),\n):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username",
            "force"
          ],
          "defaults": [
            "typer.Argument(..., help='The username to be [red]deleted[/red]')",
            "typer.Option(False, help='Force the [bold red]deletion[/bold red] :boom:')"
          ]
        },
        "decorators": [
          "app.command(help='[bold red]Delete[/bold red] a user with [italic]USERNAME[/italic].')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(\n    username: Annotated[\n        str, typer.Argument(help=\"The username to be [green]created[/green]\")\n    ],\n):\n    \"\"\"\n    [bold green]Create[/bold green] a new [italic]shinny[/italic] user. :sparkles:\n\n    This requires a [underline]username[/underline].\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(\n    username: Annotated[\n        str, typer.Argument(help=\"The username to be [red]deleted[/red]\")\n    ],\n    force: Annotated[\n        bool, typer.Option(help=\"Force the [bold red]deletion[/bold red] :boom:\")\n    ] = False,\n):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username",
            "force"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": [
          "app.command(help='[bold red]Delete[/bold red] a user with [italic]USERNAME[/italic].')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str = typer.Argument(..., help=\"The username to be **created**\")):\n    \"\"\"\n    **Create** a new *shiny* user. :sparkles:\n\n    * Create a username\n\n    * Show that the username is created\n\n    ---\n\n    Learn more at the [Typer docs website](https://typer.tiangolo.com)\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": [
            "typer.Argument(..., help='The username to be **created**')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(\n    username: str = typer.Argument(..., help=\"The username to be **deleted**\"),\n    force: bool = typer.Option(False, help=\"Force the **deletion** :boom:\"),\n):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username",
            "force"
          ],
          "defaults": [
            "typer.Argument(..., help='The username to be **deleted**')",
            "typer.Option(False, help='Force the **deletion** :boom:')"
          ]
        },
        "decorators": [
          "app.command(help='**Delete** a user with *USERNAME*.')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(\n    username: Annotated[str, typer.Argument(help=\"The username to be **created**\")],\n):\n    \"\"\"\n    **Create** a new *shinny* user. :sparkles:\n\n    * Create a username\n\n    * Show that the username is created\n\n    ---\n\n    Learn more at the [Typer docs website](https://typer.tiangolo.com)\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(\n    username: Annotated[str, typer.Argument(help=\"The username to be **deleted**\")],\n    force: Annotated[bool, typer.Option(help=\"Force the **deletion** :boom:\")] = False,\n):\n    \"\"\"\n    Some internal utility function to delete.\n    \"\"\"\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username",
            "force"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": [
          "app.command(help='**Delete** a user with *USERNAME*.')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    \"\"\"\n    [green]Create[/green] a new user. :sparkles:\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    \"\"\"\n    [red]Delete[/red] a user. :fire:\n    \"\"\"\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "config",
        "content": "def config(configuration: str):\n    \"\"\"\n    [blue]Configure[/blue] the system. :wrench:\n    \"\"\"\n    print(f\"Configuring the system with: {configuration}\")",
        "signature": {
          "args": [
            "configuration"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command(rich_help_panel='Utils and Configs')"
        ]
      },
      {
        "name": "sync",
        "content": "def sync():\n    \"\"\"\n    [blue]Synchronize[/blue] the system or something fancy like that. :recycle:\n    \"\"\"\n    print(\"Syncing the system\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command(rich_help_panel='Utils and Configs')"
        ]
      },
      {
        "name": "help",
        "content": "def help():\n    \"\"\"\n    Get [yellow]help[/yellow] with the system. :question:\n    \"\"\"\n    print(\"Opening help portal...\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command(rich_help_panel='Help and Others')"
        ]
      },
      {
        "name": "report",
        "content": "def report():\n    \"\"\"\n    [yellow]Report[/yellow] an issue. :bug:\n    \"\"\"\n    print(\"Please open a new issue online, not a direct message\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command(rich_help_panel='Help and Others')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "config",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "config",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sync",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sync",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "help",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "help",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "report",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "report",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial007.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(\n    username: str = typer.Argument(..., help=\"The username to create\"),\n    lastname: str = typer.Argument(\n        \"\", help=\"The last name of the new user\", rich_help_panel=\"Secondary Arguments\"\n    ),\n    force: bool = typer.Option(False, help=\"Force the creation of the user\"),\n    age: Union[int, None] = typer.Option(\n        None, help=\"The age of the new user\", rich_help_panel=\"Additional Data\"\n    ),\n    favorite_color: Union[str, None] = typer.Option(\n        None,\n        help=\"The favorite color of the new user\",\n        rich_help_panel=\"Additional Data\",\n    ),\n):\n    \"\"\"\n    [green]Create[/green] a new user. :sparkles:\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username",
            "lastname",
            "force",
            "age",
            "favorite_color"
          ],
          "defaults": [
            "typer.Argument(..., help='The username to create')",
            "typer.Argument('', help='The last name of the new user', rich_help_panel='Secondary Arguments')",
            "typer.Option(False, help='Force the creation of the user')",
            "typer.Option(None, help='The age of the new user', rich_help_panel='Additional Data')",
            "typer.Option(None, help='The favorite color of the new user', rich_help_panel='Additional Data')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "config",
        "content": "def config(configuration: str):\n    \"\"\"\n    [blue]Configure[/blue] the system. :wrench:\n    \"\"\"\n    print(f\"Configuring the system with: {configuration}\")",
        "signature": {
          "args": [
            "configuration"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command(rich_help_panel='Utils and Configs')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "config",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "config",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial007_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(\n    username: Annotated[str, typer.Argument(help=\"The username to create\")],\n    lastname: Annotated[\n        str,\n        typer.Argument(\n            help=\"The last name of the new user\", rich_help_panel=\"Secondary Arguments\"\n        ),\n    ] = \"\",\n    force: Annotated[bool, typer.Option(help=\"Force the creation of the user\")] = False,\n    age: Annotated[\n        Union[int, None],\n        typer.Option(help=\"The age of the new user\", rich_help_panel=\"Additional Data\"),\n    ] = None,\n    favorite_color: Annotated[\n        Union[str, None],\n        typer.Option(\n            help=\"The favorite color of the new user\",\n            rich_help_panel=\"Additional Data\",\n        ),\n    ] = None,\n):\n    \"\"\"\n    [green]Create[/green] a new user. :sparkles:\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username",
            "lastname",
            "force",
            "age",
            "favorite_color"
          ],
          "defaults": [
            "''",
            "False",
            "None",
            "None"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "config",
        "content": "def config(configuration: str):\n    \"\"\"\n    [blue]Configure[/blue] the system. :wrench:\n    \"\"\"\n    print(f\"Configuring the system with: {configuration}\")",
        "signature": {
          "args": [
            "configuration"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command(rich_help_panel='Utils and Configs')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "config",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "config",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/help/tutorial008.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    \"\"\"\n    [green]Create[/green] a new user. :sparkles:\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command(epilog='Made with :heart: in [blue]Venus[/blue]')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/index/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/index/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create():\n    print(\"Creating user: Hiro Hamada\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete():\n    print(\"Deleting user: Hiro Hamada\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/index/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create():\n    print(\"Creating user: Hiro Hamada\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete():\n    print(\"Deleting user: Hiro Hamada\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/index/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "delete",
        "content": "def delete():\n    print(\"Deleting user: Hiro Hamada\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "create",
        "content": "def create():\n    print(\"Creating user: Hiro Hamada\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/name/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "cli_create_user",
        "content": "def cli_create_user(username: str):\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command('create')"
        ]
      },
      {
        "name": "cli_delete_user",
        "content": "def cli_delete_user(username: str):\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command('delete')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "cli_create_user",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cli_create_user",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cli_delete_user",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cli_delete_user",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/one_or_multiple/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create():\n    print(\"Creating user: Hiro Hamada\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "callback",
        "content": "def callback():\n    pass",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.callback()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/one_or_multiple/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create():\n    print(\"Creating user: Hiro Hamada\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "callback",
        "content": "def callback():\n    \"\"\"\n    Creates a single user Hiro Hamada.\n\n    In the next version it will create 5 more users.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.callback()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/options/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(\n    username: str,\n    force: bool = typer.Option(..., prompt=\"Are you sure you want to delete the user?\"),\n):\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")",
        "signature": {
          "args": [
            "username",
            "force"
          ],
          "defaults": [
            "typer.Option(..., prompt='Are you sure you want to delete the user?')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete_all",
        "content": "def delete_all(\n    force: bool = typer.Option(\n        ..., prompt=\"Are you sure you want to delete ALL users?\"\n    ),\n):\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": [
            "typer.Option(..., prompt='Are you sure you want to delete ALL users?')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "init",
        "content": "def init():\n    print(\"Initializing user database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "init",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "init",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/commands/options/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(\n    username: str,\n    force: Annotated[\n        bool, typer.Option(prompt=\"Are you sure you want to delete the user?\")\n    ],\n):\n    if force:\n        print(f\"Deleting user: {username}\")\n    else:\n        print(\"Operation cancelled\")",
        "signature": {
          "args": [
            "username",
            "force"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete_all",
        "content": "def delete_all(\n    force: Annotated[\n        bool, typer.Option(prompt=\"Are you sure you want to delete ALL users?\")\n    ],\n):\n    if force:\n        print(\"Deleting all users\")\n    else:\n        print(\"Operation cancelled\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "init",
        "content": "def init():\n    print(\"Initializing user database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "init",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "init",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/exceptions/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = \"morty\"):\n    print(name + 3)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'morty'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/exceptions/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(password: str):\n    print(password + 3)",
        "signature": {
          "args": [
            "password"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/exceptions/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = \"morty\"):\n    print(name + 3)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'morty'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/exceptions/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = \"morty\"):\n    print(name + 3)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'morty'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/first_steps/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    print(\"Hello World\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/first_steps/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/first_steps/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: str):\n    print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/first_steps/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: str, formal: bool = False):\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "formal"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/first_steps/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: str = \"\", formal: bool = False):\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "formal"
          ],
          "defaults": [
            "''",
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/first_steps/tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: str = \"\", formal: bool = False):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "formal"
          ],
          "defaults": [
            "''",
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/launch/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    print(\"Opening Typer's docs\")\n    typer.launch(\"https://typer.tiangolo.com\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "launch",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/launch/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    app_dir = typer.get_app_dir(APP_NAME)\n    app_dir_path = Path(app_dir)\n    app_dir_path.mkdir(parents=True, exist_ok=True)\n    config_path: Path = Path(app_dir) / \"config.json\"\n    if not config_path.is_file():\n        config_path.write_text('{\"version\": \"1.0.0\"}')\n    config_file_str = str(config_path)\n    print(\"Opening config directory\")\n    typer.launch(config_file_str, locate=True)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "get_app_dir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "mkdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "launch",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/arguments_with_multiple_values/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(files: List[Path], celebration: str):\n    for path in files:\n        if path.is_file():\n            print(f\"This file exists: {path.name}\")\n            print(celebration)",
        "signature": {
          "args": [
            "files",
            "celebration"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/arguments_with_multiple_values/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    names: Tuple[str, str, str] = typer.Argument(\n        (\"Harry\", \"Hermione\", \"Ron\"), help=\"Select 3 characters to play with\"\n    ),\n):\n    for name in names:\n        print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "names"
          ],
          "defaults": [
            "typer.Argument(('Harry', 'Hermione', 'Ron'), help='Select 3 characters to play with')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/arguments_with_multiple_values/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    names: Annotated[\n        Tuple[str, str, str], typer.Argument(help=\"Select 3 characters to play with\")\n    ] = (\"Harry\", \"Hermione\", \"Ron\"),\n):\n    for name in names:\n        print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "names"
          ],
          "defaults": [
            "('Harry', 'Hermione', 'Ron')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/multiple_options/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user: Optional[List[str]] = typer.Option(None)):\n    if not user:\n        print(f\"No provided users (raw input = {user})\")\n        raise typer.Abort()\n    for u in user:\n        print(f\"Processing user: {u}\")",
        "signature": {
          "args": [
            "user"
          ],
          "defaults": [
            "typer.Option(None)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/multiple_options/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user: Annotated[Optional[List[str]], typer.Option()] = None):\n    if not user:\n        print(f\"No provided users (raw input = {user})\")\n        raise typer.Abort()\n    for u in user:\n        print(f\"Processing user: {u}\")",
        "signature": {
          "args": [
            "user"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/multiple_options/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(number: List[float] = typer.Option([])):\n    print(f\"The sum is {sum(number)}\")",
        "signature": {
          "args": [
            "number"
          ],
          "defaults": [
            "typer.Option([])"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sum",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/multiple_options/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(number: Annotated[List[float], typer.Option()] = []):\n    print(f\"The sum is {sum(number)}\")",
        "signature": {
          "args": [
            "number"
          ],
          "defaults": [
            "[]"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sum",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/options_with_multiple_values/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user: Tuple[str, int, bool] = typer.Option((None, None, None))):\n    username, coins, is_wizard = user\n    if not username:\n        print(\"No user provided\")\n        raise typer.Abort()\n    print(f\"The username {username} has {coins} coins\")\n    if is_wizard:\n        print(\"And this user is a wizard!\")",
        "signature": {
          "args": [
            "user"
          ],
          "defaults": [
            "typer.Option((None, None, None))"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/multiple_values/options_with_multiple_values/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user: Annotated[Tuple[str, int, bool], typer.Option()] = (None, None, None)):\n    username, coins, is_wizard = user\n    if not username:\n        print(\"No user provided\")\n        raise typer.Abort()\n    print(f\"The username {username} has {coins} coins\")\n    if is_wizard:\n        print(\"And this user is a wizard!\")",
        "signature": {
          "args": [
            "user"
          ],
          "defaults": [
            "(None, None, None)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/one_file_per_command/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/one_file_per_command/main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "users",
        "type": "external"
      },
      {
        "module": "version",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/one_file_per_command/users/__init__.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "add",
        "type": "external"
      },
      {
        "module": "delete",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/one_file_per_command/users/add.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "add",
        "content": "def add(name: str):\n    print(f\"Adding user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "add",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/one_file_per_command/users/delete.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "delete",
        "content": "def delete(name: str):\n    print(f\"Deleting user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/one_file_per_command/version.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "version",
        "content": "def version():\n    print(\"My CLI Version 1.0\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "version",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "version",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/callback/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "name_callback",
        "content": "def name_callback(value: str):\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Optional[str] = typer.Option(default=None, callback=name_callback)):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(default=None, callback=name_callback)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/callback/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "name_callback",
        "content": "def name_callback(value: str):\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Annotated[Optional[str], typer.Option(callback=name_callback)] = None):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/callback/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "name_callback",
        "content": "def name_callback(value: str):\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Optional[str] = typer.Option(default=None, callback=name_callback)):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(default=None, callback=name_callback)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/callback/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "name_callback",
        "content": "def name_callback(value: str):\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Annotated[Optional[str], typer.Option(callback=name_callback)] = None):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/callback/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "name_callback",
        "content": "def name_callback(ctx: typer.Context, value: str):\n    if ctx.resilient_parsing:\n        return\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value",
        "signature": {
          "args": [
            "ctx",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Optional[str] = typer.Option(default=None, callback=name_callback)):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(default=None, callback=name_callback)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/callback/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "name_callback",
        "content": "def name_callback(ctx: typer.Context, value: str):\n    if ctx.resilient_parsing:\n        return\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value",
        "signature": {
          "args": [
            "ctx",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Annotated[Optional[str], typer.Option(callback=name_callback)] = None):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/callback/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "name_callback",
        "content": "def name_callback(ctx: typer.Context, param: typer.CallbackParam, value: str):\n    if ctx.resilient_parsing:\n        return\n    print(f\"Validating param: {param.name}\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value",
        "signature": {
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Optional[str] = typer.Option(default=None, callback=name_callback)):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(default=None, callback=name_callback)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/callback/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "name_callback",
        "content": "def name_callback(ctx: typer.Context, param: typer.CallbackParam, value: str):\n    if ctx.resilient_parsing:\n        return\n    print(f\"Validating param: {param.name}\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value",
        "signature": {
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: Annotated[Optional[str], typer.Option(callback=name_callback)] = None):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/help/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str,\n    lastname: str = typer.Option(\"\", help=\"Last name of person to greet.\"),\n    formal: bool = typer.Option(False, help=\"Say hi formally.\"),\n):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "formal"
          ],
          "defaults": [
            "typer.Option('', help='Last name of person to greet.')",
            "typer.Option(False, help='Say hi formally.')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/help/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str,\n    lastname: Annotated[str, typer.Option(help=\"Last name of person to greet.\")] = \"\",\n    formal: Annotated[bool, typer.Option(help=\"Say hi formally.\")] = False,\n):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "formal"
          ],
          "defaults": [
            "''",
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/help/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str,\n    lastname: str = typer.Option(\"\", help=\"Last name of person to greet.\"),\n    formal: bool = typer.Option(\n        False, help=\"Say hi formally.\", rich_help_panel=\"Customization and Utils\"\n    ),\n    debug: bool = typer.Option(\n        False, help=\"Enable debugging.\", rich_help_panel=\"Customization and Utils\"\n    ),\n):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "formal",
            "debug"
          ],
          "defaults": [
            "typer.Option('', help='Last name of person to greet.')",
            "typer.Option(False, help='Say hi formally.', rich_help_panel='Customization and Utils')",
            "typer.Option(False, help='Enable debugging.', rich_help_panel='Customization and Utils')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/help/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str,\n    lastname: Annotated[str, typer.Option(help=\"Last name of person to greet.\")] = \"\",\n    formal: Annotated[\n        bool,\n        typer.Option(\n            help=\"Say hi formally.\", rich_help_panel=\"Customization and Utils\"\n        ),\n    ] = False,\n    debug: Annotated[\n        bool,\n        typer.Option(\n            help=\"Enable debugging.\", rich_help_panel=\"Customization and Utils\"\n        ),\n    ] = False,\n):\n    \"\"\"\n    Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    if formal:\n        print(f\"Good day Ms. {name} {lastname}.\")\n    else:\n        print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "formal",
            "debug"
          ],
          "defaults": [
            "''",
            "False",
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/help/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(fullname: str = typer.Option(\"Wade Wilson\", show_default=False)):\n    print(f\"Hello {fullname}\")",
        "signature": {
          "args": [
            "fullname"
          ],
          "defaults": [
            "typer.Option('Wade Wilson', show_default=False)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/help/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(fullname: Annotated[str, typer.Option(show_default=False)] = \"Wade Wilson\"):\n    print(f\"Hello {fullname}\")",
        "signature": {
          "args": [
            "fullname"
          ],
          "defaults": [
            "'Wade Wilson'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/help/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    fullname: str = typer.Option(\n        \"Wade Wilson\", show_default=\"Deadpoolio the amazing's name\"\n    ),\n):\n    print(f\"Hello {fullname}\")",
        "signature": {
          "args": [
            "fullname"
          ],
          "defaults": [
            "typer.Option('Wade Wilson', show_default=\"Deadpoolio the amazing's name\")"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/help/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    fullname: Annotated[\n        str, typer.Option(show_default=\"Deadpoolio the amazing's name\")\n    ] = \"Wade Wilson\",\n):\n    print(f\"Hello {fullname}\")",
        "signature": {
          "args": [
            "fullname"
          ],
          "defaults": [
            "'Wade Wilson'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_name: str = typer.Option(..., \"--name\")):\n    print(f\"Hello {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": [
            "typer.Option(..., '--name')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_name: Annotated[str, typer.Option(\"--name\")]):\n    print(f\"Hello {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_name: str = typer.Option(..., \"--name\", \"-n\")):\n    print(f\"Hello {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": [
            "typer.Option(..., '--name', '-n')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_name: Annotated[str, typer.Option(\"--name\", \"-n\")]):\n    print(f\"Hello {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_name: str = typer.Option(..., \"-n\")):\n    print(f\"Hello {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": [
            "typer.Option(..., '-n')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_name: Annotated[str, typer.Option(\"-n\")]):\n    print(f\"Hello {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_name: str = typer.Option(..., \"--user-name\", \"-n\")):\n    print(f\"Hello {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": [
            "typer.Option(..., '--user-name', '-n')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_name: Annotated[str, typer.Option(\"--user-name\", \"-n\")]):\n    print(f\"Hello {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(..., \"--name\", \"-n\"),\n    formal: bool = typer.Option(False, \"--formal\", \"-f\"),\n):\n    if formal:\n        print(f\"Good day Ms. {name}.\")\n    else:\n        print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "formal"
          ],
          "defaults": [
            "typer.Option(..., '--name', '-n')",
            "typer.Option(False, '--formal', '-f')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/name/tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[str, typer.Option(\"--name\", \"-n\")],\n    formal: Annotated[bool, typer.Option(\"--formal\", \"-f\")] = False,\n):\n    if formal:\n        print(f\"Good day Ms. {name}.\")\n    else:\n        print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "formal"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/password/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str, email: str = typer.Option(..., prompt=True, confirmation_prompt=True)\n):\n    print(f\"Hello {name}, your email is {email}\")",
        "signature": {
          "args": [
            "name",
            "email"
          ],
          "defaults": [
            "typer.Option(..., prompt=True, confirmation_prompt=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/password/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str,\n    email: Annotated[str, typer.Option(prompt=True, confirmation_prompt=True)],\n):\n    print(f\"Hello {name}, your email is {email}\")",
        "signature": {
          "args": [
            "name",
            "email"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/password/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str,\n    password: str = typer.Option(\n        ..., prompt=True, confirmation_prompt=True, hide_input=True\n    ),\n):\n    print(f\"Hello {name}. Doing something very secure with password.\")\n    print(f\"...just kidding, here it is, very insecure: {password}\")",
        "signature": {
          "args": [
            "name",
            "password"
          ],
          "defaults": [
            "typer.Option(..., prompt=True, confirmation_prompt=True, hide_input=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/password/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str,\n    password: Annotated[\n        str, typer.Option(prompt=True, confirmation_prompt=True, hide_input=True)\n    ],\n):\n    print(f\"Hello {name}. Doing something very secure with password.\")\n    print(f\"...just kidding, here it is, very insecure: {password}\")",
        "signature": {
          "args": [
            "name",
            "password"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/prompt/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: str = typer.Option(..., prompt=True)):\n    print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname"
          ],
          "defaults": [
            "typer.Option(..., prompt=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/prompt/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: Annotated[str, typer.Option(prompt=True)]):\n    print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/prompt/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str, lastname: str = typer.Option(..., prompt=\"Please tell me your last name\")\n):\n    print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname"
          ],
          "defaults": [
            "typer.Option(..., prompt='Please tell me your last name')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/prompt/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str,\n    lastname: Annotated[str, typer.Option(prompt=\"Please tell me your last name\")],\n):\n    print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/prompt/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(project_name: str = typer.Option(..., prompt=True, confirmation_prompt=True)):\n    print(f\"Deleting project {project_name}\")",
        "signature": {
          "args": [
            "project_name"
          ],
          "defaults": [
            "typer.Option(..., prompt=True, confirmation_prompt=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/prompt/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    project_name: Annotated[str, typer.Option(prompt=True, confirmation_prompt=True)],\n):\n    print(f\"Deleting project {project_name}\")",
        "signature": {
          "args": [
            "project_name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/required/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: str = typer.Option()):\n    print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname"
          ],
          "defaults": [
            "typer.Option()"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/required/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: Annotated[str, typer.Option()]):\n    print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/required/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, lastname: str = typer.Option(default=...)):\n    print(f\"Hello {name} {lastname}\")",
        "signature": {
          "args": [
            "name",
            "lastname"
          ],
          "defaults": [
            "typer.Option(default=...)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/version/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "version_callback",
        "content": "def version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(\"World\"),\n    version: Optional[bool] = typer.Option(\n        None, \"--version\", callback=version_callback\n    ),\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "version"
          ],
          "defaults": [
            "typer.Option('World')",
            "typer.Option(None, '--version', callback=version_callback)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/version/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "version_callback",
        "content": "def version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[str, typer.Option()] = \"World\",\n    version: Annotated[\n        Optional[bool], typer.Option(\"--version\", callback=version_callback)\n    ] = None,\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "version"
          ],
          "defaults": [
            "'World'",
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/version/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "version_callback",
        "content": "def version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "name_callback",
        "content": "def name_callback(name: str):\n    if name != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(..., callback=name_callback),\n    version: Optional[bool] = typer.Option(\n        None, \"--version\", callback=version_callback\n    ),\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "version"
          ],
          "defaults": [
            "typer.Option(..., callback=name_callback)",
            "typer.Option(None, '--version', callback=version_callback)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/version/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "version_callback",
        "content": "def version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "name_callback",
        "content": "def name_callback(name: str):\n    if name != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[str, typer.Option(callback=name_callback)],\n    version: Annotated[\n        Optional[bool], typer.Option(\"--version\", callback=version_callback)\n    ] = None,\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "version"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/version/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "version_callback",
        "content": "def version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "name_callback",
        "content": "def name_callback(name: str):\n    if name != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return name",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(..., callback=name_callback),\n    version: Optional[bool] = typer.Option(\n        None, \"--version\", callback=version_callback, is_eager=True\n    ),\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "version"
          ],
          "defaults": [
            "typer.Option(..., callback=name_callback)",
            "typer.Option(None, '--version', callback=version_callback, is_eager=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options/version/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "version_callback",
        "content": "def version_callback(value: bool):\n    if value:\n        print(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "name_callback",
        "content": "def name_callback(name: str):\n    if name != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return name",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[str, typer.Option(callback=name_callback)],\n    version: Annotated[\n        Optional[bool],\n        typer.Option(\"--version\", callback=version_callback, is_eager=True),\n    ] = None,\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "version"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "version_callback",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "BadParameter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = typer.Option(\"World\", help=\"The name to say hi to.\")):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option('World', help='The name to say hi to.')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: Annotated[str, typer.Option(help=\"The name to say hi to.\")] = \"World\"):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name():\n    return [\"Camila\", \"Carlos\", \"Sebastian\"]",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option('World', help='The name to say hi to.', autocompletion=complete_name)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name():\n    return [\"Camila\", \"Carlos\", \"Sebastian\"]",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        str, typer.Option(help=\"The name to say hi to.\", autocompletion=complete_name)\n    ] = \"World\",\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(incomplete: str):\n    completion = []\n    for name in valid_names:\n        if name.startswith(incomplete):\n            completion.append(name)\n    return completion",
        "signature": {
          "args": [
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option('World', help='The name to say hi to.', autocompletion=complete_name)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(incomplete: str):\n    completion = []\n    for name in valid_names:\n        if name.startswith(incomplete):\n            completion.append(name)\n    return completion",
        "signature": {
          "args": [
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        str, typer.Option(help=\"The name to say hi to.\", autocompletion=complete_name)\n    ] = \"World\",\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(incomplete: str):\n    completion = []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            completion_item = (name, help_text)\n            completion.append(completion_item)\n    return completion",
        "signature": {
          "args": [
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option('World', help='The name to say hi to.', autocompletion=complete_name)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(incomplete: str):\n    completion = []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            completion_item = (name, help_text)\n            completion.append(completion_item)\n    return completion",
        "signature": {
          "args": [
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        str, typer.Option(help=\"The name to say hi to.\", autocompletion=complete_name)\n    ] = \"World\",\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(incomplete: str):\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            yield (name, help_text)",
        "signature": {
          "args": [
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option('World', help='The name to say hi to.', autocompletion=complete_name)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(incomplete: str):\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            yield (name, help_text)",
        "signature": {
          "args": [
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        str, typer.Option(help=\"The name to say hi to.\", autocompletion=complete_name)\n    ] = \"World\",\n):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: List[str] = typer.Option([\"World\"], help=\"The name to say hi to.\")):\n    for each_name in name:\n        print(f\"Hello {each_name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(['World'], help='The name to say hi to.')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial006_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[List[str], typer.Option(help=\"The name to say hi to.\")] = [\"World\"],\n):\n    for each_name in name:\n        print(f\"Hello {each_name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "['World']"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial007.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(ctx: typer.Context, incomplete: str):\n    names = ctx.params.get(\"name\") or []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)",
        "signature": {
          "args": [
            "ctx",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: List[str] = typer.Option(\n        [\"World\"], help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    for n in name:\n        print(f\"Hello {n}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(['World'], help='The name to say hi to.', autocompletion=complete_name)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial007_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(ctx: typer.Context, incomplete: str):\n    names = ctx.params.get(\"name\") or []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)",
        "signature": {
          "args": [
            "ctx",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        List[str],\n        typer.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = [\"World\"],\n):\n    for n in name:\n        print(f\"Hello {n}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "['World']"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial008.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.console",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(args: List[str], incomplete: str):\n    err_console.print(f\"{args}\")\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            yield (name, help_text)",
        "signature": {
          "args": [
            "args",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: List[str] = typer.Option(\n        [\"World\"], help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    for n in name:\n        print(f\"Hello {n}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(['World'], help='The name to say hi to.', autocompletion=complete_name)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial008_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.console",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(args: List[str], incomplete: str):\n    err_console.print(f\"{args}\")\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete):\n            yield (name, help_text)",
        "signature": {
          "args": [
            "args",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        List[str],\n        typer.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = [\"World\"],\n):\n    for n in name:\n        print(f\"Hello {n}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "['World']"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial009.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.console",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(ctx: typer.Context, args: List[str], incomplete: str):\n    err_console.print(f\"{args}\")\n    names = ctx.params.get(\"name\") or []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)",
        "signature": {
          "args": [
            "ctx",
            "args",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: List[str] = typer.Option(\n        [\"World\"], help=\"The name to say hi to.\", autocompletion=complete_name\n    ),\n):\n    for n in name:\n        print(f\"Hello {n}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(['World'], help='The name to say hi to.', autocompletion=complete_name)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/options_autocompletion/tutorial009_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.console",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete_name",
        "content": "def complete_name(ctx: typer.Context, args: List[str], incomplete: str):\n    err_console.print(f\"{args}\")\n    names = ctx.params.get(\"name\") or []\n    for name, help_text in valid_completion_items:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)",
        "signature": {
          "args": [
            "ctx",
            "args",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    name: Annotated[\n        List[str],\n        typer.Option(help=\"The name to say hi to.\", autocompletion=complete_name),\n    ] = [\"World\"],\n):\n    for n in name:\n        print(f\"Hello {n}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "['World']"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete_name",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(force: bool = typer.Option(False, \"--force\")):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": [
            "typer.Option(False, '--force')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(force: Annotated[bool, typer.Option(\"--force\")] = False):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(accept: Optional[bool] = typer.Option(None, \"--accept/--reject\")):\n    if accept is None:\n        print(\"I don't know what you want yet\")\n    elif accept:\n        print(\"Accepting!\")\n    else:\n        print(\"Rejecting!\")",
        "signature": {
          "args": [
            "accept"
          ],
          "defaults": [
            "typer.Option(None, '--accept/--reject')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(accept: Annotated[Optional[bool], typer.Option(\"--accept/--reject\")] = None):\n    if accept is None:\n        print(\"I don't know what you want yet\")\n    elif accept:\n        print(\"Accepting!\")\n    else:\n        print(\"Rejecting!\")",
        "signature": {
          "args": [
            "accept"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(force: bool = typer.Option(False, \"--force/--no-force\", \"-f/-F\")):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": [
            "typer.Option(False, '--force/--no-force', '-f/-F')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(force: Annotated[bool, typer.Option(\"--force/--no-force\", \"-f/-F\")] = False):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(in_prod: bool = typer.Option(True, \" /--demo\", \" /-d\")):\n    if in_prod:\n        print(\"Running in production\")\n    else:\n        print(\"Running demo\")",
        "signature": {
          "args": [
            "in_prod"
          ],
          "defaults": [
            "typer.Option(True, ' /--demo', ' /-d')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/bool/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(in_prod: Annotated[bool, typer.Option(\" /--demo\", \" /-d\")] = True):\n    if in_prod:\n        print(\"Running in production\")\n    else:\n        print(\"Running demo\")",
        "signature": {
          "args": [
            "in_prod"
          ],
          "defaults": [
            "True"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/custom_types/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/custom_types/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "CustomClass",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self, value: str):\n        self.value = value",
            "signature": {
              "args": [
                "self",
                "value"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__str__",
            "content": "    def __str__(self):\n        return f\"<CustomClass: value={self.value}>\"",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      }
    ],
    "functions": [
      {
        "name": "parse_custom_class",
        "content": "def parse_custom_class(value: str):\n    return CustomClass(value * 2)",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    custom_arg: CustomClass = typer.Argument(parser=parse_custom_class),\n    custom_opt: CustomClass = typer.Option(\"Foo\", parser=parse_custom_class),\n):\n    print(f\"custom_arg is {custom_arg}\")\n    print(f\"--custom-opt is {custom_opt}\")",
        "signature": {
          "args": [
            "custom_arg",
            "custom_opt"
          ],
          "defaults": [
            "typer.Argument(parser=parse_custom_class)",
            "typer.Option('Foo', parser=parse_custom_class)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "parse_custom_class",
        "caller_class": null,
        "called_function": "CustomClass",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(self, value: str):\n        self.value = value",
        "signature": {
          "args": [
            "self",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__str__",
        "content": "    def __str__(self):\n        return f\"<CustomClass: value={self.value}>\"",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "docs_src/parameter_types/custom_types/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "CustomClass",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self, value: str):\n        self.value = value",
            "signature": {
              "args": [
                "self",
                "value"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__str__",
            "content": "    def __str__(self):\n        return f\"<CustomClass: value={self.value}>\"",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      }
    ],
    "functions": [
      {
        "name": "parse_custom_class",
        "content": "def parse_custom_class(value: str):\n    return CustomClass(value * 2)",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(\n    custom_arg: Annotated[CustomClass, typer.Argument(parser=parse_custom_class)],\n    custom_opt: Annotated[CustomClass, typer.Option(parser=parse_custom_class)] = \"Foo\",\n):\n    print(f\"custom_arg is {custom_arg}\")\n    print(f\"--custom-opt is {custom_opt}\")",
        "signature": {
          "args": [
            "custom_arg",
            "custom_opt"
          ],
          "defaults": [
            "'Foo'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "parse_custom_class",
        "caller_class": null,
        "called_function": "CustomClass",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(self, value: str):\n        self.value = value",
        "signature": {
          "args": [
            "self",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__str__",
        "content": "    def __str__(self):\n        return f\"<CustomClass: value={self.value}>\"",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "docs_src/parameter_types/custom_types/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "CustomClass",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self, value: str):\n        self.value = value",
            "signature": {
              "args": [
                "self",
                "value"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__repr__",
            "content": "    def __repr__(self):\n        return f\"<CustomClass: value={self.value}>\"",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "CustomClassParser",
        "methods": [
          {
            "name": "convert",
            "content": "    def convert(self, value, param, ctx):\n        return CustomClass(value * 3)",
            "signature": {
              "args": [
                "self",
                "value",
                "param",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.ParamType"
        ]
      }
    ],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    custom_arg: CustomClass = typer.Argument(click_type=CustomClassParser()),\n    custom_opt: CustomClass = typer.Option(\"Foo\", click_type=CustomClassParser()),\n):\n    print(f\"custom_arg is {custom_arg}\")\n    print(f\"--custom-opt is {custom_opt}\")",
        "signature": {
          "args": [
            "custom_arg",
            "custom_opt"
          ],
          "defaults": [
            "typer.Argument(click_type=CustomClassParser())",
            "typer.Option('Foo', click_type=CustomClassParser())"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "convert",
        "caller_class": "CustomClassParser",
        "called_function": "CustomClass",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "CustomClassParser",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "CustomClassParser",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(self, value: str):\n        self.value = value",
        "signature": {
          "args": [
            "self",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__repr__",
        "content": "    def __repr__(self):\n        return f\"<CustomClass: value={self.value}>\"",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "convert",
        "content": "    def convert(self, value, param, ctx):\n        return CustomClass(value * 3)",
        "signature": {
          "args": [
            "self",
            "value",
            "param",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "docs_src/parameter_types/custom_types/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "CustomClass",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self, value: str):\n        self.value = value",
            "signature": {
              "args": [
                "self",
                "value"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__repr__",
            "content": "    def __repr__(self):\n        return f\"<CustomClass: value={self.value}>\"",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "CustomClassParser",
        "methods": [
          {
            "name": "convert",
            "content": "    def convert(self, value, param, ctx):\n        return CustomClass(value * 3)",
            "signature": {
              "args": [
                "self",
                "value",
                "param",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.ParamType"
        ]
      }
    ],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    custom_arg: Annotated[CustomClass, typer.Argument(click_type=CustomClassParser())],\n    custom_opt: Annotated[\n        CustomClass, typer.Option(click_type=CustomClassParser())\n    ] = \"Foo\",\n):\n    print(f\"custom_arg is {custom_arg}\")\n    print(f\"--custom-opt is {custom_opt}\")",
        "signature": {
          "args": [
            "custom_arg",
            "custom_opt"
          ],
          "defaults": [
            "'Foo'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "convert",
        "caller_class": "CustomClassParser",
        "called_function": "CustomClass",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "CustomClassParser",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "CustomClassParser",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(self, value: str):\n        self.value = value",
        "signature": {
          "args": [
            "self",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__repr__",
        "content": "    def __repr__(self):\n        return f\"<CustomClass: value={self.value}>\"",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "convert",
        "content": "    def convert(self, value, param, ctx):\n        return CustomClass(value * 3)",
        "signature": {
          "args": [
            "self",
            "value",
            "param",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "docs_src/parameter_types/datetime/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/datetime/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "datetime",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(birth: datetime):\n    print(f\"Interesting day to be born: {birth}\")\n    print(f\"Birth hour: {birth.hour}\")",
        "signature": {
          "args": [
            "birth"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/datetime/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "datetime",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    launch_date: datetime = typer.Argument(\n        ..., formats=[\"%Y-%m-%d\", \"%Y-%m-%dT%H:%M:%S\", \"%Y-%m-%d %H:%M:%S\", \"%m/%d/%Y\"]\n    ),\n):\n    print(f\"Launch will be at: {launch_date}\")",
        "signature": {
          "args": [
            "launch_date"
          ],
          "defaults": [
            "typer.Argument(..., formats=['%Y-%m-%d', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%d %H:%M:%S', '%m/%d/%Y'])"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/datetime/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "datetime",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    launch_date: Annotated[\n        datetime,\n        typer.Argument(\n            formats=[\"%Y-%m-%d\", \"%Y-%m-%dT%H:%M:%S\", \"%Y-%m-%d %H:%M:%S\", \"%m/%d/%Y\"]\n        ),\n    ],\n):\n    print(f\"Launch will be at: {launch_date}\")",
        "signature": {
          "args": [
            "launch_date"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/enum/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/enum/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "NeuralNetwork",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "str",
          "Enum"
        ]
      }
    ],
    "functions": [
      {
        "name": "main",
        "content": "def main(network: NeuralNetwork = NeuralNetwork.simple):\n    print(f\"Training neural network of type: {network.value}\")",
        "signature": {
          "args": [
            "network"
          ],
          "defaults": [
            "NeuralNetwork.simple"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/enum/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "NeuralNetwork",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "str",
          "Enum"
        ]
      }
    ],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    network: NeuralNetwork = typer.Option(NeuralNetwork.simple, case_sensitive=False),\n):\n    print(f\"Training neural network of type: {network.value}\")",
        "signature": {
          "args": [
            "network"
          ],
          "defaults": [
            "typer.Option(NeuralNetwork.simple, case_sensitive=False)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/enum/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "NeuralNetwork",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "str",
          "Enum"
        ]
      }
    ],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    network: Annotated[\n        NeuralNetwork, typer.Option(case_sensitive=False)\n    ] = NeuralNetwork.simple,\n):\n    print(f\"Training neural network of type: {network.value}\")",
        "signature": {
          "args": [
            "network"
          ],
          "defaults": [
            "NeuralNetwork.simple"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/enum/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "Food",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "str",
          "Enum"
        ]
      }
    ],
    "functions": [
      {
        "name": "main",
        "content": "def main(groceries: List[Food] = typer.Option([Food.food_1, Food.food_3])):\n    print(f\"Buying groceries: {', '.join([f.value for f in groceries])}\")",
        "signature": {
          "args": [
            "groceries"
          ],
          "defaults": [
            "typer.Option([Food.food_1, Food.food_3])"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/enum/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "Food",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "str",
          "Enum"
        ]
      }
    ],
    "functions": [
      {
        "name": "main",
        "content": "def main(groceries: Annotated[List[Food], typer.Option()] = [Food.food_1, Food.food_3]):\n    print(f\"Buying groceries: {', '.join([f.value for f in groceries])}\")",
        "signature": {
          "args": [
            "groceries"
          ],
          "defaults": [
            "[Food.food_1, Food.food_3]"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/enum/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(network: Literal[\"simple\", \"conv\", \"lstm\"] = typer.Option(\"simple\")):\n    print(f\"Training neural network of type: {network}\")",
        "signature": {
          "args": [
            "network"
          ],
          "defaults": [
            "typer.Option('simple')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/enum/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    network: Annotated[Literal[\"simple\", \"conv\", \"lstm\"], typer.Option()] = \"simple\",\n):\n    print(f\"Training neural network of type: {network}\")",
        "signature": {
          "args": [
            "network"
          ],
          "defaults": [
            "'simple'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(config: typer.FileText = typer.Option(...)):\n    for line in config:\n        print(f\"Config line: {line}\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": [
            "typer.Option(...)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(config: Annotated[typer.FileText, typer.Option()]):\n    for line in config:\n        print(f\"Config line: {line}\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(config: typer.FileTextWrite = typer.Option(...)):\n    config.write(\"Some config written by the app\")\n    print(\"Config written\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": [
            "typer.Option(...)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(config: Annotated[typer.FileTextWrite, typer.Option()]):\n    config.write(\"Some config written by the app\")\n    print(\"Config written\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(file: typer.FileBinaryRead = typer.Option(...)):\n    processed_total = 0\n    for bytes_chunk in file:\n        # Process the bytes in bytes_chunk\n        processed_total += len(bytes_chunk)\n        print(f\"Processed bytes total: {processed_total}\")",
        "signature": {
          "args": [
            "file"
          ],
          "defaults": [
            "typer.Option(...)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(file: Annotated[typer.FileBinaryRead, typer.Option()]):\n    processed_total = 0\n    for bytes_chunk in file:\n        # Process the bytes in bytes_chunk\n        processed_total += len(bytes_chunk)\n        print(f\"Processed bytes total: {processed_total}\")",
        "signature": {
          "args": [
            "file"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(file: typer.FileBinaryWrite = typer.Option(...)):\n    first_line_str = \"some settings\\n\"\n    # You cannot write str directly to a binary file, you have to encode it to get bytes\n    first_line_bytes = first_line_str.encode(\"utf-8\")\n    # Then you can write the bytes\n    file.write(first_line_bytes)\n    # This is already bytes, it starts with b\"\n    second_line = b\"la cig\\xc3\\xbce\\xc3\\xb1a trae al ni\\xc3\\xb1o\"\n    file.write(second_line)\n    print(\"Binary file written\")",
        "signature": {
          "args": [
            "file"
          ],
          "defaults": [
            "typer.Option(...)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "encode",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(file: Annotated[typer.FileBinaryWrite, typer.Option()]):\n    first_line_str = \"some settings\\n\"\n    # You cannot write str directly to a binary file, you have to encode it to get bytes\n    first_line_bytes = first_line_str.encode(\"utf-8\")\n    # Then you can write the bytes\n    file.write(first_line_bytes)\n    # This is already bytes, it starts with b\"\n    second_line = b\"la cig\\xc3\\xbce\\xc3\\xb1a trae al ni\\xc3\\xb1o\"\n    file.write(second_line)\n    print(\"Binary file written\")",
        "signature": {
          "args": [
            "file"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "encode",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(config: typer.FileText = typer.Option(..., mode=\"a\")):\n    config.write(\"This is a single line\\n\")\n    print(\"Config line written\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": [
            "typer.Option(..., mode='a')"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/file/tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(config: Annotated[typer.FileText, typer.Option(mode=\"a\")]):\n    config.write(\"This is a single line\\n\")\n    print(\"Config line written\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/index/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/index/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, age: int = 20, height_meters: float = 1.89, female: bool = True):\n    print(f\"NAME is {name}, of type: {type(name)}\")\n    print(f\"--age is {age}, of type: {type(age)}\")\n    print(f\"--height-meters is {height_meters}, of type: {type(height_meters)}\")\n    print(f\"--female is {female}, of type: {type(female)}\")",
        "signature": {
          "args": [
            "name",
            "age",
            "height_meters",
            "female"
          ],
          "defaults": [
            "20",
            "1.89",
            "True"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/number/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/number/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    id: int = typer.Argument(..., min=0, max=1000),\n    age: int = typer.Option(20, min=18),\n    score: float = typer.Option(0, max=100),\n):\n    print(f\"ID is {id}\")\n    print(f\"--age is {age}\")\n    print(f\"--score is {score}\")",
        "signature": {
          "args": [
            "id",
            "age",
            "score"
          ],
          "defaults": [
            "typer.Argument(..., min=0, max=1000)",
            "typer.Option(20, min=18)",
            "typer.Option(0, max=100)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/number/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    id: Annotated[int, typer.Argument(min=0, max=1000)],\n    age: Annotated[int, typer.Option(min=18)] = 20,\n    score: Annotated[float, typer.Option(max=100)] = 0,\n):\n    print(f\"ID is {id}\")\n    print(f\"--age is {age}\")\n    print(f\"--score is {score}\")",
        "signature": {
          "args": [
            "id",
            "age",
            "score"
          ],
          "defaults": [
            "20",
            "0"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/number/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    id: int = typer.Argument(..., min=0, max=1000),\n    rank: int = typer.Option(0, max=10, clamp=True),\n    score: float = typer.Option(0, min=0, max=100, clamp=True),\n):\n    print(f\"ID is {id}\")\n    print(f\"--rank is {rank}\")\n    print(f\"--score is {score}\")",
        "signature": {
          "args": [
            "id",
            "rank",
            "score"
          ],
          "defaults": [
            "typer.Argument(..., min=0, max=1000)",
            "typer.Option(0, max=10, clamp=True)",
            "typer.Option(0, min=0, max=100, clamp=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/number/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    id: Annotated[int, typer.Argument(min=0, max=1000)],\n    rank: Annotated[int, typer.Option(max=10, clamp=True)] = 0,\n    score: Annotated[float, typer.Option(min=0, max=100, clamp=True)] = 0,\n):\n    print(f\"ID is {id}\")\n    print(f\"--rank is {rank}\")\n    print(f\"--score is {score}\")",
        "signature": {
          "args": [
            "id",
            "rank",
            "score"
          ],
          "defaults": [
            "0",
            "0"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/number/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(verbose: int = typer.Option(0, \"--verbose\", \"-v\", count=True)):\n    print(f\"Verbose level is {verbose}\")",
        "signature": {
          "args": [
            "verbose"
          ],
          "defaults": [
            "typer.Option(0, '--verbose', '-v', count=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/number/tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(verbose: Annotated[int, typer.Option(\"--verbose\", \"-v\", count=True)] = 0):\n    print(f\"Verbose level is {verbose}\")",
        "signature": {
          "args": [
            "verbose"
          ],
          "defaults": [
            "0"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/path/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/path/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(config: Optional[Path] = typer.Option(None)):\n    if config is None:\n        print(\"No config file\")\n        raise typer.Abort()\n    if config.is_file():\n        text = config.read_text()\n        print(f\"Config file contents: {text}\")\n    elif config.is_dir():\n        print(\"Config is a directory, will use all its config files\")\n    elif not config.exists():\n        print(\"The config doesn't exist\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": [
            "typer.Option(None)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "is_dir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/path/tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(config: Annotated[Optional[Path], typer.Option()] = None):\n    if config is None:\n        print(\"No config file\")\n        raise typer.Abort()\n    if config.is_file():\n        text = config.read_text()\n        print(f\"Config file contents: {text}\")\n    elif config.is_dir():\n        print(\"Config is a directory, will use all its config files\")\n    elif not config.exists():\n        print(\"The config doesn't exist\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "is_dir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/path/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    config: Path = typer.Option(\n        ...,\n        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        writable=False,\n        readable=True,\n        resolve_path=True,\n    ),\n):\n    text = config.read_text()\n    print(f\"Config file contents: {text}\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": [
            "typer.Option(..., exists=True, file_okay=True, dir_okay=False, writable=False, readable=True, resolve_path=True)"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/path/tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    config: Annotated[\n        Path,\n        typer.Option(\n            exists=True,\n            file_okay=True,\n            dir_okay=False,\n            writable=False,\n            readable=True,\n            resolve_path=True,\n        ),\n    ],\n):\n    text = config.read_text()\n    print(f\"Config file contents: {text}\")",
        "signature": {
          "args": [
            "config"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/uuid/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/parameter_types/uuid/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "uuid",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(user_id: UUID):\n    print(f\"USER_ID is {user_id}\")\n    print(f\"UUID version is: {user_id.version}\")",
        "signature": {
          "args": [
            "user_id"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/printing/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    print(\"Here's the data\")\n    print(data)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/printing/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    print(\"[bold red]Alert![/bold red] [green]Portal gun[/green] shooting! :boom:\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/printing/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.console",
        "type": "external"
      },
      {
        "module": "rich.table",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    table = Table(\"Name\", \"Item\")\n    table.add_row(\"Rick\", \"Portal Gun\")\n    table.add_row(\"Morty\", \"Plumbus\")\n    console.print(table)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Table",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "add_row",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "add_row",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/printing/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.console",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    err_console.print(\"Here is something written to standard error\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/printing/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(good: bool = True):\n    message_start = \"everything is \"\n    if good:\n        ending = typer.style(\"good\", fg=typer.colors.GREEN, bold=True)\n    else:\n        ending = typer.style(\"bad\", fg=typer.colors.WHITE, bg=typer.colors.RED)\n    message = message_start + ending\n    typer.echo(message)",
        "signature": {
          "args": [
            "good"
          ],
          "defaults": [
            "True"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "style",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "style",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/printing/tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str):\n    typer.secho(f\"Welcome here {name}\", fg=typer.colors.MAGENTA)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "secho",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/progressbar/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "time",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.progress",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    total = 0\n    for value in track(range(100), description=\"Processing...\"):\n        # Fake processing time\n        time.sleep(0.01)\n        total += 1\n    print(f\"Processed {total} things.\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "track",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sleep",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/progressbar/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "time",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.progress",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    with Progress(\n        SpinnerColumn(),\n        TextColumn(\"[progress.description]{task.description}\"),\n        transient=True,\n    ) as progress:\n        progress.add_task(description=\"Processing...\", total=None)\n        progress.add_task(description=\"Preparing...\", total=None)\n        time.sleep(5)\n    print(\"Done!\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Progress",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "SpinnerColumn",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "TextColumn",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "add_task",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "add_task",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sleep",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/progressbar/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "time",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    total = 0\n    with typer.progressbar(range(100)) as progress:\n        for value in progress:\n            # Fake processing time\n            time.sleep(0.01)\n            total += 1\n    print(f\"Processed {total} things.\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "progressbar",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sleep",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/progressbar/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "time",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "iterate_user_ids",
        "content": "def iterate_user_ids():\n    # Let's imagine this is a web API, not a range()\n    for i in range(100):\n        yield i",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main():\n    total = 0\n    with typer.progressbar(iterate_user_ids(), length=100) as progress:\n        for value in progress:\n            # Fake processing time\n            time.sleep(0.01)\n            total += 1\n    print(f\"Processed {total} user IDs.\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "iterate_user_ids",
        "caller_class": null,
        "called_function": "range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "progressbar",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "iterate_user_ids",
        "called_function_files": [
          "docs_src/progressbar/tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sleep",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/progressbar/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "time",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    total = 0\n    with typer.progressbar(range(100), label=\"Processing\") as progress:\n        for value in progress:\n            # Fake processing time\n            time.sleep(0.01)\n            total += 1\n    print(f\"Processed {total} things.\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "progressbar",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sleep",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/progressbar/tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "time",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    total = 1000\n    with typer.progressbar(length=total) as progress:\n        for batch in range(4):\n            # Fake processing time\n            time.sleep(1)\n            # Increment by 250 on each loop iteration\n            # (it will take 4 seconds to reach 1000)\n            progress.update(250)\n    print(f\"Processed {total} things in batches.\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "progressbar",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sleep",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "update",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/prompt/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    person_name = typer.prompt(\"What's your name?\")\n    print(f\"Hello {person_name}\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "prompt",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/prompt/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    delete = typer.confirm(\"Are you sure you want to delete it?\")\n    if not delete:\n        print(\"Not deleting\")\n        raise typer.Abort()\n    print(\"Deleting it!\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "confirm",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/prompt/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    delete = typer.confirm(\"Are you sure you want to delete it?\", abort=True)\n    print(\"Deleting it!\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "confirm",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/prompt/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "rich.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    name = Prompt.ask(\"Enter your name :sunglasses:\")\n    print(f\"Hey there {name}!\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "ask",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/callback_override/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "users_callback",
        "content": "def users_callback():\n    print(\"Running a users command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "users_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "users_callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/callback_override/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "users_callback",
        "content": "def users_callback():\n    print(\"Running a users command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "users_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/callback_override/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "default_callback",
        "content": "def default_callback():\n    print(\"Running a users command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "user_callback",
        "content": "def user_callback():\n    print(\"Callback override, running users command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "default_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "user_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "user_callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/callback_override/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "default_callback",
        "content": "def default_callback():\n    print(\"Running a users command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "callback_for_add_typer",
        "content": "def callback_for_add_typer():\n    print(\"I have the high land! Running users command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "user_callback",
        "content": "def user_callback():\n    print(\"Callback override, running users command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "default_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback_for_add_typer",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "user_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "user_callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/name_help/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/name_help/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "users",
        "content": "def users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "users",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/name_help/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "users",
        "content": "def users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/name_help/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "old_callback",
        "content": "def old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "users",
        "content": "def users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "users",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/name_help/tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "old_callback",
        "content": "def old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "new_users",
        "content": "def new_users():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "users",
        "content": "def users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "users",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/name_help/tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "old_callback",
        "content": "def old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "new_users",
        "content": "def new_users():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "users",
        "content": "def users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback()"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "users",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/name_help/tutorial007.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "old_callback",
        "content": "def old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "new_users",
        "content": "def new_users():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "users",
        "content": "def users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback(help='Help from callback for users.')"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "users",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/name_help/tutorial008.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "old_callback",
        "content": "def old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "new_users",
        "content": "def new_users():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "users",
        "content": "def users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "users_app.callback(help='Help from callback for users.')"
        ]
      },
      {
        "name": "create",
        "content": "def create(name: str):\n    print(f\"Creating user: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "users",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial001/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial001/items.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(item: str):\n    print(f\"Creating item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(item: str):\n    print(f\"Deleting item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "sell",
        "content": "def sell(item: str):\n    print(f\"Selling item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sell",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sell",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial001/main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "items",
        "type": "external"
      },
      {
        "module": "users",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial001/users.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(user_name: str):\n    print(f\"Creating user: {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial002/main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "items_create",
        "content": "def items_create(item: str):\n    print(f\"Creating item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "items_app.command('create')"
        ]
      },
      {
        "name": "items_delete",
        "content": "def items_delete(item: str):\n    print(f\"Deleting item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "items_app.command('delete')"
        ]
      },
      {
        "name": "items_sell",
        "content": "def items_sell(item: str):\n    print(f\"Selling item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "items_app.command('sell')"
        ]
      },
      {
        "name": "users_create",
        "content": "def users_create(user_name: str):\n    print(f\"Creating user: {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command('create')"
        ]
      },
      {
        "name": "users_delete",
        "content": "def users_delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": [
          "users_app.command('delete')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "items_create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "items_create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "items_delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "items_delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "items_sell",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "items_sell",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "users_create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "users_create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "users_delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "users_delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial003/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial003/items.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(item: str):\n    print(f\"Creating item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(item: str):\n    print(f\"Deleting item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "sell",
        "content": "def sell(item: str):\n    print(f\"Selling item: {item}\")",
        "signature": {
          "args": [
            "item"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sell",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sell",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial003/lands.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "reigns",
        "type": "external"
      },
      {
        "module": "towns",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial003/main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "items",
        "type": "external"
      },
      {
        "module": "lands",
        "type": "external"
      },
      {
        "module": "users",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial003/reigns.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "conquer",
        "content": "def conquer(name: str):\n    print(f\"Conquering reign: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "destroy",
        "content": "def destroy(name: str):\n    print(f\"Destroying reign: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "conquer",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "conquer",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "destroy",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "destroy",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial003/towns.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "found",
        "content": "def found(name: str):\n    print(f\"Founding town: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "burn",
        "content": "def burn(name: str):\n    print(f\"Burning town: {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "found",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "found",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "burn",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "burn",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/subcommands/tutorial003/users.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(user_name: str):\n    print(f\"Creating user: {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(user_name: str):\n    print(f\"Deleting user: {user_name}\")",
        "signature": {
          "args": [
            "user_name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/terminating/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "maybe_create_user",
        "content": "def maybe_create_user(username: str):\n    if username in existing_usernames:\n        print(\"The user already exists\")\n        raise typer.Exit()\n    else:\n        print(f\"User created: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "send_new_user_notification",
        "content": "def send_new_user_notification(username: str):\n    # Somehow send a notification here for the new user, maybe an email\n    print(f\"Notification sent for new user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(username: str):\n    maybe_create_user(username=username)\n    send_new_user_notification(username=username)",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "maybe_create_user",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_create_user",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_create_user",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "send_new_user_notification",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "maybe_create_user",
        "called_function_files": [
          "docs_src/terminating/tutorial001.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "send_new_user_notification",
        "called_function_files": [
          "docs_src/terminating/tutorial001.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/terminating/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(username: str):\n    if username == \"root\":\n        print(\"The root user is reserved\")\n        raise typer.Exit(code=1)\n    print(f\"New user created: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/terminating/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(username: str):\n    if username == \"root\":\n        print(\"The root user is reserved\")\n        raise typer.Abort()\n    print(f\"New user created: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/testing/app01/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/testing/app01/main.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, city: Optional[str] = None):\n    print(f\"Hello {name}\")\n    if city:\n        print(f\"Let's have a coffee in {city}\")",
        "signature": {
          "args": [
            "name",
            "city"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/testing/app01/test_main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app",
        "content": "def test_app():\n    result = runner.invoke(app, [\"Camila\", \"--city\", \"Berlin\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output\n    assert \"Let's have a coffee in Berlin\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/testing/app02/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/testing/app02/main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, email: str = typer.Option(..., prompt=True)):\n    print(f\"Hello {name}, your email is: {email}\")",
        "signature": {
          "args": [
            "name",
            "email"
          ],
          "defaults": [
            "typer.Option(..., prompt=True)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/testing/app02/test_main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app",
        "content": "def test_app():\n    result = runner.invoke(app, [\"Camila\"], input=\"camila@example.com\\n\")\n    assert result.exit_code == 0\n    assert \"Hello Camila, your email is: camila@example.com\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/testing/app02_an/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/testing/app02_an/main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str, email: Annotated[str, typer.Option(prompt=True)]):\n    print(f\"Hello {name}, your email is: {email}\")",
        "signature": {
          "args": [
            "name",
            "email"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/testing/app02_an/test_main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app",
        "content": "def test_app():\n    result = runner.invoke(app, [\"Camila\"], input=\"camila@example.com\\n\")\n    assert result.exit_code == 0\n    assert \"Hello Camila, your email is: camila@example.com\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/testing/app03/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "docs_src/testing/app03/main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = \"World\"):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/testing/app03/test_main.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app",
        "content": "def test_app():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/using_click/tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "click",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "hello",
        "content": "def hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for x in range(count):\n        click.echo(f\"Hello {name}!\")",
        "signature": {
          "args": [
            "count",
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "click.command()",
          "click.option('--count', default=1, help='Number of greetings.')",
          "click.option('--name', prompt='Your name', help='The person to greet.')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "option",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "option",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/using_click/tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "click",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "cli",
        "content": "def cli():\n    pass",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "click.group()"
        ]
      },
      {
        "name": "initdb",
        "content": "def initdb():\n    click.echo(\"Initialized the database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "click.command()"
        ]
      },
      {
        "name": "dropdb",
        "content": "def dropdb():\n    click.echo(\"Dropped the database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "click.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "cli",
        "caller_class": null,
        "called_function": "group",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "initdb",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "initdb",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "dropdb",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "dropdb",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/using_click/tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "top",
        "content": "def top():\n    \"\"\"\n    Top level command, form Typer\n    \"\"\"\n    print(\"The Typer app is at the top level\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "callback",
        "content": "def callback():\n    \"\"\"\n    Typer app, including Click subapp\n    \"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.callback()"
        ]
      },
      {
        "name": "hello",
        "content": "def hello(name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    click.echo(f\"Hello {name}!\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "click.command()",
          "click.option('--name', prompt='Your name', help='The person to greet.')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "top",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "top",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "option",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "docs_src/using_click/tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "cli",
        "content": "def cli():\n    pass",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "click.group()"
        ]
      },
      {
        "name": "initdb",
        "content": "def initdb():\n    click.echo(\"Initialized the database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "cli.command()"
        ]
      },
      {
        "name": "dropdb",
        "content": "def dropdb():\n    click.echo(\"Dropped the database\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "cli.command()"
        ]
      },
      {
        "name": "sub",
        "content": "def sub():\n    \"\"\"\n    A single-command Typer sub app\n    \"\"\"\n    print(\"Typer is now below Click, the Click app is the top level\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "cli",
        "caller_class": null,
        "called_function": "group",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "initdb",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "initdb",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "dropdb",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "dropdb",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sub",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sub",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "mkdocs.insiders.yml",
    "type": "yaml",
    "content": {
      "plugins": {
        "typeset": null
      },
      "markdown_extensions": {
        "material.extensions.preview": {
          "targets": {
            "include": [
              "*"
            ]
          }
        }
      }
    }
  },
  {
    "file": "mkdocs.no-insiders.yml",
    "type": "yaml",
    "content": null
  },
  {
    "file": "pdm_build.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "pdm.backend.hooks",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "pdm_build_initialize",
        "content": "def pdm_build_initialize(context: Context):\n    metadata = context.config.metadata\n    # Get main version\n    version = metadata[\"version\"]\n    # Get package names to keep in sync with the same main version\n    sync_dependencies: List[str] = context.config.data[\"tool\"][\"tiangolo\"][\n        \"_internal-slim-build\"\n    ][\"sync-dependencies\"]\n    # Get custom config for the current package, from the env var\n    config: Dict[str, Any] = context.config.data[\"tool\"][\"tiangolo\"][\n        \"_internal-slim-build\"\n    ][\"packages\"][TIANGOLO_BUILD_PACKAGE]\n    project_config: Dict[str, Any] = config[\"project\"]\n    # Get main optional dependencies, extras\n    optional_dependencies: Dict[str, List[str]] = metadata.get(\n        \"optional-dependencies\", {}\n    )\n    # Get custom optional dependencies name to always include in this (non-slim) package\n    include_optional_dependencies: List[str] = config.get(\n        \"include-optional-dependencies\", []\n    )\n    # Override main [project] configs with custom configs for this package\n    for key, value in project_config.items():\n        metadata[key] = value\n    # Get custom build config for the current package\n    build_config: Dict[str, Any] = (\n        config.get(\"tool\", {}).get(\"pdm\", {}).get(\"build\", {})\n    )\n    # Override PDM build config with custom build config for this package\n    for key, value in build_config.items():\n        context.config.build_config[key] = value\n    # Get main dependencies\n    dependencies: List[str] = metadata.get(\"dependencies\", [])\n    # Add optional dependencies to the default dependencies for this (non-slim) package\n    for include_optional in include_optional_dependencies:\n        optional_dependencies_group = optional_dependencies.get(include_optional, [])\n        dependencies.extend(optional_dependencies_group)\n    # Sync versions in dependencies\n    new_dependencies = []\n    for dep in dependencies:\n        if dep in sync_dependencies:\n            new_dep = f\"{dep}=={version}\"\n            new_dependencies.append(new_dep)\n        else:\n            new_dependencies.append(dep)\n    if new_dependencies != dependencies:\n        metadata[\"dependencies\"] = new_dependencies",
        "signature": {
          "args": [
            "context"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "extend",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "pdm_build_initialize",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "requirements-docs-insiders.txt",
    "type": "text",
    "content": "git+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11\ngit+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git\ngit+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git\n"
  },
  {
    "file": "requirements-docs.txt",
    "type": "text",
    "content": "-e .\n\nmkdocs-material==9.6.20\nmdx-include >=1.4.1,<2.0.0\nmkdocs-redirects>=1.2.1,<1.3.0\npyyaml >=5.3.1,<7.0.0\n# For Material for MkDocs, Chinese search\n# jieba==0.42.1\n# For image processing by Material for MkDocs\npillow==11.3.0\n# For image processing by Material for MkDocs\ncairosvg==2.8.2\n# mkdocstrings[python]==0.25.1\n# Enable griffe-typingdoc once dropping Python 3.7 and upgrading typing-extensions\n# griffe-typingdoc==0.2.5\n# For griffe, it formats with black\n# black==24.3.0\nmkdocs-macros-plugin==1.3.9\nmarkdown-include-variants==0.0.4\n"
  },
  {
    "file": "requirements-github-actions.txt",
    "type": "text",
    "content": "PyGithub>=2.3.0,<3.0.0\npydantic>=2.5.3,<3.0.0\npydantic-settings>=2.1.0,<3.0.0\nhttpx>=0.27.0,<0.29.0\nsmokeshow\n"
  },
  {
    "file": "requirements-tests.txt",
    "type": "text",
    "content": "-e .\n\npytest >=4.4.0,<9.0.0\npytest-cov >=2.10.0,<8.0.0\ncoverage[toml] >=6.2,<8.0\npytest-xdist >=1.32.0,<4.0.0\npytest-sugar >=0.9.4,<1.2.0\nmypy ==1.4.1\nruff ==0.13.0\n# Needed explicitly by typer-slim\nrich >=10.11.0\nshellingham >=1.3.0\n"
  },
  {
    "file": "requirements.txt",
    "type": "text",
    "content": "-e .\n\n-r requirements-tests.txt\n-r requirements-docs.txt\n\npre-commit >=2.17.0,<5.0.0\n"
  },
  {
    "file": "scripts/deploy_docs_status.py",
    "type": "python",
    "imports": [
      {
        "module": "logging",
        "type": "external"
      },
      {
        "module": "re",
        "type": "external"
      },
      {
        "module": "github",
        "type": "external"
      },
      {
        "module": "pydantic",
        "type": "external"
      },
      {
        "module": "pydantic_settings",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "Settings",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "BaseSettings"
        ]
      },
      {
        "name": "LinkData",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "BaseModel"
        ]
      }
    ],
    "functions": [
      {
        "name": "main",
        "content": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n    use_pr = next(\n        (pr for pr in repo.get_pulls() if pr.head.sha == settings.commit_sha), None\n    )\n    if not use_pr:\n        logging.error(f\"No PR found for hash: {settings.commit_sha}\")\n        return\n    commits = list(use_pr.get_commits())\n    current_commit = [c for c in commits if c.sha == settings.commit_sha][0]\n    run_url = f\"https://github.com/{settings.github_repository}/actions/runs/{settings.run_id}\"\n    if settings.is_done and not settings.deploy_url:\n        current_commit.create_status(\n            state=\"success\",\n            description=\"No Docs Changes\",\n            context=\"deploy-docs\",\n            target_url=run_url,\n        )\n        logging.info(\"No docs changes found\")\n        return\n    if not settings.deploy_url:\n        current_commit.create_status(\n            state=\"pending\",\n            description=\"Deploying Docs\",\n            context=\"deploy-docs\",\n            target_url=run_url,\n        )\n        logging.info(\"No deploy URL available yet\")\n        return\n    current_commit.create_status(\n        state=\"success\",\n        description=\"Docs Deployed\",\n        context=\"deploy-docs\",\n        target_url=run_url,\n    )\n\n    files = list(use_pr.get_files())\n    docs_files = [f for f in files if f.filename.startswith(\"docs/\")]\n\n    deploy_url = settings.deploy_url.rstrip(\"/\")\n    links: list[LinkData] = []\n    for f in docs_files:\n        match = re.match(r\"docs/(.*)\", f.filename)\n        if not match:\n            continue\n        path = match.group(1)\n        if path.endswith(\"index.md\"):\n            use_path = path.replace(\"index.md\", \"\")\n        else:\n            use_path = path.replace(\".md\", \"/\")\n        link = LinkData(\n            previous_link=f\"https://{site_domain}/{use_path}\",\n            preview_link=f\"{deploy_url}/{use_path}\",\n        )\n        links.append(link)\n        links.sort(key=lambda x: x.preview_link)\n\n    message = f\"\ud83d\udcdd Docs preview for commit {settings.commit_sha} at: {deploy_url}\"\n\n    if links:\n        message += \"\\n\\n### Modified Pages\\n\\n\"\n        for link in links:\n            message += f\"* {link.preview_link}\"\n            message += f\" - ([before]({link.previous_link}))\"\n            message += \"\\n\"\n\n    print(message)\n    use_pr.as_issue().create_comment(message)\n\n    logging.info(\"Finished\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "basicConfig",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Settings",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "info",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "model_dump_json",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Github",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "get_secret_value",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "get_repo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "next",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "get_pulls",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "error",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "get_commits",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "create_status",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "info",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "create_status",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "info",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "create_status",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "get_files",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "rstrip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "match",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "group",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "endswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "LinkData",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "sort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "create_comment",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "as_issue",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "info",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "scripts/docker/compose.yaml",
    "type": "yaml",
    "content": {
      "services": {
        "typer": {
          "build": {
            "context": "../../",
            "dockerfile": "scripts/docker/Dockerfile"
          },
          "volumes": [
            "../../:/code"
          ],
          "command": "sleep infinity"
        }
      }
    }
  },
  {
    "file": "scripts/docs.py",
    "type": "python",
    "imports": [
      {
        "module": "logging",
        "type": "external"
      },
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "re",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "functools",
        "type": "external"
      },
      {
        "module": "http.server",
        "type": "external"
      },
      {
        "module": "importlib",
        "type": "external"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "is_mkdocs_insiders",
        "content": "def is_mkdocs_insiders() -> bool:\n    version = metadata.version(\"mkdocs-material\")\n    return \"insiders\" in version",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "lru_cache"
        ]
      },
      {
        "name": "callback",
        "content": "def callback() -> None:\n    if is_mkdocs_insiders():\n        os.environ[\"INSIDERS_FILE\"] = \"./mkdocs.insiders.yml\"\n    # For MacOS with insiders and Cairo\n    os.environ[\"DYLD_FALLBACK_LIBRARY_PATH\"] = \"/opt/homebrew/lib\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.callback()"
        ]
      },
      {
        "name": "generate_readme_content",
        "content": "def generate_readme_content() -> str:\n    en_index = en_docs_path / \"docs\" / \"index.md\"\n    content = en_index.read_text(\"utf-8\")\n    match_pre = re.search(r\"</style>\\n\\n\", content)\n    if not match_pre:\n        raise RuntimeError(\"Couldn't find pre section (<style>) in index.md\")\n    frontmatter_end = match_pre.end()\n    new_content = content[frontmatter_end:]\n    # Remove content between <!-- only-mkdocs --> and <!-- /only-mkdocs -->\n    new_content = re.sub(\n        r\"<!-- only-mkdocs -->.*?<!-- /only-mkdocs -->\",\n        \"\",\n        new_content,\n        flags=re.DOTALL,\n    )\n    return new_content",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "generate_readme",
        "content": "def generate_readme() -> None:\n    \"\"\"\n    Generate README.md content from main index.md\n    \"\"\"\n    typer.echo(\"Generating README\")\n    readme_path = Path(\"README.md\")\n    new_content = generate_readme_content()\n    readme_path.write_text(new_content, encoding=\"utf-8\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "verify_readme",
        "content": "def verify_readme() -> None:\n    \"\"\"\n    Verify README.md content from main index.md\n    \"\"\"\n    typer.echo(\"Verifying README\")\n    readme_path = Path(\"README.md\")\n    generated_content = generate_readme_content()\n    readme_content = readme_path.read_text(\"utf-8\")\n    if generated_content != readme_content:\n        typer.secho(\n            \"README.md outdated from the latest index.md\", color=typer.colors.RED\n        )\n        raise typer.Abort()\n    typer.echo(\"Valid README \u2705\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "live",
        "content": "def live(dirty: bool = False) -> None:\n    \"\"\"\n    Serve with livereload a docs site for a specific language.\n\n    This only shows the actual translated files, not the placeholders created with\n    build-all.\n\n    Takes an optional LANG argument with the name of the language to serve, by default\n    en.\n    \"\"\"\n    # Enable line numbers during local development to make it easier to highlight\n    args = [\"mkdocs\", \"serve\", \"--dev-addr\", \"127.0.0.1:8008\"]\n    if dirty:\n        args.append(\"--dirty\")\n    subprocess.run(args, env={**os.environ, \"LINENUMS\": \"true\"}, check=True)",
        "signature": {
          "args": [
            "dirty"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "build",
        "content": "def build() -> None:\n    \"\"\"\n    Build the docs.\n    \"\"\"\n    insiders_env_file = os.environ.get(\"INSIDERS_FILE\")\n    print(f\"Insiders file {insiders_env_file}\")\n    if is_mkdocs_insiders():\n        print(\"Using insiders\")\n    print(\"Building docs\")\n    subprocess.run([\"mkdocs\", \"build\"], check=True)\n    typer.secho(\"Successfully built docs\", color=typer.colors.GREEN)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "serve",
        "content": "def serve() -> None:\n    \"\"\"\n    A quick server to preview a built site.\n\n    For development, prefer the command live (or just mkdocs serve).\n\n    This is here only to preview the documentation site.\n\n    Make sure you run the build command first.\n    \"\"\"\n    typer.echo(\"Warning: this is a very simple server.\")\n    typer.echo(\"For development, use the command live instead.\")\n    typer.echo(\"This is here only to preview the documentation site.\")\n    typer.echo(\"Make sure you run the build command first.\")\n    os.chdir(\"site\")\n    server_address = (\"\", 8008)\n    server = HTTPServer(server_address, SimpleHTTPRequestHandler)\n    typer.echo(\"Serving at: http://127.0.0.1:8008\")\n    server.serve_forever()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "is_mkdocs_insiders",
        "caller_class": null,
        "called_function": "version",
        "called_function_files": [
          "docs_src/one_file_per_command/version.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "is_mkdocs_insiders",
        "called_function_files": [
          "scripts/docs.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme_content",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme_content",
        "caller_class": null,
        "called_function": "search",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme_content",
        "caller_class": null,
        "called_function": "RuntimeError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme_content",
        "caller_class": null,
        "called_function": "end",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme_content",
        "caller_class": null,
        "called_function": "sub",
        "called_function_files": [
          "docs_src/using_click/tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme",
        "caller_class": null,
        "called_function": "generate_readme_content",
        "called_function_files": [
          "scripts/docs.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_readme",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "verify_readme",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "verify_readme",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "verify_readme",
        "caller_class": null,
        "called_function": "generate_readme_content",
        "called_function_files": [
          "scripts/docs.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "verify_readme",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "verify_readme",
        "caller_class": null,
        "called_function": "secho",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "verify_readme",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "verify_readme",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "verify_readme",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "live",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "live",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "live",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "build",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "build",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "build",
        "caller_class": null,
        "called_function": "is_mkdocs_insiders",
        "called_function_files": [
          "scripts/docs.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "build",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "build",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "build",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "build",
        "caller_class": null,
        "called_function": "secho",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "build",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "chdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "HTTPServer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "serve_forever",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "serve",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "scripts/mkdocs_hooks.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "mkdocs.config.defaults",
        "type": "external"
      },
      {
        "module": "mkdocs.structure.files",
        "type": "external"
      },
      {
        "module": "mkdocs.structure.nav",
        "type": "external"
      },
      {
        "module": "mkdocs.structure.pages",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "generate_renamed_section_items",
        "content": "def generate_renamed_section_items(\n    items: List[Union[Page, Section, Link]], *, config: MkDocsConfig\n) -> List[Union[Page, Section, Link]]:\n    new_items: List[Union[Page, Section, Link]] = []\n    for item in items:\n        if isinstance(item, Section):\n            new_title = item.title\n            new_children = generate_renamed_section_items(item.children, config=config)\n            first_child = new_children[0]\n            if isinstance(first_child, Page):\n                if first_child.file.src_path.endswith(\"index.md\"):\n                    # Read the source so that the title is parsed and available\n                    first_child.read_source(config=config)\n                    new_title = first_child.title or new_title\n            # Creating a new section makes it render it collapsed by default\n            # no idea why, so, let's just modify the existing one\n            # new_section = Section(title=new_title, children=new_children)\n            item.title = new_title\n            item.children = new_children\n            new_items.append(item)\n        else:\n            new_items.append(item)\n    return new_items",
        "signature": {
          "args": [
            "items"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "on_nav",
        "content": "def on_nav(\n    nav: Navigation, *, config: MkDocsConfig, files: Files, **kwargs: Any\n) -> Navigation:\n    new_items = generate_renamed_section_items(nav.items, config=config)\n    return Navigation(items=new_items, pages=nav.pages)",
        "signature": {
          "args": [
            "nav"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "generate_renamed_section_items",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_renamed_section_items",
        "caller_class": null,
        "called_function": "generate_renamed_section_items",
        "called_function_files": [
          "scripts/mkdocs_hooks.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "generate_renamed_section_items",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_renamed_section_items",
        "caller_class": null,
        "called_function": "endswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_renamed_section_items",
        "caller_class": null,
        "called_function": "read_source",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_renamed_section_items",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_renamed_section_items",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "on_nav",
        "caller_class": null,
        "called_function": "generate_renamed_section_items",
        "called_function_files": [
          "scripts/mkdocs_hooks.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "on_nav",
        "caller_class": null,
        "called_function": "Navigation",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/assets/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/assets/cli/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/assets/cli/app_other_name.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "callback",
        "content": "def callback(name: str = \"World\"):\n    typer.echo(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": [
          "application.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/cli/empty_script.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/assets/cli/extended_app_cli.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "sub_sub_command",
        "content": "def sub_sub_command():\n    typer.echo(\"sub_sub_command\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_sub_app.command()"
        ]
      },
      {
        "name": "hello",
        "content": "def hello():\n    typer.echo(\"hello there\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.command()"
        ]
      },
      {
        "name": "bye",
        "content": "def bye():\n    typer.echo(\"bye bye\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.command()"
        ]
      },
      {
        "name": "top",
        "content": "def top():\n    typer.echo(\"top\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "cli.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "sub_sub_command",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "sub_sub_command",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "top",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "top",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/cli/extended_empty_app_cli.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "hello",
        "content": "def hello():\n    typer.echo(\"hello there\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.command()"
        ]
      },
      {
        "name": "bye",
        "content": "def bye():\n    typer.echo(\"bye bye\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/cli/func_other_name.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [
      {
        "name": "some_function",
        "content": "def some_function(name: str = \"World\"):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "some_function",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/cli/multi_app.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "hello",
        "content": "def hello(name: str = \"World\", age: int = typer.Option(0, help=\"The age of the user\")):\n    \"\"\"\n    Say Hello\n    \"\"\"\n    typer.echo(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name",
            "age"
          ],
          "defaults": [
            "'World'",
            "typer.Option(0, help='The age of the user')"
          ]
        },
        "decorators": [
          "sub_app.command()"
        ]
      },
      {
        "name": "hi",
        "content": "def hi(user: str = typer.Argument(\"World\", help=\"The name of the user to greet\")):\n    \"\"\"\n    Say Hi\n    \"\"\"",
        "signature": {
          "args": [
            "user"
          ],
          "defaults": [
            "typer.Argument('World', help='The name of the user to greet')"
          ]
        },
        "decorators": [
          "sub_app.command()"
        ]
      },
      {
        "name": "bye",
        "content": "def bye():\n    \"\"\"\n    Say bye\n    \"\"\"\n    typer.echo(\"sub bye\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.command()"
        ]
      },
      {
        "name": "top",
        "content": "def top():\n    \"\"\"\n    Top command\n    \"\"\"\n    typer.echo(\"top\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hi",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hi",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "top",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "top",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/cli/multi_app_cli.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "hello",
        "content": "def hello():\n    typer.echo(\"sub hello\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.command()"
        ]
      },
      {
        "name": "bye",
        "content": "def bye():\n    typer.echo(\"sub bye\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.command()"
        ]
      },
      {
        "name": "top",
        "content": "def top():\n    typer.echo(\"top\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "cli.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "top",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "top",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/cli/multi_func.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [
      {
        "name": "say_stuff",
        "content": "def say_stuff():\n    print(message)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: str = \"World\"):\n    \"\"\"\n    Say hi to someone, by default to the World.\n    \"\"\"\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'World'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "say_stuff",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/cli/multiapp-docs-title.md",
    "type": "markdown",
    "content": "# Awesome CLI\n\nDemo App\n\n**Usage**:\n\n```console\n$ multiapp [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options**:\n\n* `--install-completion`: Install completion for the current shell.\n* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.\n* `--help`: Show this message and exit.\n\nThe end\n\n**Commands**:\n\n* `top`: Top command\n* `sub`\n\n## `multiapp top`\n\nTop command\n\n**Usage**:\n\n```console\n$ multiapp top [OPTIONS]\n```\n\n**Options**:\n\n* `--help`: Show this message and exit.\n\n## `multiapp sub`\n\n**Usage**:\n\n```console\n$ multiapp sub [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options**:\n\n* `--help`: Show this message and exit.\n\n**Commands**:\n\n* `hello`: Say Hello\n* `hi`: Say Hi\n* `bye`: Say bye\n\n### `multiapp sub hello`\n\nSay Hello\n\n**Usage**:\n\n```console\n$ multiapp sub hello [OPTIONS]\n```\n\n**Options**:\n\n* `--name TEXT`: [default: World]\n* `--age INTEGER`: The age of the user  [default: 0]\n* `--help`: Show this message and exit.\n\n### `multiapp sub hi`\n\nSay Hi\n\n**Usage**:\n\n```console\n$ multiapp sub hi [OPTIONS] [USER]\n```\n\n**Arguments**:\n\n* `[USER]`: The name of the user to greet  [default: World]\n\n**Options**:\n\n* `--help`: Show this message and exit.\n\n### `multiapp sub bye`\n\nSay bye\n\n**Usage**:\n\n```console\n$ multiapp sub bye [OPTIONS]\n```\n\n**Options**:\n\n* `--help`: Show this message and exit.\n"
  },
  {
    "file": "tests/assets/cli/multiapp-docs.md",
    "type": "markdown",
    "content": "# `multiapp`\n\nDemo App\n\n**Usage**:\n\n```console\n$ multiapp [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options**:\n\n* `--install-completion`: Install completion for the current shell.\n* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.\n* `--help`: Show this message and exit.\n\nThe end\n\n**Commands**:\n\n* `top`: Top command\n* `sub`\n\n## `multiapp top`\n\nTop command\n\n**Usage**:\n\n```console\n$ multiapp top [OPTIONS]\n```\n\n**Options**:\n\n* `--help`: Show this message and exit.\n\n## `multiapp sub`\n\n**Usage**:\n\n```console\n$ multiapp sub [OPTIONS] COMMAND [ARGS]...\n```\n\n**Options**:\n\n* `--help`: Show this message and exit.\n\n**Commands**:\n\n* `hello`: Say Hello\n* `hi`: Say Hi\n* `bye`: Say bye\n\n### `multiapp sub hello`\n\nSay Hello\n\n**Usage**:\n\n```console\n$ multiapp sub hello [OPTIONS]\n```\n\n**Options**:\n\n* `--name TEXT`: [default: World]\n* `--age INTEGER`: The age of the user  [default: 0]\n* `--help`: Show this message and exit.\n\n### `multiapp sub hi`\n\nSay Hi\n\n**Usage**:\n\n```console\n$ multiapp sub hi [OPTIONS] [USER]\n```\n\n**Arguments**:\n\n* `[USER]`: The name of the user to greet  [default: World]\n\n**Options**:\n\n* `--help`: Show this message and exit.\n\n### `multiapp sub bye`\n\nSay bye\n\n**Usage**:\n\n```console\n$ multiapp sub bye [OPTIONS]\n```\n\n**Options**:\n\n* `--help`: Show this message and exit.\n"
  },
  {
    "file": "tests/assets/cli/not_python.txt",
    "type": "text",
    "content": "This is not Python\n"
  },
  {
    "file": "tests/assets/cli/rich_formatted_app.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "hello",
        "content": "def hello(\n    user_1: Annotated[\n        str,\n        typer.Argument(help=\"The [bold]cool[/bold] name of the [green]user[/green]\"),\n    ],\n    user_2: Annotated[str, typer.Argument(help=\"The world\")] = \"The World\",\n    force: Annotated[\n        bool, typer.Option(help=\"Force the welcome [red]message[/red]\")\n    ] = False,\n):\n    print(f\"Hello {user_1} and {user_2}\")  # pragma: no cover",
        "signature": {
          "args": [
            "user_1",
            "user_2",
            "force"
          ],
          "defaults": [
            "'The World'",
            "False"
          ]
        },
        "decorators": [
          "app.command(help='Say [bold red]hello[/bold red] to the user.')"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/cli/richformattedapp-docs.md",
    "type": "markdown",
    "content": "# Awesome CLI\n\nSay <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">hello</span> to the user.\n\n**Usage**:\n\n```console\n$ hello [OPTIONS] USER_1 [USER_2]\n```\n\n**Arguments**:\n\n* `USER_1`: The <span style=\"font-weight: bold\">cool</span> name of the <span style=\"color: #008000; text-decoration-color: #008000\">user</span>  [required]\n* `[USER_2]`: The world  [default: The World]\n\n**Options**:\n\n* `--force / --no-force`: Force the welcome <span style=\"color: #800000; text-decoration-color: #800000\">message</span>  [default: no-force]\n* `--install-completion`: Install completion for the current shell.\n* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.\n* `--help`: Show this message and exit.\n"
  },
  {
    "file": "tests/assets/cli/sample.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "hello",
        "content": "def hello(name: str = \"World\", formal: bool = False):\n    \"\"\"\n    Say hi\n    \"\"\"\n    if formal:\n        typer.echo(f\"Good morning Ms. {name}\")\n    else:\n        typer.echo(f\"Hello {name}!\")",
        "signature": {
          "args": [
            "name",
            "formal"
          ],
          "defaults": [
            "'World'",
            "False"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "bye",
        "content": "def bye(friend: bool = False):\n    \"\"\"\n    Say bye\n    \"\"\"\n    if friend:\n        typer.echo(\"Goodbye my friend\")\n    else:\n        typer.echo(\"Goodbye\")",
        "signature": {
          "args": [
            "friend"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "bye",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/completion_argument.py",
    "type": "python",
    "imports": [
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "shell_complete",
        "content": "def shell_complete(ctx: click.Context, param: click.Parameter, incomplete: str):\n    typer.echo(f\"ctx: {ctx.info_name}\", err=True)\n    typer.echo(f\"arg is: {param.name}\", err=True)\n    typer.echo(f\"incomplete is: {incomplete}\", err=True)\n    return [\"Emma\"]",
        "signature": {
          "args": [
            "ctx",
            "param",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: str = typer.Argument(shell_complete=shell_complete)):\n    \"\"\"\n    Say hello.\n    \"\"\"",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Argument(shell_complete=shell_complete)"
          ]
        },
        "decorators": [
          "app.command(context_settings={'auto_envvar_prefix': 'TEST'})"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/completion_no_types.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete",
        "content": "def complete(ctx, args, incomplete):\n    typer.echo(f\"info name is: {ctx.info_name}\", err=True)\n    typer.echo(f\"args is: {args}\", err=True)\n    typer.echo(f\"incomplete is: {incomplete}\", err=True)\n    return [\n        (\"Camila\", \"The reader of books.\"),\n        (\"Carlos\", \"The writer of scripts.\"),\n        (\"Sebastian\", \"The type hints guy.\"),\n    ]",
        "signature": {
          "args": [
            "ctx",
            "args",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: str = typer.Option(\"World\", autocompletion=complete)):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option('World', autocompletion=complete)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/completion_no_types_order.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "complete",
        "content": "def complete(args, incomplete, ctx):\n    typer.echo(f\"info name is: {ctx.info_name}\", err=True)\n    typer.echo(f\"args is: {args}\", err=True)\n    typer.echo(f\"incomplete is: {incomplete}\", err=True)\n    return [\n        (\"Camila\", \"The reader of books.\"),\n        (\"Carlos\", \"The writer of scripts.\"),\n        (\"Sebastian\", \"The type hints guy.\"),\n    ]",
        "signature": {
          "args": [
            "args",
            "incomplete",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "def main(name: str = typer.Option(\"World\", autocompletion=complete)):\n    print(f\"Hello {name}\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option('World', autocompletion=complete)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/corner_cases.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(\n    name: str = typer.Option(\"John\", hidden=True),\n    lastname: str = typer.Option(\"Doe\", \"/lastname\", show_default=\"Mr. Doe\"),\n    age: int = typer.Option(lambda: 42, show_default=True),\n):\n    \"\"\"\n    Say hello.\n    \"\"\"\n    print(f\"Hello {name} {lastname}, it seems you have {age}\")",
        "signature": {
          "args": [
            "name",
            "lastname",
            "age"
          ],
          "defaults": [
            "typer.Option('John', hidden=True)",
            "typer.Option('Doe', '/lastname', show_default='Mr. Doe')",
            "typer.Option(lambda: 42, show_default=True)"
          ]
        },
        "decorators": [
          "app.command(context_settings={'auto_envvar_prefix': 'TEST'})"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/print_modules.py",
    "type": "python",
    "imports": [
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main():\n    for m in sys.modules:\n        print(m)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/prog_name.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(i: int):  # pragma: no cover\n    pass",
        "signature": {
          "args": [
            "i"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/type_error_no_rich.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = \"morty\"):\n    print(name + 3)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'morty'"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/type_error_no_rich_short_disable.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = \"morty\"):\n    print(name + 3)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'morty'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/assets/type_error_normal_traceback.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "main",
        "content": "def main(name: str = \"morty\"):\n    print(name)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'morty'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "broken",
        "content": "def broken(name: str = \"morty\"):\n    print(name + 3)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "'morty'"
          ]
        },
        "decorators": [
          "broken_app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "broken",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "broken",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_ambiguous_params.py",
    "type": "python",
    "imports": [
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "typer.utils",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_split_annotations_from_typer_annotations_simple",
        "content": "def test_split_annotations_from_typer_annotations_simple():\n    # Simple sanity check that this utility works. If this isn't working on a given\n    # python version, then no other tests for Annotated will work.\n    given = Annotated[str, typer.Argument()]\n    base, typer_annotations = _split_annotation_from_typer_annotations(given)\n    assert base is str\n    # No equality check on the param types. Checking the length is sufficient.\n    assert len(typer_annotations) == 1",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_forbid_default_value_in_annotated_argument",
        "content": "def test_forbid_default_value_in_annotated_argument():\n    app = typer.Typer()\n\n    # This test case only works with `typer.Argument`. `typer.Option` uses positionals\n    # for param_decls too.\n    @app.command()\n    def cmd(my_param: Annotated[str, typer.Argument(\"foo\")]): ...  # pragma: no cover\n\n    with pytest.raises(AnnotatedParamWithDefaultValueError) as excinfo:\n        runner.invoke(app)\n\n    assert vars(excinfo.value) == {\n        \"param_type\": typer.models.ArgumentInfo,\n        \"argument_name\": \"my_param\",\n    }",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(my_param: Annotated[str, typer.Argument(\"foo\")]): ...  # pragma: no cover",
        "signature": {
          "args": [
            "my_param"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_allow_options_to_have_names",
        "content": "def test_allow_options_to_have_names():\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(my_param: Annotated[str, typer.Option(\"--some-opt\")]):\n        print(my_param)\n\n    result = runner.invoke(app, [\"--some-opt\", \"hello\"])\n    assert result.exit_code == 0, result.output\n    assert \"hello\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(my_param: Annotated[str, typer.Option(\"--some-opt\")]):\n        print(my_param)",
        "signature": {
          "args": [
            "my_param"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_forbid_annotated_param_and_default_param",
        "content": "def test_forbid_annotated_param_and_default_param(param, param_info_type):\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(my_param: Annotated[str, param()] = param(\"foo\")): ...  # pragma: no cover\n\n    with pytest.raises(MixedAnnotatedAndDefaultStyleError) as excinfo:\n        runner.invoke(app)\n\n    assert vars(excinfo.value) == {\n        \"argument_name\": \"my_param\",\n        \"annotated_param_type\": param_info_type,\n        \"default_param_type\": param_info_type,\n    }",
        "signature": {
          "args": [
            "param",
            "param_info_type"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize(['param', 'param_info_type'], [(typer.Argument, typer.models.ArgumentInfo), (typer.Option, typer.models.OptionInfo)])"
        ]
      },
      {
        "name": "cmd",
        "content": "    def cmd(my_param: Annotated[str, param()] = param(\"foo\")): ...  # pragma: no cover",
        "signature": {
          "args": [
            "my_param"
          ],
          "defaults": [
            "param('foo')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_forbid_multiple_typer_params_in_annotated",
        "content": "def test_forbid_multiple_typer_params_in_annotated():\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(\n        my_param: Annotated[str, typer.Argument(), typer.Argument()],\n    ): ...  # pragma: no cover\n\n    with pytest.raises(MultipleTyperAnnotationsError) as excinfo:\n        runner.invoke(app)\n\n    assert vars(excinfo.value) == {\"argument_name\": \"my_param\"}",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(\n        my_param: Annotated[str, typer.Argument(), typer.Argument()],\n    ): ...  # pragma: no cover",
        "signature": {
          "args": [
            "my_param"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_allow_multiple_non_typer_params_in_annotated",
        "content": "def test_allow_multiple_non_typer_params_in_annotated():\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(my_param: Annotated[str, \"someval\", typer.Argument(), 4] = \"hello\"):\n        print(my_param)\n\n    result = runner.invoke(app)\n    # Should behave like normal\n    assert result.exit_code == 0, result.output\n    assert \"hello\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(my_param: Annotated[str, \"someval\", typer.Argument(), 4] = \"hello\"):\n        print(my_param)",
        "signature": {
          "args": [
            "my_param"
          ],
          "defaults": [
            "'hello'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_forbid_default_factory_and_default_value_in_annotated",
        "content": "def test_forbid_default_factory_and_default_value_in_annotated(param, param_info_type):\n    def make_string():\n        return \"foo\"  # pragma: no cover\n\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(\n        my_param: Annotated[str, param(default_factory=make_string)] = \"hello\",\n    ): ...  # pragma: no cover\n\n    with pytest.raises(DefaultFactoryAndDefaultValueError) as excinfo:\n        runner.invoke(app)\n\n    assert vars(excinfo.value) == {\n        \"argument_name\": \"my_param\",\n        \"param_type\": param_info_type,\n    }",
        "signature": {
          "args": [
            "param",
            "param_info_type"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize(['param', 'param_info_type'], [(typer.Argument, typer.models.ArgumentInfo), (typer.Option, typer.models.OptionInfo)])"
        ]
      },
      {
        "name": "make_string",
        "content": "    def make_string():\n        return \"foo\"  # pragma: no cover",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(\n        my_param: Annotated[str, param(default_factory=make_string)] = \"hello\",\n    ): ...  # pragma: no cover",
        "signature": {
          "args": [
            "my_param"
          ],
          "defaults": [
            "'hello'"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_allow_default_factory_with_default_param",
        "content": "def test_allow_default_factory_with_default_param(param):\n    def make_string():\n        return \"foo\"\n\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(my_param: str = param(default_factory=make_string)):\n        print(my_param)\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0, result.output\n    assert \"foo\" in result.output",
        "signature": {
          "args": [
            "param"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('param', [typer.Argument, typer.Option])"
        ]
      },
      {
        "name": "make_string",
        "content": "    def make_string():\n        return \"foo\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(my_param: str = param(default_factory=make_string)):\n        print(my_param)",
        "signature": {
          "args": [
            "my_param"
          ],
          "defaults": [
            "param(default_factory=make_string)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_forbid_default_and_default_factory_with_default_param",
        "content": "def test_forbid_default_and_default_factory_with_default_param(param, param_info_type):\n    def make_string():\n        return \"foo\"  # pragma: no cover\n\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(\n        my_param: str = param(\"hi\", default_factory=make_string),\n    ): ...  # pragma: no cover\n\n    with pytest.raises(DefaultFactoryAndDefaultValueError) as excinfo:\n        runner.invoke(app)\n\n    assert vars(excinfo.value) == {\n        \"argument_name\": \"my_param\",\n        \"param_type\": param_info_type,\n    }",
        "signature": {
          "args": [
            "param",
            "param_info_type"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize(['param', 'param_info_type'], [(typer.Argument, typer.models.ArgumentInfo), (typer.Option, typer.models.OptionInfo)])"
        ]
      },
      {
        "name": "make_string",
        "content": "    def make_string():\n        return \"foo\"  # pragma: no cover",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(\n        my_param: str = param(\"hi\", default_factory=make_string),\n    ): ...  # pragma: no cover",
        "signature": {
          "args": [
            "my_param"
          ],
          "defaults": [
            "param('hi', default_factory=make_string)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_error_rendering",
        "content": "def test_error_rendering(error, message):\n    assert str(error) == message",
        "signature": {
          "args": [
            "error",
            "message"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize(['error', 'message'], [(AnnotatedParamWithDefaultValueError(argument_name='my_argument', param_type=typer.models.ArgumentInfo), \"`Argument` default value cannot be set in `Annotated` for 'my_argument'. Set the default value with `=` instead.\"), (MixedAnnotatedAndDefaultStyleError(argument_name='my_argument', annotated_param_type=typer.models.OptionInfo, default_param_type=typer.models.ArgumentInfo), \"Cannot specify `Option` in `Annotated` and `Argument` as a default value together for 'my_argument'\"), (MixedAnnotatedAndDefaultStyleError(argument_name='my_argument', annotated_param_type=typer.models.OptionInfo, default_param_type=typer.models.OptionInfo), \"Cannot specify `Option` in `Annotated` and default value together for 'my_argument'\"), (MixedAnnotatedAndDefaultStyleError(argument_name='my_argument', annotated_param_type=typer.models.ArgumentInfo, default_param_type=typer.models.ArgumentInfo), \"Cannot specify `Argument` in `Annotated` and default value together for 'my_argument'\"), (MultipleTyperAnnotationsError(argument_name='my_argument'), \"Cannot specify multiple `Annotated` Typer arguments for 'my_argument'\"), (DefaultFactoryAndDefaultValueError(argument_name='my_argument', param_type=typer.models.OptionInfo), 'Cannot specify `default_factory` and a default value together for `Option`')])"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_split_annotations_from_typer_annotations_simple",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_split_annotations_from_typer_annotations_simple",
        "caller_class": null,
        "called_function": "_split_annotation_from_typer_annotations",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_split_annotations_from_typer_annotations_simple",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_forbid_default_value_in_annotated_argument",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_allow_options_to_have_names",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_forbid_annotated_param_and_default_param",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "param",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "param",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_forbid_multiple_typer_params_in_annotated",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_allow_multiple_non_typer_params_in_annotated",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "param",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "param",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "param",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_error_rendering",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_error_rendering",
        "caller_class": null,
        "called_function": "parametrize",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_error_rendering",
        "caller_class": null,
        "called_function": "AnnotatedParamWithDefaultValueError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_error_rendering",
        "caller_class": null,
        "called_function": "MixedAnnotatedAndDefaultStyleError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_error_rendering",
        "caller_class": null,
        "called_function": "MixedAnnotatedAndDefaultStyleError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_error_rendering",
        "caller_class": null,
        "called_function": "MixedAnnotatedAndDefaultStyleError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_error_rendering",
        "caller_class": null,
        "called_function": "MultipleTyperAnnotationsError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_error_rendering",
        "caller_class": null,
        "called_function": "DefaultFactoryAndDefaultValueError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_annotated.py",
    "type": "python",
    "imports": [
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      },
      {
        "module": "utils",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "CustomPath",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "Path"
        ]
      }
    ],
    "functions": [
      {
        "name": "test_annotated_argument_with_default",
        "content": "def test_annotated_argument_with_default():\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(val: Annotated[int, typer.Argument()] = 0):\n        print(f\"hello {val}\")\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0, result.output\n    assert \"hello 0\" in result.output\n\n    result = runner.invoke(app, [\"42\"])\n    assert result.exit_code == 0, result.output\n    assert \"hello 42\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(val: Annotated[int, typer.Argument()] = 0):\n        print(f\"hello {val}\")",
        "signature": {
          "args": [
            "val"
          ],
          "defaults": [
            "0"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_annotated_argument_in_string_type_with_default",
        "content": "def test_annotated_argument_in_string_type_with_default():\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(val: \"Annotated[int, typer.Argument()]\" = 0):\n        print(f\"hello {val}\")\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0, result.output\n    assert \"hello 0\" in result.output\n\n    result = runner.invoke(app, [\"42\"])\n    assert result.exit_code == 0, result.output\n    assert \"hello 42\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "needs_py310"
        ]
      },
      {
        "name": "cmd",
        "content": "    def cmd(val: \"Annotated[int, typer.Argument()]\" = 0):\n        print(f\"hello {val}\")",
        "signature": {
          "args": [
            "val"
          ],
          "defaults": [
            "0"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_annotated_argument_with_default_factory",
        "content": "def test_annotated_argument_with_default_factory():\n    app = typer.Typer()\n\n    def make_string():\n        return \"I made it\"\n\n    @app.command()\n    def cmd(val: Annotated[str, typer.Argument(default_factory=make_string)]):\n        print(val)\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0, result.output\n    assert \"I made it\" in result.output\n\n    result = runner.invoke(app, [\"overridden\"])\n    assert result.exit_code == 0, result.output\n    assert \"overridden\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "make_string",
        "content": "    def make_string():\n        return \"I made it\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(val: Annotated[str, typer.Argument(default_factory=make_string)]):\n        print(val)",
        "signature": {
          "args": [
            "val"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_annotated_option_with_argname_doesnt_mutate_multiple_calls",
        "content": "def test_annotated_option_with_argname_doesnt_mutate_multiple_calls():\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(force: Annotated[bool, typer.Option(\"--force\")] = False):\n        if force:\n            print(\"Forcing operation\")\n        else:\n            print(\"Not forcing\")\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0, result.output\n    assert \"Not forcing\" in result.output\n\n    result = runner.invoke(app, [\"--force\"])\n    assert result.exit_code == 0, result.output\n    assert \"Forcing operation\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(force: Annotated[bool, typer.Option(\"--force\")] = False):\n        if force:\n            print(\"Forcing operation\")\n        else:\n            print(\"Not forcing\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_annotated_custom_path",
        "content": "def test_annotated_custom_path():\n    app = typer.Typer()\n\n    class CustomPath(Path):\n        # Subclassing Path was not fully supported before 3.12\n        # https://docs.python.org/3.12/whatsnew/3.12.html\n        if sys.version_info < (3, 12):\n            _flavour = type(Path())._flavour\n\n    @app.command()\n    def custom_parser(\n        my_path: Annotated[CustomPath, typer.Argument(parser=CustomPath)],\n    ):\n        assert isinstance(my_path, CustomPath)\n\n    result = runner.invoke(app, \"/some/quirky/path/implementation\")\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "custom_parser",
        "content": "    def custom_parser(\n        my_path: Annotated[CustomPath, typer.Argument(parser=CustomPath)],\n    ):\n        assert isinstance(my_path, CustomPath)",
        "signature": {
          "args": [
            "my_path"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_annotated_argument_with_default",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_annotated_argument_in_string_type_with_default",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_annotated_argument_with_default_factory",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_annotated_option_with_argname_doesnt_mutate_multiple_calls",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_annotated_custom_path",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_annotated_custom_path",
        "caller_class": "CustomPath",
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_annotated_custom_path",
        "caller_class": "CustomPath",
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_parser",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_parser",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_parser",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_callback_warning.py",
    "type": "python",
    "imports": [
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_warns_when_callback_is_not_supported",
        "content": "def test_warns_when_callback_is_not_supported():\n    app = typer.Typer()\n\n    sub_app = typer.Typer()\n\n    @sub_app.callback()\n    def callback():\n        \"\"\"This help text is not used.\"\"\"\n\n    app.add_typer(sub_app)\n\n    with pytest.warns(\n        match=\"The 'callback' parameter is not supported by Typer when using `add_typer` without a name\"\n    ):\n        try:\n            app()\n        except SystemExit:\n            pass",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "callback",
        "content": "    def callback():\n        \"\"\"This help text is not used.\"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.callback()"
        ]
      },
      {
        "name": "test_warns_when_callback_is_not_supported_added_after_add_typer",
        "content": "def test_warns_when_callback_is_not_supported_added_after_add_typer():\n    app = typer.Typer()\n\n    sub_app = typer.Typer()\n    app.add_typer(sub_app)\n\n    @sub_app.callback()\n    def callback():\n        \"\"\"This help text is not used.\"\"\"\n\n    with pytest.warns(\n        match=\"The 'callback' parameter is not supported by Typer when using `add_typer` without a name\"\n    ):\n        try:\n            app()\n        except SystemExit:\n            pass",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "callback",
        "content": "    def callback():\n        \"\"\"This help text is not used.\"\"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "sub_app.callback()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_warns_when_callback_is_not_supported",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_warns_when_callback_is_not_supported",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "test_warns_when_callback_is_not_supported_added_after_add_typer",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_warns_when_callback_is_not_supported_added_after_add_typer",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_warns_when_callback_is_not_supported_added_after_add_typer",
        "caller_class": null,
        "called_function": "add_typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_app_other_name.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/app_other_name.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"--name\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/app_other_name.py\",\n            \"run\",\n            \"--name\",\n            \"Camila\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello Camila\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_completion_run.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_completion_run",
        "content": "def test_script_completion_run():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", \"-m\", \"typer\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"___MAIN__.PY_COMPLETE\": \"complete_bash\",\n            \"_PYTHON _M TYPER_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"typer tests/assets/cli/sample.py\",\n            \"COMP_CWORD\": \"2\",\n        },\n    )\n    assert \"run\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_completion_run",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_doc.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_doc",
        "content": "def test_doc():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests.assets.cli.multi_app\",\n            \"utils\",\n            \"docs\",\n            \"--name\",\n            \"multiapp\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    docs_path: Path = Path(__file__).parent.parent / \"assets/cli/multiapp-docs.md\"\n    docs = docs_path.read_text()\n    assert docs in result.stdout\n    assert \"**Arguments**\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_doc_output",
        "content": "def test_doc_output(tmp_path: Path):\n    out_file: Path = tmp_path / \"out.md\"\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests.assets.cli.multi_app\",\n            \"utils\",\n            \"docs\",\n            \"--name\",\n            \"multiapp\",\n            \"--output\",\n            str(out_file),\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    docs_path: Path = Path(__file__).parent.parent / \"assets/cli/multiapp-docs.md\"\n    docs = docs_path.read_text()\n    written_docs = out_file.read_text()\n    assert docs in written_docs\n    assert \"Docs saved to:\" in result.stdout",
        "signature": {
          "args": [
            "tmp_path"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_doc_title_output",
        "content": "def test_doc_title_output(tmp_path: Path):\n    out_file: Path = tmp_path / \"out.md\"\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests.assets.cli.multi_app\",\n            \"utils\",\n            \"docs\",\n            \"--name\",\n            \"multiapp\",\n            \"--title\",\n            \"Awesome CLI\",\n            \"--output\",\n            str(out_file),\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    docs_path: Path = Path(__file__).parent.parent / \"assets/cli/multiapp-docs-title.md\"\n    docs = docs_path.read_text()\n    written_docs = out_file.read_text()\n    assert docs in written_docs\n    assert \"Docs saved to:\" in result.stdout",
        "signature": {
          "args": [
            "tmp_path"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_doc_not_existing",
        "content": "def test_doc_not_existing():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"no_typer\",\n            \"utils\",\n            \"docs\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Could not import as Python module:\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_doc_no_typer",
        "content": "def test_doc_no_typer():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/empty_script.py\",\n            \"utils\",\n            \"docs\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"No Typer app found\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_doc_file_not_existing",
        "content": "def test_doc_file_not_existing():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"assets/cli/not_existing.py\",\n            \"utils\",\n            \"docs\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Not a valid file or Python module:\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_doc_html_output",
        "content": "def test_doc_html_output(tmp_path: Path):\n    out_file: Path = tmp_path / \"out.md\"\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests.assets.cli.rich_formatted_app\",\n            \"utils\",\n            \"docs\",\n            \"--title\",\n            \"Awesome CLI\",\n            \"--output\",\n            str(out_file),\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"PYTHONIOENCODING\": \"utf-8\"},\n    )\n    docs_path: Path = (\n        Path(__file__).parent.parent / \"assets\" / \"cli\" / \"richformattedapp-docs.md\"\n    )\n    docs = docs_path.read_text(encoding=\"utf-8\")\n    written_docs = out_file.read_text(encoding=\"utf-8\")\n    assert docs in written_docs\n    assert \"Docs saved to:\" in result.stdout",
        "signature": {
          "args": [
            "tmp_path"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_doc",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_output",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_output",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_output",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_output",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_output",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_title_output",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_title_output",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_title_output",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_title_output",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_title_output",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_not_existing",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_no_typer",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_file_not_existing",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_html_output",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_html_output",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_html_output",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_html_output",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_doc_html_output",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_empty_script.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/empty_script.py\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"run\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_extending_app.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_app_cli.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"top\" in result.stdout\n    assert \"hello\" in result.stdout\n    assert \"sub\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_top",
        "content": "def test_script_top():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_app_cli.py\",\n            \"run\",\n            \"top\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"top\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_hello",
        "content": "def test_script_hello():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_app_cli.py\",\n            \"run\",\n            \"hello\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"hello there\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_bye",
        "content": "def test_script_bye():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_app_cli.py\",\n            \"run\",\n            \"bye\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"bye\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_sub_command_help",
        "content": "def test_script_sub_command_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_app_cli.py\",\n            \"run\",\n            \"sub\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"sub-sub-command\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_sub_sub_command",
        "content": "def test_script_sub_sub_command():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_app_cli.py\",\n            \"run\",\n            \"sub\",\n            \"sub-sub-command\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"sub_sub_command\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_top",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_hello",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_bye",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_sub_command_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_sub_sub_command",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_extending_empty_app.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_empty_app_cli.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"hello\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_hello",
        "content": "def test_script_hello():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_empty_app_cli.py\",\n            \"run\",\n            \"hello\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"hello there\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_bye",
        "content": "def test_script_bye():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/extended_empty_app_cli.py\",\n            \"run\",\n            \"bye\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"bye\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_hello",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_bye",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_func_other_name.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/func_other_name.py\",\n            \"run\",\n            \"--name\",\n            \"Camila\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello Camila\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_help.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/sample.py\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"run\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_not_python",
        "content": "def test_not_python():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/not_python.txt\",\n            \"run\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Could not import as Python file\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_python",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_multi_app.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"sub\" in result.stdout\n    assert \"top\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_app_non_existent",
        "content": "def test_script_app_non_existent():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"--app\",\n            \"non_existent\",\n            \"tests/assets/cli/multi_app.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Not a Typer object:\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_sub",
        "content": "def test_script_sub():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app.py\",\n            \"run\",\n            \"sub\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"bye\" in result.stdout\n    assert \"hello\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_top",
        "content": "def test_script_top():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app.py\",\n            \"run\",\n            \"top\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"top\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_sub_hello",
        "content": "def test_script_sub_hello():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app.py\",\n            \"run\",\n            \"sub\",\n            \"hello\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello World\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_sub_bye",
        "content": "def test_script_sub_bye():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app.py\",\n            \"run\",\n            \"sub\",\n            \"bye\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"sub bye\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_app_non_existent",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_sub",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_top",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_sub_hello",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_sub_bye",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_multi_app_cli.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app_cli.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"sub\" in result.stdout\n    assert \"top\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_sub",
        "content": "def test_script_sub():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app_cli.py\",\n            \"run\",\n            \"sub\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"bye\" in result.stdout\n    assert \"hello\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_top",
        "content": "def test_script_top():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app_cli.py\",\n            \"run\",\n            \"top\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"top\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_sub_hello",
        "content": "def test_script_sub_hello():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app_cli.py\",\n            \"run\",\n            \"sub\",\n            \"hello\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"sub hello\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_sub_bye",
        "content": "def test_script_sub_bye():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_app_cli.py\",\n            \"run\",\n            \"sub\",\n            \"bye\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"sub bye\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_sub",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_top",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_sub_hello",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_sub_bye",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_multi_app_sub.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"--app\",\n            \"sub_app\",\n            \"tests/assets/cli/multi_app.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"bye\" in result.stdout\n    assert \"hello\" in result.stdout\n    assert \"top\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"--app\",\n            \"sub_app\",\n            \"tests/assets/cli/multi_app.py\",\n            \"run\",\n            \"hello\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello World\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_multi_func.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_func.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Say hi to someone, by default to the World.\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/multi_func.py\",\n            \"run\",\n            \"--name\",\n            \"Camila\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello Camila\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_func_non_existent",
        "content": "def test_script_func_non_existent():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"--func\",\n            \"non_existent\",\n            \"tests/assets/cli/multi_func.py\",\n            \"run\",\n            \"--name\",\n            \"Camila\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Not a function:\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_func_not_function",
        "content": "def test_script_func_not_function():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"--func\",\n            \"message\",\n            \"tests/assets/cli/multi_func.py\",\n            \"run\",\n            \"--name\",\n            \"Camila\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Not a function:\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_func",
        "content": "def test_script_func():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"--func\",\n            \"say_stuff\",\n            \"tests/assets/cli/multi_func.py\",\n            \"run\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello\" not in result.stdout\n    assert \"Stuff\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_func_non_existent",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_func_not_function",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_func",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_not_python.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_not_python",
        "content": "def test_not_python():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/not_python.txt\",\n            \"run\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Could not import as Python file\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_not_python",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_sub.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_hello",
        "content": "def test_script_hello():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/sample.py\",\n            \"run\",\n            \"hello\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello World!\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_hello_name",
        "content": "def test_script_hello_name():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/sample.py\",\n            \"run\",\n            \"hello\",\n            \"--name\",\n            \"Camila\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello Camila!\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_hello_name_formal",
        "content": "def test_script_hello_name_formal():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/sample.py\",\n            \"run\",\n            \"hello\",\n            \"--name\",\n            \"Camila\",\n            \"--formal\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Good morning Ms. Camila\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_bye",
        "content": "def test_script_bye():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/sample.py\",\n            \"run\",\n            \"bye\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Goodbye\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_bye_friend",
        "content": "def test_script_bye_friend():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/sample.py\",\n            \"run\",\n            \"bye\",\n            \"--friend\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Goodbye my friend\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/sample.py\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"run\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_not_python",
        "content": "def test_not_python():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/not_python.txt\",\n            \"run\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Could not import as Python file\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_hello",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_hello_name",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_hello_name_formal",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_bye",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_bye_friend",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_python",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_sub_completion.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_completion_run",
        "content": "def test_script_completion_run():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", \"-m\", \"typer\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"___MAIN__.PY_COMPLETE\": \"complete_bash\",\n            \"_PYTHON _M TYPER_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"typer tests/assets/cli/sample.py run hello --\",\n            \"COMP_CWORD\": \"4\",\n        },\n    )\n    assert \"--name\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_completion_run",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_sub_help.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            \"-m\",\n            \"typer\",\n            \"tests/assets/cli/sample.py\",\n            \"run\",\n            \"--help\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"bye\" in result.stdout\n    assert \"Say bye\" in result.stdout\n    assert \"hello\" in result.stdout\n    assert \"Say hi\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_cli/test_version.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script_help",
        "content": "def test_script_help():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", \"-m\", \"typer\", \"--version\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Typer version:\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script_help",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_completion/colon_example.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "_complete",
        "content": "def _complete(incomplete: str) -> str:\n    for image, desc in image_desc:\n        if image.startswith(incomplete):\n            yield image, desc",
        "signature": {
          "args": [
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "image",
        "content": "def image(name: str = typer.Option(autocompletion=_complete)):\n    typer.echo(name)",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(autocompletion=_complete)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "_complete",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "image",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "image",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "image",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/example_rich_tags.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "create",
        "content": "def create(username: str):\n    \"\"\"\n    Create a [green]new[green/] user with USERNAME.\n    \"\"\"\n    print(f\"Creating user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete",
        "content": "def delete(username: str):\n    \"\"\"\n    Delete a user with [bold]USERNAME[/].\n    \"\"\"\n    print(f\"Deleting user: {username}\")",
        "signature": {
          "args": [
            "username"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "delete_all",
        "content": "def delete_all():\n    \"\"\"\n    [red]Delete ALL users[/red] in the database.\n    \"\"\"\n    print(\"Deleting all users\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "create",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "delete_all",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/path_example.py",
    "type": "python",
    "imports": [
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "f",
        "content": "def f(p: Path):\n    print(p)",
        "signature": {
          "args": [
            "p"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "f",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "f",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_completion.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "docs_src.commands.index",
        "type": "external"
      },
      {
        "module": "utils",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_show_completion",
        "content": "def test_show_completion():\n    result = subprocess.run(\n        [\n            \"bash\",\n            \"-c\",\n            f\"'{sys.executable}' -m coverage run '{mod.__file__}' --show-completion\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"SHELL\": \"/bin/bash\", \"_TYPER_COMPLETE_TESTING\": \"True\"},\n    )\n    assert \"_TUTORIAL001.PY_COMPLETE=complete_bash\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "needs_bash",
          "needs_linux"
        ]
      },
      {
        "name": "test_install_completion",
        "content": "def test_install_completion():\n    bash_completion_path: Path = Path.home() / \".bashrc\"\n    text = \"\"\n    if bash_completion_path.is_file():  # pragma: no cover\n        text = bash_completion_path.read_text()\n    result = subprocess.run(\n        [\n            \"bash\",\n            \"-c\",\n            f\"'{sys.executable}' -m coverage run '{mod.__file__}' --install-completion\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"SHELL\": \"/bin/bash\", \"_TYPER_COMPLETE_TESTING\": \"True\"},\n    )\n    new_text = bash_completion_path.read_text()\n    bash_completion_path.write_text(text)\n    assert \"source\" in new_text\n    assert str(Path(\".bash_completions/tutorial001.py.sh\")) in new_text\n    assert \"completion installed in\" in result.stdout\n    assert \"Completion will take effect once you restart the terminal\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "needs_bash",
          "needs_linux",
          "requires_completion_permission"
        ]
      },
      {
        "name": "test_completion_invalid_instruction",
        "content": "def test_completion_invalid_instruction():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"sourcebash\",\n        },\n    )\n    assert result.returncode != 0\n    assert \"Invalid completion instruction.\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_bash",
        "content": "def test_completion_source_bash():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"source_bash\",\n        },\n    )\n    assert (\n        \"complete -o default -F _tutorial001py_completion tutorial001.py\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_invalid_shell",
        "content": "def test_completion_source_invalid_shell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"source_xxx\",\n        },\n    )\n    assert \"Shell xxx not supported.\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_invalid_instruction",
        "content": "def test_completion_source_invalid_instruction():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"explode_bash\",\n        },\n    )\n    assert 'Completion instruction \"explode\" not supported.' in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_zsh",
        "content": "def test_completion_source_zsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"source_zsh\",\n        },\n    )\n    assert \"compdef _tutorial001py_completion tutorial001.py\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_fish",
        "content": "def test_completion_source_fish():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"source_fish\",\n        },\n    )\n    assert \"complete --command tutorial001.py --no-files\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_powershell",
        "content": "def test_completion_source_powershell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"source_powershell\",\n        },\n    )\n    assert (\n        \"Register-ArgumentCompleter -Native -CommandName tutorial001.py -ScriptBlock $scriptblock\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_pwsh",
        "content": "def test_completion_source_pwsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"source_pwsh\",\n        },\n    )\n    assert (\n        \"Register-ArgumentCompleter -Native -CommandName tutorial001.py -ScriptBlock $scriptblock\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_show_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_completion",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_completion",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_completion",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_completion",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_completion",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_completion",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_completion",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_invalid_instruction",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_bash",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_invalid_shell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_invalid_instruction",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_zsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_fish",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_pwsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_completion_complete.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion_complete_subcommand_bash",
        "content": "def test_completion_complete_subcommand_bash():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"tutorial001.py del\",\n            \"COMP_CWORD\": \"1\",\n        },\n    )\n    assert \"delete\\ndelete-all\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_bash_invalid",
        "content": "def test_completion_complete_subcommand_bash_invalid():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"tutorial001.py del\",\n            \"COMP_CWORD\": \"42\",\n        },\n    )\n    assert \"create\\ndelete\\ndelete-all\\ninit\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_zsh",
        "content": "def test_completion_complete_subcommand_zsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial001.py del\",\n        },\n    )\n    assert (\n        \"\"\"_arguments '*: :((\"delete\":\"Delete a user with USERNAME.\"\\n\"\"\"\n        \"\"\"\\\"delete-all\":\"Delete ALL users in the database.\"))'\"\"\"\n    ) in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_zsh_files",
        "content": "def test_completion_complete_subcommand_zsh_files():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial001.py delete \",\n        },\n    )\n    assert (\"_files\") in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_fish",
        "content": "def test_completion_complete_subcommand_fish():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_fish\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial001.py del\",\n            \"_TYPER_COMPLETE_FISH_ACTION\": \"get-args\",\n        },\n    )\n    assert (\n        \"delete\\tDelete a user with USERNAME.\\ndelete-all\\tDelete ALL users in the database.\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_fish_should_complete",
        "content": "def test_completion_complete_subcommand_fish_should_complete():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_fish\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial001.py del\",\n            \"_TYPER_COMPLETE_FISH_ACTION\": \"is-args\",\n        },\n    )\n    assert result.returncode == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_fish_should_complete_no",
        "content": "def test_completion_complete_subcommand_fish_should_complete_no():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_fish\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial001.py delete \",\n            \"_TYPER_COMPLETE_FISH_ACTION\": \"is-args\",\n        },\n    )\n    assert result.returncode != 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_powershell",
        "content": "def test_completion_complete_subcommand_powershell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_powershell\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial001.py del\",\n        },\n    )\n    assert (\n        \"delete:::Delete a user with USERNAME.\\ndelete-all:::Delete ALL users in the database.\"\n    ) in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_pwsh",
        "content": "def test_completion_complete_subcommand_pwsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_pwsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial001.py del\",\n        },\n    )\n    assert (\n        \"delete:::Delete a user with USERNAME.\\ndelete-all:::Delete ALL users in the database.\"\n    ) in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_noshell",
        "content": "def test_completion_complete_subcommand_noshell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL001.PY_COMPLETE\": \"complete_noshell\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial001.py del\",\n        },\n    )\n    assert (\"\") in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion_complete_subcommand_bash",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_bash_invalid",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_zsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_zsh_files",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_fish",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_fish_should_complete",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_fish_should_complete_no",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_pwsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_noshell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_completion_complete_no_help.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "docs_src.commands.index",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion_complete_subcommand_zsh",
        "content": "def test_completion_complete_subcommand_zsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL002.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial002.py \",\n        },\n    )\n    assert \"create\" in result.stdout\n    assert \"delete\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_fish",
        "content": "def test_completion_complete_subcommand_fish():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL002.PY_COMPLETE\": \"complete_fish\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial002.py \",\n            \"_TYPER_COMPLETE_FISH_ACTION\": \"get-args\",\n        },\n    )\n    assert \"create\\ndelete\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_powershell",
        "content": "def test_completion_complete_subcommand_powershell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL002.PY_COMPLETE\": \"complete_powershell\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial002.py \",\n        },\n    )\n    assert (\"create::: \\ndelete::: \") in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_pwsh",
        "content": "def test_completion_complete_subcommand_pwsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL002.PY_COMPLETE\": \"complete_pwsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial002.py \",\n        },\n    )\n    assert (\"create::: \\ndelete::: \") in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion_complete_subcommand_zsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_fish",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_pwsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_completion_complete_rich.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"create\", \"DeadPool\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert result.returncode == 0\n    assert \"Creating user: DeadPool\" in result.stdout\n\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"delete\", \"DeadPool\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert result.returncode == 0\n    assert \"Deleting user: DeadPool\" in result.stdout\n\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"delete-all\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert result.returncode == 0\n    assert \"Deleting all users\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_bash",
        "content": "def test_completion_complete_subcommand_bash():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_EXAMPLE_RICH_TAGS.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"example_rich_tags.py del\",\n            \"COMP_CWORD\": \"1\",\n        },\n    )\n    assert \"delete\\ndelete-all\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_zsh",
        "content": "def test_completion_complete_subcommand_zsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_EXAMPLE_RICH_TAGS.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"example_rich_tags.py del\",\n        },\n    )\n    assert (\n        \"\"\"_arguments '*: :((\"delete\":\"Delete a user with USERNAME.\"\\n\"\"\"\n        \"\"\"\\\"delete-all\":\"Delete ALL users in the database.\"))'\"\"\"\n    ) in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_fish",
        "content": "def test_completion_complete_subcommand_fish():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_EXAMPLE_RICH_TAGS.PY_COMPLETE\": \"complete_fish\",\n            \"_TYPER_COMPLETE_ARGS\": \"example_rich_tags.py del\",\n            \"_TYPER_COMPLETE_FISH_ACTION\": \"get-args\",\n        },\n    )\n    assert (\n        \"delete\\tDelete a user with USERNAME.\\ndelete-all\\tDelete ALL users in the database.\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_powershell",
        "content": "def test_completion_complete_subcommand_powershell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_EXAMPLE_RICH_TAGS.PY_COMPLETE\": \"complete_powershell\",\n            \"_TYPER_COMPLETE_ARGS\": \"example_rich_tags.py del\",\n        },\n    )\n    assert (\n        \"delete:::Delete a user with USERNAME.\\ndelete-all:::Delete ALL users in the database.\"\n    ) in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_complete_subcommand_pwsh",
        "content": "def test_completion_complete_subcommand_pwsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_EXAMPLE_RICH_TAGS.PY_COMPLETE\": \"complete_pwsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"example_rich_tags.py del\",\n        },\n    )\n    assert (\n        \"delete:::Delete a user with USERNAME.\\ndelete-all:::Delete ALL users in the database.\"\n    ) in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_bash",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_zsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_fish",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_complete_subcommand_pwsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_completion_install.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "unittest",
        "type": "external"
      },
      {
        "module": "shellingham",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.index",
        "type": "external"
      },
      {
        "module": "utils",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion_install_no_shell",
        "content": "def test_completion_install_no_shell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--install-completion\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    assert \"Option '--install-completion' requires an argument\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "requires_completion_permission"
        ]
      },
      {
        "name": "test_completion_install_bash",
        "content": "def test_completion_install_bash():\n    bash_completion_path: Path = Path.home() / \".bashrc\"\n    text = \"\"\n    if bash_completion_path.is_file():\n        text = bash_completion_path.read_text()\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            mod.__file__,\n            \"--install-completion\",\n            \"bash\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    new_text = bash_completion_path.read_text()\n    bash_completion_path.write_text(text)\n    install_source = Path(\".bash_completions/tutorial001.py.sh\")\n    assert str(install_source) not in text\n    assert str(install_source) in new_text\n    assert \"completion installed in\" in result.stdout\n    assert \"Completion will take effect once you restart the terminal\" in result.stdout\n    install_source_path = Path.home() / install_source\n    assert install_source_path.is_file()\n    install_content = install_source_path.read_text()\n    install_source_path.unlink()\n    assert (\n        \"complete -o default -F _tutorial001py_completion tutorial001.py\"\n        in install_content\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "requires_completion_permission"
        ]
      },
      {
        "name": "test_completion_install_zsh",
        "content": "def test_completion_install_zsh():\n    completion_path: Path = Path.home() / \".zshrc\"\n    text = \"\"\n    if not completion_path.is_file():  # pragma: no cover\n        completion_path.write_text('echo \"custom .zshrc\"')\n    if completion_path.is_file():\n        text = completion_path.read_text()\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            mod.__file__,\n            \"--install-completion\",\n            \"zsh\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    new_text = completion_path.read_text()\n    completion_path.write_text(text)\n    zfunc_fragment = \"fpath+=~/.zfunc\"\n    assert zfunc_fragment in new_text\n    assert \"completion installed in\" in result.stdout\n    assert \"Completion will take effect once you restart the terminal\" in result.stdout\n    install_source_path = Path.home() / \".zfunc/_tutorial001.py\"\n    assert install_source_path.is_file()\n    install_content = install_source_path.read_text()\n    install_source_path.unlink()\n    assert \"compdef _tutorial001py_completion tutorial001.py\" in install_content",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "requires_completion_permission"
        ]
      },
      {
        "name": "test_completion_install_fish",
        "content": "def test_completion_install_fish():\n    script_path = Path(mod.__file__)\n    completion_path: Path = (\n        Path.home() / f\".config/fish/completions/{script_path.name}.fish\"\n    )\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            mod.__file__,\n            \"--install-completion\",\n            \"fish\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    new_text = completion_path.read_text()\n    completion_path.unlink()\n    assert \"complete --command tutorial001.py\" in new_text\n    assert \"completion installed in\" in result.stdout\n    assert \"Completion will take effect once you restart the terminal\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "requires_completion_permission"
        ]
      },
      {
        "name": "test_completion_install_powershell",
        "content": "def test_completion_install_powershell():\n    completion_path: Path = (\n        Path.home() / \".config/powershell/Microsoft.PowerShell_profile.ps1\"\n    )\n    completion_path_bytes = f\"{completion_path}\\n\".encode(\"windows-1252\")\n    text = \"\"\n    if completion_path.is_file():  # pragma: no cover\n        text = completion_path.read_text()\n\n    with mock.patch.object(\n        shellingham, \"detect_shell\", return_value=(\"pwsh\", \"/usr/bin/pwsh\")\n    ):\n        with mock.patch.object(\n            subprocess,\n            \"run\",\n            return_value=subprocess.CompletedProcess(\n                [\"pwsh\"], returncode=0, stdout=completion_path_bytes\n            ),\n        ):\n            result = runner.invoke(app, [\"--install-completion\"])\n    install_script = \"Register-ArgumentCompleter -Native -CommandName mocked-typer-testing-app -ScriptBlock $scriptblock\"\n    parent: Path = completion_path.parent\n    parent.mkdir(parents=True, exist_ok=True)\n    completion_path.write_text(install_script)\n    new_text = completion_path.read_text()\n    completion_path.write_text(text)\n    assert install_script not in text\n    assert install_script in new_text\n    assert \"completion installed in\" in result.stdout\n    assert \"Completion will take effect once you restart the terminal\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "requires_completion_permission"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion_install_no_shell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_bash",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_zsh",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_fish",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_fish",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_fish",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_fish",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_fish",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "encode",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "object",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "object",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "CompletedProcess",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "mkdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_install_powershell",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_completion_option_colon.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--name\", \"DeadPool\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert result.returncode == 0\n    assert \"DeadPool\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_bash_all",
        "content": "def test_completion_colon_bash_all():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"colon_example.py --name \",\n            \"COMP_CWORD\": \"2\",\n        },\n    )\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_bash_partial",
        "content": "def test_completion_colon_bash_partial():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"colon_example.py --name alpine \",\n            \"COMP_CWORD\": \"2\",\n        },\n    )\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_bash_single",
        "content": "def test_completion_colon_bash_single():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"colon_example.py --name alpine:hell \",\n            \"COMP_CWORD\": \"2\",\n        },\n    )\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" not in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_zsh_all",
        "content": "def test_completion_colon_zsh_all():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name \",\n        },\n    )\n    assert \"alpine\\\\\\\\:hello\" in result.stdout\n    assert \"alpine\\\\\\\\:latest\" in result.stdout\n    assert \"nvidia/cuda\\\\\\\\:10.0-devel-ubuntu18.04\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_zsh_partial",
        "content": "def test_completion_colon_zsh_partial():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name alpine\",\n        },\n    )\n    assert \"alpine\\\\\\\\:hello\" in result.stdout\n    assert \"alpine\\\\\\\\:latest\" in result.stdout\n    assert \"nvidia/cuda\\\\\\\\:10.0-devel-ubuntu18.04\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_zsh_single",
        "content": "def test_completion_colon_zsh_single():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name alpine:hell\",\n        },\n    )\n    assert \"alpine\\\\\\\\:hello\" in result.stdout\n    assert \"alpine\\\\\\\\:latest\" not in result.stdout\n    assert \"nvidia/cuda\\\\\\\\:10.0-devel-ubuntu18.04\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_powershell_all",
        "content": "def test_completion_colon_powershell_all():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_powershell\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name \",\n            \"_TYPER_COMPLETE_WORD_TO_COMPLETE\": \"\",\n        },\n    )\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_powershell_partial",
        "content": "def test_completion_colon_powershell_partial():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_powershell\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name alpine\",\n            \"_TYPER_COMPLETE_WORD_TO_COMPLETE\": \"alpine\",\n        },\n    )\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_powershell_single",
        "content": "def test_completion_colon_powershell_single():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_powershell\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name alpine:hell\",\n            \"_TYPER_COMPLETE_WORD_TO_COMPLETE\": \"alpine:hell\",\n        },\n    )\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" not in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_pwsh_all",
        "content": "def test_completion_colon_pwsh_all():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_pwsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name\",\n        },\n    )\n\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_pwsh_partial",
        "content": "def test_completion_colon_pwsh_partial():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_pwsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name alpine\",\n            \"_TYPER_COMPLETE_WORD_TO_COMPLETE\": \"alpine\",\n        },\n    )\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_colon_pwsh_single",
        "content": "def test_completion_colon_pwsh_single():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COLON_EXAMPLE.PY_COMPLETE\": \"complete_pwsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"colon_example.py --name alpine:hell\",\n            \"_TYPER_COMPLETE_WORD_TO_COMPLETE\": \"alpine:hell\",\n        },\n    )\n    assert \"alpine:hello\" in result.stdout\n    assert \"alpine:latest\" not in result.stdout\n    assert \"nvidia/cuda:10.0-devel-ubuntu18.04\" not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_bash_all",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_bash_partial",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_bash_single",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_zsh_all",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_zsh_partial",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_zsh_single",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_powershell_all",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_powershell_partial",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_powershell_single",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_pwsh_all",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_pwsh_partial",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_colon_pwsh_single",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_completion_path.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"path/to/deadpool\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert result.returncode == 0\n    assert \"deadpool\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_path_bash",
        "content": "def test_completion_path_bash():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_PATH_EXAMPLE.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"path_example.py \",\n            \"COMP_CWORD\": \"2\",\n        },\n    )\n    assert result.returncode == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_path_bash",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_completion_show.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "unittest",
        "type": "external"
      },
      {
        "module": "shellingham",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.index",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion_show_no_shell",
        "content": "def test_completion_show_no_shell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--show-completion\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    assert \"Option '--show-completion' requires an argument\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_show_bash",
        "content": "def test_completion_show_bash():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            mod.__file__,\n            \"--show-completion\",\n            \"bash\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    assert (\n        \"complete -o default -F _tutorial001py_completion tutorial001.py\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_zsh",
        "content": "def test_completion_source_zsh():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            mod.__file__,\n            \"--show-completion\",\n            \"zsh\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    assert \"compdef _tutorial001py_completion tutorial001.py\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_fish",
        "content": "def test_completion_source_fish():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            mod.__file__,\n            \"--show-completion\",\n            \"fish\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    assert \"complete --command tutorial001.py --no-files\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_powershell",
        "content": "def test_completion_source_powershell():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            mod.__file__,\n            \"--show-completion\",\n            \"powershell\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    assert (\n        \"Register-ArgumentCompleter -Native -CommandName tutorial001.py -ScriptBlock $scriptblock\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_source_pwsh",
        "content": "def test_completion_source_pwsh():\n    result = subprocess.run(\n        [\n            sys.executable,\n            \"-m\",\n            \"coverage\",\n            \"run\",\n            mod.__file__,\n            \"--show-completion\",\n            \"pwsh\",\n        ],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\n        },\n    )\n    assert (\n        \"Register-ArgumentCompleter -Native -CommandName tutorial001.py -ScriptBlock $scriptblock\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_show_invalid_shell",
        "content": "def test_completion_show_invalid_shell():\n    with mock.patch.object(\n        shellingham, \"detect_shell\", return_value=(\"xshell\", \"/usr/bin/xshell\")\n    ):\n        result = runner.invoke(app, [\"--show-completion\"])\n    assert \"Shell xshell not supported\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion_show_no_shell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_show_bash",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_zsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_fish",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_source_pwsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_show_invalid_shell",
        "caller_class": null,
        "called_function": "object",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_show_invalid_shell",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_completion/test_sanitization.py",
    "type": "python",
    "imports": [
      {
        "module": "importlib.machinery",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "unittest.mock",
        "type": "external"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer._completion_classes",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_sanitize_help_text",
        "content": "def test_sanitize_help_text(\n    find_spec: Union[ModuleSpec, None], help_text: str, expected: str\n):\n    with patch(\"importlib.util.find_spec\", return_value=find_spec) as mock_find_spec:\n        assert _sanitize_help_text(help_text) == expected\n    mock_find_spec.assert_called_once_with(\"rich\")",
        "signature": {
          "args": [
            "find_spec",
            "help_text",
            "expected"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('find_spec, help_text, expected', [(ModuleSpec('rich', loader=None), 'help text without rich tags', 'help text without rich tags'), (None, 'help text without rich tags', 'help text without rich tags'), (ModuleSpec('rich', loader=None), 'help [bold]with[/] rich tags', 'help with rich tags'), (None, 'help [bold]with[/] rich tags', 'help [bold]with[/] rich tags')])"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_sanitize_help_text",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_sanitize_help_text",
        "caller_class": null,
        "called_function": "_sanitize_help_text",
        "called_function_files": [
          "typer/_completion_classes.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_sanitize_help_text",
        "caller_class": null,
        "called_function": "assert_called_once_with",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_sanitize_help_text",
        "caller_class": null,
        "called_function": "parametrize",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_sanitize_help_text",
        "caller_class": null,
        "called_function": "ModuleSpec",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_sanitize_help_text",
        "caller_class": null,
        "called_function": "ModuleSpec",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_corner_cases.py",
    "type": "python",
    "imports": [
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "tests.assets",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_hidden_option",
        "content": "def test_hidden_option():\n    result = runner.invoke(mod.app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Say hello\" in result.output\n    assert \"--name\" not in result.output\n    assert \"/lastname\" in result.output\n    assert \"TEST_LASTNAME\" in result.output\n    assert \"(dynamic)\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_hidden_option_no_rich",
        "content": "def test_hidden_option_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n\n    result = runner.invoke(mod.app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Say hello\" in result.output\n    assert \"--name\" not in result.output\n    assert \"/lastname\" in result.output\n    assert \"TEST_LASTNAME\" in result.output\n    assert \"(dynamic)\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_coverage_call",
        "content": "def test_coverage_call():\n    result = runner.invoke(mod.app)\n    assert result.exit_code == 0\n    assert \"Hello John Doe, it seems you have 42\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_hidden_option",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_hidden_option_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_hidden_option_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_coverage_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_deprecation.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_deprecation",
        "content": "def test_deprecation():\n    app = typer.Typer()\n\n    def add_command():\n        @app.command()\n        def cmd(\n            opt: Optional[float] = typer.Option(\n                3.14,\n                is_flag=True,\n                flag_value=\"42\",\n                help=\"Some wonderful number\",\n            ),\n        ): ...  # pragma: no cover\n\n    with pytest.warns(\n        match=\"The 'is_flag' and 'flag_value' parameters are not supported by Typer\"\n    ):\n        add_command()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "add_command",
        "content": "    def add_command():\n        @app.command()\n        def cmd(\n            opt: Optional[float] = typer.Option(\n                3.14,\n                is_flag=True,\n                flag_value=\"42\",\n                help=\"Some wonderful number\",\n            ),\n        ): ...  # pragma: no cover",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "        def cmd(\n            opt: Optional[float] = typer.Option(\n                3.14,\n                is_flag=True,\n                flag_value=\"42\",\n                help=\"Some wonderful number\",\n            ),\n        ): ...  # pragma: no cover",
        "signature": {
          "args": [
            "opt"
          ],
          "defaults": [
            "typer.Option(3.14, is_flag=True, flag_value='42', help='Some wonderful number')"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_deprecation",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_exit_errors.py",
    "type": "python",
    "imports": [
      {
        "module": "errno",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.completion",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_eoferror",
        "content": "def test_eoferror():\n    # Mainly for coverage/completeness\n    app = typer.Typer()\n\n    @app.command()\n    def main():\n        raise EOFError()\n\n    result = runner.invoke(app)\n    assert result.exit_code == 1",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main():\n        raise EOFError()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_keyboardinterrupt",
        "content": "def test_keyboardinterrupt():\n    # Mainly for coverage/completeness\n    app = typer.Typer()\n\n    @app.command()\n    def main():\n        raise KeyboardInterrupt()\n\n    result = runner.invoke(app)\n    assert result.exit_code == 130\n    assert result.stdout == \"\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main():\n        raise KeyboardInterrupt()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_oserror",
        "content": "def test_oserror():\n    # Mainly for coverage/completeness\n    app = typer.Typer()\n\n    @app.command()\n    def main():\n        e = OSError()\n        e.errno = errno.EPIPE\n        raise e\n\n    result = runner.invoke(app)\n    assert result.exit_code == 1",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main():\n        e = OSError()\n        e.errno = errno.EPIPE\n        raise e",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_oserror_no_epipe",
        "content": "def test_oserror_no_epipe():\n    # Mainly for coverage/completeness\n    app = typer.Typer()\n\n    @app.command()\n    def main():\n        raise OSError()\n\n    result = runner.invoke(app)\n    assert result.exit_code == 1",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main():\n        raise OSError()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_eoferror",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "EOFError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_keyboardinterrupt",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "KeyboardInterrupt",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_oserror",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "OSError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_oserror_no_epipe",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "OSError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_future_annotations.py",
    "type": "python",
    "imports": [
      {
        "module": "__future__",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_annotated",
        "content": "def test_annotated():\n    app = typer.Typer()\n\n    @app.command()\n    def cmd(force: Annotated[bool, typer.Option(\"--force\")] = False):\n        if force:\n            print(\"Forcing operation\")\n        else:\n            print(\"Not forcing\")\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0, result.output\n    assert \"Not forcing\" in result.output\n\n    result = runner.invoke(app, [\"--force\"])\n    assert result.exit_code == 0, result.output\n    assert \"Forcing operation\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(force: Annotated[bool, typer.Option(\"--force\")] = False):\n        if force:\n            print(\"Forcing operation\")\n        else:\n            print(\"Not forcing\")",
        "signature": {
          "args": [
            "force"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_annotated",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_launch.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "unittest.mock",
        "type": "external"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_launch_url_unix",
        "content": "def test_launch_url_unix(system: str, command: str):\n    with patch(\"platform.system\", return_value=system), patch(\n        \"shutil.which\", return_value=True\n    ), patch(\"subprocess.Popen\") as mock_popen:\n        typer.launch(url)\n\n    mock_popen.assert_called_once_with(\n        [command, url], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT\n    )",
        "signature": {
          "args": [
            "system",
            "command"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('system, command', [('Darwin', 'open'), ('Linux', 'xdg-open'), ('FreeBSD', 'xdg-open')])"
        ]
      },
      {
        "name": "test_launch_url_windows",
        "content": "def test_launch_url_windows():\n    with patch(\"platform.system\", return_value=\"Windows\"), patch(\n        \"webbrowser.open\"\n    ) as mock_webbrowser_open:\n        typer.launch(url)\n\n    mock_webbrowser_open.assert_called_once_with(url)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_launch_url_no_xdg_open",
        "content": "def test_launch_url_no_xdg_open():\n    with patch(\"platform.system\", return_value=\"Linux\"), patch(\n        \"shutil.which\", return_value=None\n    ), patch(\"webbrowser.open\") as mock_webbrowser_open:\n        typer.launch(url)\n\n    mock_webbrowser_open.assert_called_once_with(url)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_calls_original_launch_when_not_passing_urls",
        "content": "def test_calls_original_launch_when_not_passing_urls():\n    with patch(\"typer.main.click.launch\", return_value=0) as launch_mock:\n        typer.launch(\"not a url\")\n\n    launch_mock.assert_called_once_with(\"not a url\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_launch_url_unix",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_unix",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_unix",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_unix",
        "caller_class": null,
        "called_function": "launch",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_unix",
        "caller_class": null,
        "called_function": "assert_called_once_with",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_unix",
        "caller_class": null,
        "called_function": "parametrize",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_windows",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_windows",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_windows",
        "caller_class": null,
        "called_function": "launch",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_windows",
        "caller_class": null,
        "called_function": "assert_called_once_with",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_no_xdg_open",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_no_xdg_open",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_no_xdg_open",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_no_xdg_open",
        "caller_class": null,
        "called_function": "launch",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_launch_url_no_xdg_open",
        "caller_class": null,
        "called_function": "assert_called_once_with",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_calls_original_launch_when_not_passing_urls",
        "caller_class": null,
        "called_function": "patch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_calls_original_launch_when_not_passing_urls",
        "caller_class": null,
        "called_function": "launch",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_calls_original_launch_when_not_passing_urls",
        "caller_class": null,
        "called_function": "assert_called_once_with",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_others.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "unittest",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "shellingham",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.completion",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.main",
        "type": "external"
      },
      {
        "module": "typer.models",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "utils",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "CustomClickParser",
        "methods": [
          {
            "name": "convert",
            "content": "        def convert(\n            self,\n            value: str,\n            param: typing.Optional[click.Parameter],\n            ctx: typing.Optional[click.Context],\n        ) -> typing.Any:\n            return int(value)  # pragma: no cover",
            "signature": {
              "args": [
                "self",
                "value",
                "param",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.ParamType"
        ]
      },
      {
        "name": "CustomClickParser",
        "methods": [
          {
            "name": "convert",
            "content": "        def convert(\n            self,\n            value: str,\n            param: typing.Optional[click.Parameter],\n            ctx: typing.Optional[click.Context],\n        ) -> typing.Any:\n            return int(value)  # pragma: no cover",
            "signature": {
              "args": [
                "self",
                "value",
                "param",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.ParamType"
        ]
      }
    ],
    "functions": [
      {
        "name": "test_help_from_info",
        "content": "def test_help_from_info():\n    # Mainly for coverage/completeness\n    value = solve_typer_info_help(TyperInfo())\n    assert value is None",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_defaults_from_info",
        "content": "def test_defaults_from_info():\n    # Mainly for coverage/completeness\n    value = solve_typer_info_defaults(TyperInfo())\n    assert value",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_too_many_parsers",
        "content": "def test_too_many_parsers():\n    def custom_parser(value: str) -> int:\n        return int(value)  # pragma: no cover\n\n    class CustomClickParser(click.ParamType):\n        name = \"custom_parser\"\n\n        def convert(\n            self,\n            value: str,\n            param: typing.Optional[click.Parameter],\n            ctx: typing.Optional[click.Context],\n        ) -> typing.Any:\n            return int(value)  # pragma: no cover\n\n    expected_error = (\n        \"Multiple custom type parsers provided. \"\n        \"`parser` and `click_type` may not both be provided.\"\n    )\n\n    with pytest.raises(ValueError, match=expected_error):\n        ParameterInfo(parser=custom_parser, click_type=CustomClickParser())",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "custom_parser",
        "content": "    def custom_parser(value: str) -> int:\n        return int(value)  # pragma: no cover",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_valid_parser_permutations",
        "content": "def test_valid_parser_permutations():\n    def custom_parser(value: str) -> int:\n        return int(value)  # pragma: no cover\n\n    class CustomClickParser(click.ParamType):\n        name = \"custom_parser\"\n\n        def convert(\n            self,\n            value: str,\n            param: typing.Optional[click.Parameter],\n            ctx: typing.Optional[click.Context],\n        ) -> typing.Any:\n            return int(value)  # pragma: no cover\n\n    ParameterInfo()\n    ParameterInfo(parser=custom_parser)\n    ParameterInfo(click_type=CustomClickParser())",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "custom_parser",
        "content": "    def custom_parser(value: str) -> int:\n        return int(value)  # pragma: no cover",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_install_invalid_shell",
        "content": "def test_install_invalid_shell():\n    app = typer.Typer()\n\n    @app.command()\n    def main():\n        print(\"Hello World\")\n\n    with mock.patch.object(\n        shellingham, \"detect_shell\", return_value=(\"xshell\", \"/usr/bin/xshell\")\n    ):\n        result = runner.invoke(app, [\"--install-completion\"])\n        assert \"Shell xshell is not supported.\" in result.stdout\n    result = runner.invoke(app)\n    assert \"Hello World\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "requires_completion_permission"
        ]
      },
      {
        "name": "main",
        "content": "    def main():\n        print(\"Hello World\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_callback_too_many_parameters",
        "content": "def test_callback_too_many_parameters():\n    app = typer.Typer()\n\n    def name_callback(ctx, param, val1, val2):\n        pass  # pragma: no cover\n\n    @app.command()\n    def main(name: str = typer.Option(..., callback=name_callback)):\n        pass  # pragma: no cover\n\n    with pytest.raises(click.ClickException) as exc_info:\n        runner.invoke(app, [\"--name\", \"Camila\"])\n    assert (\n        exc_info.value.message == \"Too many CLI parameter callback function parameters\"\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "name_callback",
        "content": "    def name_callback(ctx, param, val1, val2):\n        pass  # pragma: no cover",
        "signature": {
          "args": [
            "ctx",
            "param",
            "val1",
            "val2"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(name: str = typer.Option(..., callback=name_callback)):\n        pass  # pragma: no cover",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(..., callback=name_callback)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_callback_2_untyped_parameters",
        "content": "def test_callback_2_untyped_parameters():\n    app = typer.Typer()\n\n    def name_callback(ctx, value):\n        print(f\"info name is: {ctx.info_name}\")\n        print(f\"value is: {value}\")\n\n    @app.command()\n    def main(name: str = typer.Option(..., callback=name_callback)):\n        print(\"Hello World\")\n\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert \"info name is: main\" in result.stdout\n    assert \"value is: Camila\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "name_callback",
        "content": "    def name_callback(ctx, value):\n        print(f\"info name is: {ctx.info_name}\")\n        print(f\"value is: {value}\")",
        "signature": {
          "args": [
            "ctx",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(name: str = typer.Option(..., callback=name_callback)):\n        print(\"Hello World\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(..., callback=name_callback)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_callback_3_untyped_parameters",
        "content": "def test_callback_3_untyped_parameters():\n    app = typer.Typer()\n\n    def name_callback(ctx, param, value):\n        print(f\"info name is: {ctx.info_name}\")\n        print(f\"param name is: {param.name}\")\n        print(f\"value is: {value}\")\n\n    @app.command()\n    def main(name: str = typer.Option(..., callback=name_callback)):\n        print(\"Hello World\")\n\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert \"info name is: main\" in result.stdout\n    assert \"param name is: name\" in result.stdout\n    assert \"value is: Camila\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "name_callback",
        "content": "    def name_callback(ctx, param, value):\n        print(f\"info name is: {ctx.info_name}\")\n        print(f\"param name is: {param.name}\")\n        print(f\"value is: {value}\")",
        "signature": {
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(name: str = typer.Option(..., callback=name_callback)):\n        print(\"Hello World\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(..., callback=name_callback)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_callback_4_list_none",
        "content": "def test_callback_4_list_none():\n    app = typer.Typer()\n\n    def names_callback(ctx, param, values: typing.Optional[typing.List[str]]):\n        if values is None:\n            return values\n        return [value.upper() for value in values]\n\n    @app.command()\n    def main(\n        names: typing.Optional[typing.List[str]] = typer.Option(\n            None, \"--name\", callback=names_callback\n        ),\n    ):\n        if names is None:\n            print(\"Hello World\")\n        else:\n            print(f\"Hello {', '.join(names)}\")\n\n    result = runner.invoke(app, [\"--name\", \"Sideshow\", \"--name\", \"Bob\"])\n    assert \"Hello SIDESHOW, BOB\" in result.stdout\n\n    result = runner.invoke(app, [])\n    assert \"Hello World\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "names_callback",
        "content": "    def names_callback(ctx, param, values: typing.Optional[typing.List[str]]):\n        if values is None:\n            return values\n        return [value.upper() for value in values]",
        "signature": {
          "args": [
            "ctx",
            "param",
            "values"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(\n        names: typing.Optional[typing.List[str]] = typer.Option(\n            None, \"--name\", callback=names_callback\n        ),\n    ):\n        if names is None:\n            print(\"Hello World\")\n        else:\n            print(f\"Hello {', '.join(names)}\")",
        "signature": {
          "args": [
            "names"
          ],
          "defaults": [
            "typer.Option(None, '--name', callback=names_callback)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_completion_argument",
        "content": "def test_completion_argument():\n    file_path = Path(__file__).parent / \"assets/completion_argument.py\"\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path), \"E\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COMPLETION_ARGUMENT.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"completion_argument.py E\",\n            \"_TYPER_COMPLETE_TESTING\": \"True\",\n        },\n    )\n    assert \"Emma\" in result.stdout or \"_files\" in result.stdout\n    assert \"ctx: completion_argument\" in result.stderr\n    assert \"arg is: name\" in result.stderr\n    assert \"incomplete is: E\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_untyped_parameters",
        "content": "def test_completion_untyped_parameters():\n    file_path = Path(__file__).parent / \"assets/completion_no_types.py\"\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COMPLETION_NO_TYPES.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"completion_no_types.py --name Sebastian --name Ca\",\n        },\n    )\n    assert \"info name is: completion_no_types.py\" in result.stderr\n    assert \"args is: []\" in result.stderr\n    assert \"incomplete is: Ca\" in result.stderr\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello World\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_untyped_parameters_different_order_correct_names",
        "content": "def test_completion_untyped_parameters_different_order_correct_names():\n    file_path = Path(__file__).parent / \"assets/completion_no_types_order.py\"\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_COMPLETION_NO_TYPES_ORDER.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"completion_no_types_order.py --name Sebastian --name Ca\",\n        },\n    )\n    assert \"info name is: completion_no_types_order.py\" in result.stderr\n    assert \"args is: []\" in result.stderr\n    assert \"incomplete is: Ca\" in result.stderr\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Hello World\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_autocompletion_too_many_parameters",
        "content": "def test_autocompletion_too_many_parameters():\n    app = typer.Typer()\n\n    def name_callback(ctx, args, incomplete, val2):\n        pass  # pragma: no cover\n\n    @app.command()\n    def main(name: str = typer.Option(..., autocompletion=name_callback)):\n        pass  # pragma: no cover\n\n    with pytest.raises(click.ClickException) as exc_info:\n        runner.invoke(app, [\"--name\", \"Camila\"])\n    assert exc_info.value.message == \"Invalid autocompletion callback parameters: val2\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "name_callback",
        "content": "    def name_callback(ctx, args, incomplete, val2):\n        pass  # pragma: no cover",
        "signature": {
          "args": [
            "ctx",
            "args",
            "incomplete",
            "val2"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(name: str = typer.Option(..., autocompletion=name_callback)):\n        pass  # pragma: no cover",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "typer.Option(..., autocompletion=name_callback)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_forward_references",
        "content": "def test_forward_references():\n    app = typer.Typer()\n\n    @app.command()\n    def main(arg1, arg2: int, arg3: \"int\", arg4: bool = False, arg5: \"bool\" = False):\n        print(f\"arg1: {type(arg1)} {arg1}\")\n        print(f\"arg2: {type(arg2)} {arg2}\")\n        print(f\"arg3: {type(arg3)} {arg3}\")\n        print(f\"arg4: {type(arg4)} {arg4}\")\n        print(f\"arg5: {type(arg5)} {arg5}\")\n\n    result = runner.invoke(app, [\"Hello\", \"2\", \"invalid\"])\n\n    assert \"Invalid value for 'ARG3': 'invalid' is not a valid integer\" in result.output\n    result = runner.invoke(app, [\"Hello\", \"2\", \"3\", \"--arg4\", \"--arg5\"])\n    assert (\n        \"arg1: <class 'str'> Hello\\narg2: <class 'int'> 2\\narg3: <class 'int'> 3\\narg4: <class 'bool'> True\\narg5: <class 'bool'> True\\n\"\n        in result.stdout\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(arg1, arg2: int, arg3: \"int\", arg4: bool = False, arg5: \"bool\" = False):\n        print(f\"arg1: {type(arg1)} {arg1}\")\n        print(f\"arg2: {type(arg2)} {arg2}\")\n        print(f\"arg3: {type(arg3)} {arg3}\")\n        print(f\"arg4: {type(arg4)} {arg4}\")\n        print(f\"arg5: {type(arg5)} {arg5}\")",
        "signature": {
          "args": [
            "arg1",
            "arg2",
            "arg3",
            "arg4",
            "arg5"
          ],
          "defaults": [
            "False",
            "False"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_context_settings_inheritance_single_command",
        "content": "def test_context_settings_inheritance_single_command():\n    app = typer.Typer(context_settings={\"help_option_names\": [\"-h\", \"--help\"]})\n\n    @app.command()\n    def main(name: str):\n        pass  # pragma: no cover\n\n    result = runner.invoke(app, [\"main\", \"-h\"])\n    assert \"Show this message and exit.\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(name: str):\n        pass  # pragma: no cover",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_split_opt",
        "content": "def test_split_opt():\n    prefix, opt = _split_opt(\"--verbose\")\n    assert prefix == \"--\"\n    assert opt == \"verbose\"\n\n    prefix, opt = _split_opt(\"//verbose\")\n    assert prefix == \"//\"\n    assert opt == \"verbose\"\n\n    prefix, opt = _split_opt(\"-verbose\")\n    assert prefix == \"-\"\n    assert opt == \"verbose\"\n\n    prefix, opt = _split_opt(\"verbose\")\n    assert prefix == \"\"\n    assert opt == \"verbose\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help_from_info",
        "caller_class": null,
        "called_function": "solve_typer_info_help",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_from_info",
        "caller_class": null,
        "called_function": "TyperInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_defaults_from_info",
        "caller_class": null,
        "called_function": "solve_typer_info_defaults",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_defaults_from_info",
        "caller_class": null,
        "called_function": "TyperInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_parser",
        "caller_class": null,
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "convert",
        "caller_class": "CustomClickParser",
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_parser",
        "caller_class": null,
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "convert",
        "caller_class": "CustomClickParser",
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_install_invalid_shell",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_callback_too_many_parameters",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_callback_2_untyped_parameters",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_callback_3_untyped_parameters",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "name_callback",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_callback_4_list_none",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "names_callback",
        "caller_class": null,
        "called_function": "upper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_argument",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_argument",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_argument",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters_different_order_correct_names",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters_different_order_correct_names",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters_different_order_correct_names",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters_different_order_correct_names",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_untyped_parameters_different_order_correct_names",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_autocompletion_too_many_parameters",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_forward_references",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_context_settings_inheritance_single_command",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_split_opt",
        "caller_class": null,
        "called_function": "_split_opt",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_split_opt",
        "caller_class": null,
        "called_function": "_split_opt",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_split_opt",
        "caller_class": null,
        "called_function": "_split_opt",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_split_opt",
        "caller_class": null,
        "called_function": "_split_opt",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "convert",
        "content": "        def convert(\n            self,\n            value: str,\n            param: typing.Optional[click.Parameter],\n            ctx: typing.Optional[click.Context],\n        ) -> typing.Any:\n            return int(value)  # pragma: no cover",
        "signature": {
          "args": [
            "self",
            "value",
            "param",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "convert",
        "content": "        def convert(\n            self,\n            value: str,\n            param: typing.Optional[click.Parameter],\n            ctx: typing.Optional[click.Context],\n        ) -> typing.Any:\n            return int(value)  # pragma: no cover",
        "signature": {
          "args": [
            "self",
            "value",
            "param",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "tests/test_param_meta_empty.py",
    "type": "python",
    "imports": [
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "typer.models",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "StupidClass",
        "methods": [
          {
            "name": "__init__",
            "content": "        def __init__(self, a):\n            self.a = a",
            "signature": {
              "args": [
                "self",
                "a"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__eq__",
            "content": "        def __eq__(self, other) -> bool:\n            if other is ParamMeta.empty:\n                return True\n            try:\n                return self.a == other.a\n            except Exception:\n                return False",
            "signature": {
              "args": [
                "self",
                "other"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__ne__",
            "content": "        def __ne__(self, other: object) -> bool:\n            return not self.__eq__(other)",
            "signature": {
              "args": [
                "self",
                "other"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      }
    ],
    "functions": [
      {
        "name": "test_default_with_class_with_custom_eq",
        "content": "def test_default_with_class_with_custom_eq():\n    app = typer.Typer()\n\n    from typer.models import ParamMeta\n\n    class StupidClass:\n        def __init__(self, a):\n            self.a = a\n\n        def __eq__(self, other) -> bool:\n            if other is ParamMeta.empty:\n                return True\n            try:\n                return self.a == other.a\n            except Exception:\n                return False\n\n        def __ne__(self, other: object) -> bool:\n            return not self.__eq__(other)\n\n    @app.command()\n    def cmd(val=StupidClass(42)):\n        print(val)\n\n    assert StupidClass(666) == ParamMeta.empty\n    assert StupidClass(666) != StupidClass(1)\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0, result.output\n    assert \"StupidClass\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "cmd",
        "content": "    def cmd(val=StupidClass(42)):\n        print(val)",
        "signature": {
          "args": [
            "val"
          ],
          "defaults": [
            "StupidClass(42)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_default_with_class_with_custom_eq",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__ne__",
        "caller_class": "StupidClass",
        "called_function": "__eq__",
        "called_function_files": [],
        "called_method_files": [
          "tests/test_param_meta_empty.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "StupidClass",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "cmd",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "        def __init__(self, a):\n            self.a = a",
        "signature": {
          "args": [
            "self",
            "a"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__eq__",
        "content": "        def __eq__(self, other) -> bool:\n            if other is ParamMeta.empty:\n                return True\n            try:\n                return self.a == other.a\n            except Exception:\n                return False",
        "signature": {
          "args": [
            "self",
            "other"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__ne__",
        "content": "        def __ne__(self, other: object) -> bool:\n            return not self.__eq__(other)",
        "signature": {
          "args": [
            "self",
            "other"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "tests/test_prog_name.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_custom_prog_name",
        "content": "def test_custom_prog_name():\n    file_path = Path(__file__).parent / \"assets/prog_name.py\"\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path), \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage: custom-name [OPTIONS] I\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_custom_prog_name",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_custom_prog_name",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_custom_prog_name",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_rich_import.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_rich_not_imported_unnecessary",
        "content": "def test_rich_not_imported_unnecessary():\n    file_path = Path(__file__).parent / \"assets/print_modules.py\"\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    modules = result.stdout.splitlines()\n    modules = [\n        module\n        for module in modules\n        if module not in ACCEPTED_MODULES and module.startswith(\"rich\")\n    ]\n    assert not modules",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_rich_not_imported_unnecessary",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_not_imported_unnecessary",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_not_imported_unnecessary",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_not_imported_unnecessary",
        "caller_class": null,
        "called_function": "splitlines",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_not_imported_unnecessary",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_rich_markup_mode.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.completion",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_rich_markup_mode_none",
        "content": "def test_rich_markup_mode_none():\n    app = typer.Typer(rich_markup_mode=None)\n\n    @app.command()\n    def main(arg: str):\n        \"\"\"Main function\"\"\"\n        print(f\"Hello {arg}\")\n\n    assert app.rich_markup_mode is None\n\n    result = runner.invoke(app, [\"World\"])\n    assert \"Hello World\" in result.stdout\n\n    result = runner.invoke(app, [\"--help\"])\n    assert all(c not in result.stdout for c in rounded)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(arg: str):\n        \"\"\"Main function\"\"\"\n        print(f\"Hello {arg}\")",
        "signature": {
          "args": [
            "arg"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_rich_markup_mode_rich",
        "content": "def test_rich_markup_mode_rich():\n    app = typer.Typer(rich_markup_mode=\"rich\")\n\n    @app.command()\n    def main(arg: str):\n        \"\"\"Main function\"\"\"\n        print(f\"Hello {arg}\")\n\n    assert app.rich_markup_mode == \"rich\"\n\n    result = runner.invoke(app, [\"World\"])\n    assert \"Hello World\" in result.stdout\n\n    result = runner.invoke(app, [\"--help\"])\n    assert any(c in result.stdout for c in rounded)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(arg: str):\n        \"\"\"Main function\"\"\"\n        print(f\"Hello {arg}\")",
        "signature": {
          "args": [
            "arg"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_markup_mode_newline_pr815",
        "content": "def test_markup_mode_newline_pr815(mode: str, lines: List[str]):\n    app = typer.Typer(rich_markup_mode=mode)\n\n    @app.command()\n    def main(arg: str):\n        \"\"\"First line\n\n        Line 1\n\n        Line 2\n\n        Line 3\n        \"\"\"\n        print(f\"Hello {arg}\")\n\n    assert app.rich_markup_mode == mode\n\n    result = runner.invoke(app, [\"World\"])\n    assert \"Hello World\" in result.stdout\n\n    result = runner.invoke(app, [\"--help\"])\n    result_lines = [line.strip() for line in result.stdout.split(\"\\n\")]\n    if mode:\n        assert any(c in result.stdout for c in rounded)\n    help_start = result_lines.index(\"First line\")\n    arg_start = [i for i, row in enumerate(result_lines) if \"Arguments\" in row][0]\n    assert help_start != -1\n    assert result_lines[help_start:arg_start] == lines",
        "signature": {
          "args": [
            "mode",
            "lines"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('mode,lines', [pytest.param('markdown', ['First line', '', 'Line 1', '', 'Line 2', '', 'Line 3', '']), pytest.param('rich', ['First line', '', 'Line 1', '', 'Line 2', '', 'Line 3', '']), pytest.param(None, ['First line', '', 'Line 1', '', 'Line 2', '', 'Line 3', ''])])"
        ]
      },
      {
        "name": "main",
        "content": "    def main(arg: str):\n        \"\"\"First line\n\n        Line 1\n\n        Line 2\n\n        Line 3\n        \"\"\"\n        print(f\"Hello {arg}\")",
        "signature": {
          "args": [
            "arg"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_markup_mode_newline_issue447",
        "content": "def test_markup_mode_newline_issue447(mode: str, lines: List[str]):\n    app = typer.Typer(rich_markup_mode=mode)\n\n    @app.command()\n    def main(arg: str):\n        \"\"\"First line\n\n        Line 1\n        Line 2\n        Line 3\n        \"\"\"\n        print(f\"Hello {arg}\")\n\n    assert app.rich_markup_mode == mode\n\n    result = runner.invoke(app, [\"World\"])\n    assert \"Hello World\" in result.stdout\n\n    result = runner.invoke(app, [\"--help\"])\n    result_lines = [line.strip() for line in result.stdout.split(\"\\n\")]\n    if mode:\n        assert any(c in result.stdout for c in rounded)\n    help_start = result_lines.index(\"First line\")\n    arg_start = [i for i, row in enumerate(result_lines) if \"Arguments\" in row][0]\n    assert help_start != -1\n    assert result_lines[help_start:arg_start] == lines",
        "signature": {
          "args": [
            "mode",
            "lines"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('mode,lines', [pytest.param('markdown', ['First line', '', 'Line 1 Line 2 Line 3', '']), pytest.param('rich', ['First line', '', 'Line 1', 'Line 2', 'Line 3', '']), pytest.param(None, ['First line', '', 'Line 1 Line 2 Line 3', ''])])"
        ]
      },
      {
        "name": "main",
        "content": "    def main(arg: str):\n        \"\"\"First line\n\n        Line 1\n        Line 2\n        Line 3\n        \"\"\"\n        print(f\"Hello {arg}\")",
        "signature": {
          "args": [
            "arg"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_markup_mode_newline_mixed",
        "content": "def test_markup_mode_newline_mixed(mode: str, lines: List[str]):\n    app = typer.Typer(rich_markup_mode=mode)\n\n    @app.command()\n    def main(arg: str):\n        \"\"\"This header\n        is long\n\n        Line 1\n\n        Line 2\n        continues here\n\n        Line 3\n        \"\"\"\n        print(f\"Hello {arg}\")\n\n    assert app.rich_markup_mode == mode\n\n    result = runner.invoke(app, [\"World\"])\n    assert \"Hello World\" in result.stdout\n\n    result = runner.invoke(app, [\"--help\"])\n    result_lines = [line.strip() for line in result.stdout.split(\"\\n\")]\n    if mode:\n        assert any(c in result.stdout for c in rounded)\n    help_start = [i for i, row in enumerate(result_lines) if \"This header\" in row][0]\n    arg_start = [i for i, row in enumerate(result_lines) if \"Arguments\" in row][0]\n    assert help_start != -1\n    assert result_lines[help_start:arg_start] == lines",
        "signature": {
          "args": [
            "mode",
            "lines"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('mode,lines', [pytest.param('markdown', ['This header is long', '', 'Line 1', '', 'Line 2 continues here', '', 'Line 3', '']), pytest.param('rich', ['This header is long', '', 'Line 1', '', 'Line 2', 'continues here', '', 'Line 3', '']), pytest.param(None, ['This header is long', '', 'Line 1', '', 'Line 2 continues here', '', 'Line 3', ''])])"
        ]
      },
      {
        "name": "main",
        "content": "    def main(arg: str):\n        \"\"\"This header\n        is long\n\n        Line 1\n\n        Line 2\n        continues here\n\n        Line 3\n        \"\"\"\n        print(f\"Hello {arg}\")",
        "signature": {
          "args": [
            "arg"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_markup_mode_bullets_single_newline",
        "content": "def test_markup_mode_bullets_single_newline(mode: str, lines: List[str]):\n    app = typer.Typer(rich_markup_mode=mode)\n\n    @app.command()\n    def main(arg: str):\n        \"\"\"First line\n\n        - 1\n        - 2\n        - 3\n        \"\"\"\n        print(f\"Hello {arg}\")\n\n    assert app.rich_markup_mode == mode\n\n    result = runner.invoke(app, [\"World\"])\n    assert \"Hello World\" in result.stdout\n\n    result = runner.invoke(app, [\"--help\"])\n    result_lines = [line.strip() for line in result.stdout.split(\"\\n\")]\n    if mode:\n        assert any(c in result.stdout for c in rounded)\n    help_start = result_lines.index(\"First line\")\n    arg_start = [i for i, row in enumerate(result_lines) if \"Arguments\" in row][0]\n    assert help_start != -1\n    assert result_lines[help_start:arg_start] == lines",
        "signature": {
          "args": [
            "mode",
            "lines"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('mode,lines', [pytest.param('markdown', ['First line', '', '\u2022 1', '\u2022 2', '\u2022 3', ''], marks=pytest.mark.xfail), pytest.param('rich', ['First line', '', '- 1', '- 2', '- 3', '']), pytest.param(None, ['First line', '', '- 1 - 2 - 3', ''])])"
        ]
      },
      {
        "name": "main",
        "content": "    def main(arg: str):\n        \"\"\"First line\n\n        - 1\n        - 2\n        - 3\n        \"\"\"\n        print(f\"Hello {arg}\")",
        "signature": {
          "args": [
            "arg"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_markup_mode_bullets_double_newline",
        "content": "def test_markup_mode_bullets_double_newline(mode: str, lines: List[str]):\n    app = typer.Typer(rich_markup_mode=mode)\n\n    @app.command()\n    def main(arg: str):\n        \"\"\"First line\n\n        - 1\n\n        - 2\n\n        - 3\n        \"\"\"\n        print(f\"Hello {arg}\")\n\n    assert app.rich_markup_mode == mode\n\n    result = runner.invoke(app, [\"World\"])\n    assert \"Hello World\" in result.stdout\n\n    result = runner.invoke(app, [\"--help\"])\n    result_lines = [line.strip() for line in result.stdout.split(\"\\n\")]\n    if mode:\n        assert any(c in result.stdout for c in rounded)\n    help_start = result_lines.index(\"First line\")\n    arg_start = [i for i, row in enumerate(result_lines) if \"Arguments\" in row][0]\n    assert help_start != -1\n    assert result_lines[help_start:arg_start] == lines",
        "signature": {
          "args": [
            "mode",
            "lines"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('mode,lines', [pytest.param('markdown', ['First line', '', '\u2022 1', '\u2022 2', '\u2022 3', ''], marks=pytest.mark.xfail), ('rich', ['First line', '', '- 1', '', '- 2', '', '- 3', '']), (None, ['First line', '', '- 1', '', '- 2', '', '- 3', ''])])"
        ]
      },
      {
        "name": "main",
        "content": "    def main(arg: str):\n        \"\"\"First line\n\n        - 1\n\n        - 2\n\n        - 3\n        \"\"\"\n        print(f\"Hello {arg}\")",
        "signature": {
          "args": [
            "arg"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_rich_markup_mode_none",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_markup_mode_rich",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_markup_mode_newline_pr815",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_markup_mode_newline_issue447",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_markup_mode_newline_mixed",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_markup_mode_bullets_single_newline",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_markup_mode_bullets_double_newline",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_rich_utils.py",
    "type": "python",
    "imports": [
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.completion",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_rich_utils_click_rewrapp",
        "content": "def test_rich_utils_click_rewrapp():\n    app = typer.Typer(rich_markup_mode=\"markdown\")\n\n    @app.command()\n    def main():\n        \"\"\"\n        \\b\n        Some text\n\n        Some unwrapped text\n        \"\"\"\n        print(\"Hello World\")\n\n    @app.command()\n    def secondary():\n        \"\"\"\n        \\b\n        Secondary text\n\n        Some unwrapped text\n        \"\"\"\n        print(\"Hello Secondary World\")\n\n    result = runner.invoke(app, [\"--help\"])\n    assert \"Some text\" in result.stdout\n    assert \"Secondary text\" in result.stdout\n    assert \"\\b\" not in result.stdout\n    result = runner.invoke(app, [\"main\"])\n    assert \"Hello World\" in result.stdout\n    result = runner.invoke(app, [\"secondary\"])\n    assert \"Hello Secondary World\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main():\n        \"\"\"\n        \\b\n        Some text\n\n        Some unwrapped text\n        \"\"\"\n        print(\"Hello World\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "secondary",
        "content": "    def secondary():\n        \"\"\"\n        \\b\n        Secondary text\n\n        Some unwrapped text\n        \"\"\"\n        print(\"Hello Secondary World\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_rich_help_no_commands",
        "content": "def test_rich_help_no_commands():\n    \"\"\"Ensure that the help still works for a Typer instance with no commands, but with a callback.\"\"\"\n    app = typer.Typer(help=\"My cool Typer app\")\n\n    @app.callback(invoke_without_command=True, no_args_is_help=True)\n    def main() -> None:\n        return None  # pragma: no cover\n\n    result = runner.invoke(app, [\"--help\"])\n\n    assert result.exit_code == 0\n    assert \"Show this message\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main() -> None:\n        return None  # pragma: no cover",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "app.callback(invoke_without_command=True, no_args_is_help=True)"
        ]
      },
      {
        "name": "test_rich_doesnt_print_None_default",
        "content": "def test_rich_doesnt_print_None_default():\n    app = typer.Typer(rich_markup_mode=\"rich\")\n\n    @app.command()\n    def main(\n        name: str,\n        option_1: str = typer.Option(\n            \"option_1_default\",\n        ),\n        option_2: str = typer.Option(\n            ...,\n        ),\n    ):\n        print(f\"Hello {name}\")\n        print(f\"First: {option_1}\")\n        print(f\"Second: {option_2}\")\n\n    result = runner.invoke(app, [\"--help\"])\n    assert \"Usage\" in result.stdout\n    assert \"name\" in result.stdout\n    assert \"option-1\" in result.stdout\n    assert \"option-2\" in result.stdout\n    assert result.stdout.count(\"[default: None]\") == 0\n    result = runner.invoke(app, [\"Rick\", \"--option-2=Morty\"])\n    assert \"Hello Rick\" in result.stdout\n    assert \"First: option_1_default\" in result.stdout\n    assert \"Second: Morty\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(\n        name: str,\n        option_1: str = typer.Option(\n            \"option_1_default\",\n        ),\n        option_2: str = typer.Option(\n            ...,\n        ),\n    ):\n        print(f\"Hello {name}\")\n        print(f\"First: {option_1}\")\n        print(f\"Second: {option_2}\")",
        "signature": {
          "args": [
            "name",
            "option_1",
            "option_2"
          ],
          "defaults": [
            "typer.Option('option_1_default')",
            "typer.Option(...)"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_rich_markup_import_regression",
        "content": "def test_rich_markup_import_regression():\n    # Remove rich.markup if it was imported by other tests\n    if \"rich\" in sys.modules:\n        rich_module = sys.modules[\"rich\"]\n        if hasattr(rich_module, \"markup\"):\n            delattr(rich_module, \"markup\")\n\n    app = typer.Typer(rich_markup_mode=None)\n\n    @app.command()\n    def main(bar: str):\n        pass  # pragma: no cover\n\n    result = runner.invoke(app, [\"--help\"])\n    assert \"Usage\" in result.stdout\n    assert \"BAR\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(bar: str):\n        pass  # pragma: no cover",
        "signature": {
          "args": [
            "bar"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_rich_utils_click_rewrapp",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "secondary",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "secondary",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_help_no_commands",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_doesnt_print_None_default",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_markup_import_regression",
        "caller_class": null,
        "called_function": "hasattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_markup_import_regression",
        "caller_class": null,
        "called_function": "delattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_markup_import_regression",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tracebacks.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_traceback_no_rich",
        "content": "def test_traceback_no_rich():\n    file_path = Path(__file__).parent / \"assets/type_error_no_rich.py\"\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"\"},\n    )\n    assert \"return get_command(self)(*args, **kwargs)\" not in result.stderr\n\n    assert \"typer.run(main)\" in result.stderr\n    assert \"print(name + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_traceback_no_rich_short_disable",
        "content": "def test_traceback_no_rich_short_disable():\n    file_path = Path(__file__).parent / \"assets/type_error_no_rich_short_disable.py\"\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"\"},\n    )\n    assert \"return get_command(self)(*args, **kwargs)\" not in result.stderr\n\n    assert \"app()\" in result.stderr\n    assert \"print(name + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_unmodified_traceback",
        "content": "def test_unmodified_traceback():\n    file_path = Path(__file__).parent / \"assets/type_error_normal_traceback.py\"\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"\"},\n    )\n    assert \"morty\" in result.stdout, \"the call to the first app should work normally\"\n    assert \"return callback(**use_params)\" in result.stderr, (\n        \"calling outside of Typer should show the normal traceback, \"\n        \"even after the hook is installed\"\n    )\n    assert \"typer.main.get_command(broken_app)()\" in result.stderr\n    assert \"print(name + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_traceback_no_rich",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_no_rich",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_no_rich",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_no_rich_short_disable",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_no_rich_short_disable",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_no_rich_short_disable",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_unmodified_traceback",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_unmodified_traceback",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_unmodified_traceback",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_default/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_default/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.default",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"[default: Wade Wilson]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Wade Wilson\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_default/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.default",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"[default: Wade Wilson]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code == 0, result.output\n    assert \"Hello Wade Wilson\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_default/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.default",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"[default: (dynamic)]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    greetings = [\"Hello Deadpool\", \"Hello Rick\", \"Hello Morty\", \"Hello Hiro\"]\n    for _i in range(3):\n        result = runner.invoke(app)\n        assert result.exit_code == 0\n        assert any(greet in result.output for greet in greetings)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "any",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_default/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.default",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"[default: (dynamic)]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    greetings = [\"Hello Deadpool\", \"Hello Rick\", \"Hello Morty\", \"Hello Hiro\"]\n    for _i in range(3):\n        result = runner.invoke(app)\n        assert result.exit_code == 0\n        assert any(greet in result.output for greet in greetings)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "any",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_envvar/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_envvar/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.envvar",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"env var: AWESOME_NAME\" in result.output\n    assert \"default: World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"env var: AWESOME_NAME\" in result.output\n    assert \"default: World\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Wednesday\"])\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var",
        "content": "def test_call_env_var():\n    result = runner.invoke(app, env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var_arg",
        "content": "def test_call_env_var_arg():\n    result = runner.invoke(app, [\"Czernobog\"], env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Czernobog\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_envvar/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.envvar",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"env var: AWESOME_NAME\" in result.output\n    assert \"default: World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"env var: AWESOME_NAME\" in result.output\n    assert \"default: World\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Wednesday\"])\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var",
        "content": "def test_call_env_var():\n    result = runner.invoke(app, env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var_arg",
        "content": "def test_call_env_var_arg():\n    result = runner.invoke(app, [\"Czernobog\"], env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Czernobog\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_envvar/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.envvar",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"env var: AWESOME_NAME, GOD_NAME\" in result.output\n    assert \"default: World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Wednesday\"])\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var1",
        "content": "def test_call_env_var1():\n    result = runner.invoke(app, env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var2",
        "content": "def test_call_env_var2():\n    result = runner.invoke(app, env={\"GOD_NAME\": \"Anubis\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Anubis\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_envvar/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.envvar",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"env var: AWESOME_NAME, GOD_NAME\" in result.output\n    assert \"default: World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Wednesday\"])\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var1",
        "content": "def test_call_env_var1():\n    result = runner.invoke(app, env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var2",
        "content": "def test_call_env_var2():\n    result = runner.invoke(app, env={\"GOD_NAME\": \"Anubis\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Anubis\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_envvar/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.envvar",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"env var: AWESOME_NAME\" not in result.output\n    assert \"default: World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Wednesday\"])\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var",
        "content": "def test_call_env_var():\n    result = runner.invoke(app, env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var_arg",
        "content": "def test_call_env_var_arg():\n    result = runner.invoke(app, [\"Czernobog\"], env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Czernobog\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_envvar/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.envvar",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"env var: AWESOME_NAME\" not in result.output\n    assert \"default: World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Wednesday\"])\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var",
        "content": "def test_call_env_var():\n    result = runner.invoke(app, env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Wednesday\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_env_var_arg",
        "content": "def test_call_env_var_arg():\n    result = runner.invoke(app, [\"Czernobog\"], env={\"AWESOME_NAME\": \"Wednesday\"})\n    assert result.exit_code == 0\n    assert \"Hello Mr. Czernobog\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_env_var_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] NAME\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"The name of the user to greet\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] NAME\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"The name of the user to greet\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] NAME\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"The name of the user to greet\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] NAME\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"The name of the user to greet\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] NAME\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"The name of the user to greet\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] NAME\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"The name of the user to greet\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"Who to greet\" in result.output\n    assert \"[default: World]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"Who to greet\" in result.output\n    assert \"[default: World]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"Who to greet\" in result.output\n    assert \"[default: World]\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"Who to greet\" in result.output\n    assert \"[default: World]\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"Who to greet\" in result.output\n    assert \"[default: (Deadpoolio the amazing's name)]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"Who to greet\" in result.output\n    assert \"[default: (Deadpoolio the amazing's name)]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] \u2728username\u2728\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"\u2728username\u2728\" in result.output\n    assert \"[default: World]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial006_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] \u2728username\u2728\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"\u2728username\u2728\" in result.output\n    assert \"[default: World]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial007.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"Secondary Arguments\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial007_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"Secondary Arguments\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial008.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" not in result.output\n    assert \"[default: World]\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" not in result.output\n    assert \"[default: World]\" not in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_help/test_tutorial008_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" not in result.output\n    assert \"[default: World]\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output\n    assert \"Say hi to NAME very gently, like Dirk.\" in result.output\n    assert \"Arguments\" not in result.output\n    assert \"[default: World]\" not in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_optional/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_optional/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.optional",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"Missing argument 'NAME'.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg_standalone",
        "content": "def test_call_no_arg_standalone():\n    # Mainly for coverage\n    result = runner.invoke(app, standalone_mode=False)\n    assert result.exit_code != 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg_no_rich",
        "content": "def test_call_no_arg_no_rich(monkeypatch: pytest.MonkeyPatch):\n    # Mainly for coverage\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"Error: Missing argument 'NAME'\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_standalone",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_optional/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.optional",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"Missing argument 'NAME'.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg_standalone",
        "content": "def test_call_no_arg_standalone():\n    # Mainly for coverage\n    result = runner.invoke(app, standalone_mode=False)\n    assert result.exit_code != 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg_no_rich",
        "content": "def test_call_no_arg_no_rich(monkeypatch: pytest.MonkeyPatch):\n    # Mainly for coverage\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"Error: Missing argument 'NAME'\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_standalone",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_optional/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.optional",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello World!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_optional/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.optional",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAME]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello World!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_arguments/test_optional/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.arguments.optional",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"Missing argument 'NAME'.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg_standalone",
        "content": "def test_call_no_arg_standalone():\n    # Mainly for coverage\n    result = runner.invoke(app, standalone_mode=False)\n    assert result.exit_code != 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg_no_rich",
        "content": "def test_call_no_arg_no_rich(monkeypatch: pytest.MonkeyPatch):\n    # Mainly for coverage\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"Error: Missing argument 'NAME'\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_arg",
        "content": "def test_call_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_standalone",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_arguments/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_arguments/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.arguments",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help_create",
        "content": "def test_help_create():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"create [OPTIONS] USERNAME\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"delete [OPTIONS] USERNAME\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_callback/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_callback/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Manage users in the awesome CLI app.\" in result.output\n    assert \"--verbose\" in result.output\n    assert \"--no-verbose\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Manage users in the awesome CLI app.\" in result.output\n    assert \"--verbose\" in result.output\n    assert \"--no-verbose\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create_verbose",
        "content": "def test_create_verbose():\n    result = runner.invoke(app, [\"--verbose\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Will write verbose output\" in result.output\n    assert \"About to create a user\" in result.output\n    assert \"Creating user: Camila\" in result.output\n    assert \"Just created a user\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete_verbose",
        "content": "def test_delete_verbose():\n    result = runner.invoke(app, [\"--verbose\", \"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Will write verbose output\" in result.output\n    assert \"About to delete a user\" in result.output\n    assert \"Deleting user: Camila\" in result.output\n    assert \"Just deleted a user\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_wrong_verbose",
        "content": "def test_wrong_verbose():\n    result = runner.invoke(app, [\"delete\", \"--verbose\", \"Camila\"])\n    assert result.exit_code != 0\n    assert \"No such option: --verbose\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create_verbose",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete_verbose",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_wrong_verbose",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_callback/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app",
        "content": "def test_app():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Running a command\" in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_callback/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app",
        "content": "def test_app():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Override callback, running a command\" in result.output\n    assert \"Running a command\" not in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_for_coverage",
        "content": "def test_for_coverage():\n    mod.callback()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_for_coverage",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_callback/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Manage users CLI app.\" in result.output\n    assert \"Use it with the create command.\" in result.output\n    assert \"A new user with the given NAME will be created.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_app",
        "content": "def test_app():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_app",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_context/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_context/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.context",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"About to execute command: create\" in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"About to execute command: delete\" in result.output\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_context/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.context",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Initializing database\" in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Initializing database\" in result.output\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_callback",
        "content": "def test_callback():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Initializing database\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_callback",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_context/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.context",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Initializing database\" not in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Initializing database\" not in result.output\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_callback",
        "content": "def test_callback():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Initializing database\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_callback",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_context/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.context",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Camila\", \"--city\", \"Berlin\"])\n    assert result.exit_code == 0\n    assert \"Got extra arg: --name\" in result.output\n    assert \"Got extra arg: Camila\" in result.output\n    assert \"Got extra arg: --city\" in result.output\n    assert \"Got extra arg: Berlin\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Awesome CLI user manager.\" in result.output\n    assert \"create\" in result.output\n    assert \"Create a new user with USERNAME.\" in result.output\n    assert \"delete\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"delete-all\" in result.output\n    assert \"Delete ALL users in the database.\" in result.output\n    assert \"init\" in result.output\n    assert \"Initialize the users database.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_create",
        "content": "def test_help_create():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"create [OPTIONS] USERNAME\" in result.output\n    assert \"Create a new user with USERNAME.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"delete [OPTIONS] USERNAME\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"--force\" in result.output\n    assert \"--no-force\" in result.output\n    assert \"Force deletion without confirmation.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete_all",
        "content": "def test_help_delete_all():\n    result = runner.invoke(app, [\"delete-all\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"delete-all [OPTIONS]\" in result.output\n    assert \"Delete ALL users in the database.\" in result.output\n    assert \"If --force is not used, will ask for confirmation.\" in result.output\n    assert \"[required]\" in result.output\n    assert \"--force\" in result.output\n    assert \"--no-force\" in result.output\n    assert \"Force deletion without confirmation.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_init",
        "content": "def test_help_init():\n    result = runner.invoke(app, [\"init\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"init [OPTIONS]\" in result.output\n    assert \"Initialize the users database.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"], input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete the user? [y/n]:\" in result.output\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_delete",
        "content": "def test_no_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"], input=\"n\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete the user? [y/n]:\" in result.output\n    assert \"Operation cancelled\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete_all",
        "content": "def test_delete_all():\n    result = runner.invoke(app, [\"delete-all\"], input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" in result.output\n    assert \"Deleting all users\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_delete_all",
        "content": "def test_no_delete_all():\n    result = runner.invoke(app, [\"delete-all\"], input=\"n\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" in result.output\n    assert \"Operation cancelled\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_init",
        "content": "def test_init():\n    result = runner.invoke(app, [\"init\"])\n    assert result.exit_code == 0\n    assert \"Initializing user database\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_init",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_init",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Awesome CLI user manager.\" in result.output\n    assert \"create\" in result.output\n    assert \"Create a new user with USERNAME.\" in result.output\n    assert \"delete\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"delete-all\" in result.output\n    assert \"Delete ALL users in the database.\" in result.output\n    assert \"init\" in result.output\n    assert \"Initialize the users database.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_create",
        "content": "def test_help_create():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"create [OPTIONS] USERNAME\" in result.output\n    assert \"Create a new user with USERNAME.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"delete [OPTIONS] USERNAME\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"--force\" in result.output\n    assert \"--no-force\" in result.output\n    assert \"Force deletion without confirmation.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete_all",
        "content": "def test_help_delete_all():\n    result = runner.invoke(app, [\"delete-all\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"delete-all [OPTIONS]\" in result.output\n    assert \"Delete ALL users in the database.\" in result.output\n    assert \"If --force is not used, will ask for confirmation.\" in result.output\n    assert \"[required]\" in result.output\n    assert \"--force\" in result.output\n    assert \"--no-force\" in result.output\n    assert \"Force deletion without confirmation.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_init",
        "content": "def test_help_init():\n    result = runner.invoke(app, [\"init\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"init [OPTIONS]\" in result.output\n    assert \"Initialize the users database.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"], input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete the user? [y/n]:\" in result.output\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_delete",
        "content": "def test_no_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"], input=\"n\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete the user? [y/n]:\" in result.output\n    assert \"Operation cancelled\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete_all",
        "content": "def test_delete_all():\n    result = runner.invoke(app, [\"delete-all\"], input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" in result.output\n    assert \"Deleting all users\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_delete_all",
        "content": "def test_no_delete_all():\n    result = runner.invoke(app, [\"delete-all\"], input=\"n\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" in result.output\n    assert \"Operation cancelled\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_init",
        "content": "def test_init():\n    result = runner.invoke(app, [\"init\"])\n    assert result.exit_code == 0\n    assert \"Initializing user database\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_init",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_init",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a new user with USERNAME.\" in result.output\n    assert \"delete\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_create",
        "content": "def test_help_create():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Create a new user with USERNAME.\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a user.\" in result.output\n    assert \"delete\" in result.output\n    assert \"(deprecated)\" in result.output\n    assert \"Delete a user.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"(deprecated)\" in result.output\n    assert \"Delete a user.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    # Mainly for coverage\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a new shiny user. \u2728\" in result.output\n    assert \"delete\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_create",
        "content": "def test_help_create():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Create a new shiny user. \u2728\" in result.output\n    assert \"The username to be created\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"The username to be deleted\" in result.output\n    assert \"Force the deletion \ud83d\udca5\" in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"PYTHONIOENCODING\": \"utf-8\"},\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a new shinny user. \u2728\" in result.output\n    assert \"delete\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_create",
        "content": "def test_help_create():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Create a new shinny user. \u2728\" in result.output\n    assert \"The username to be created\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"The username to be deleted\" in result.output\n    assert \"Force the deletion \ud83d\udca5\" in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"PYTHONIOENCODING\": \"utf-8\"},\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a new shiny user. \u2728\" in result.output\n    assert \"delete\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_create",
        "content": "def test_help_create():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Create a new shiny user. \u2728\" in result.output\n    assert \"The username to be created\" in result.output\n    assert \"Learn more at the Typer docs website\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"The username to be deleted\" in result.output\n    assert \"Force the deletion \ud83d\udca5\" in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"PYTHONIOENCODING\": \"utf-8\"},\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a new shinny user. \u2728\" in result.output\n    assert \"delete\" in result.output\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_create",
        "content": "def test_help_create():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Create a new shinny user. \u2728\" in result.output\n    assert \"The username to be created\" in result.output\n    assert \"Learn more at the Typer docs website\" in result.output\n    assert \"Some internal utility function to create.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_delete",
        "content": "def test_help_delete():\n    result = runner.invoke(app, [\"delete\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Delete a user with USERNAME.\" in result.output\n    assert \"The username to be deleted\" in result.output\n    assert \"Force the deletion \ud83d\udca5\" in result.output\n    assert \"Some internal utility function to delete.\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"PYTHONIOENCODING\": \"utf-8\"},\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main_help",
        "content": "def test_main_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a new user. \u2728\" in result.output\n    assert \"delete\" in result.output\n    assert \"Delete a user. \ud83d\udd25\" in result.output\n    assert \"Utils and Configs\" in result.output\n    assert \"config\" in result.output\n    assert \"Configure the system. \ud83d\udd27\" in result.output\n    assert \"Synchronize the system or something fancy like that. \u267b\" in result.output\n    assert \"Help and Others\" in result.output\n    assert \"Get help with the system. \u2753\" in result.output\n    assert \"Report an issue. \ud83d\udc1b\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    # Mainly for coverage\n    result = runner.invoke(app, [\"create\", \"Morty\"])\n    assert result.exit_code == 0\n    result = runner.invoke(app, [\"delete\", \"Morty\"])\n    assert result.exit_code == 0\n    result = runner.invoke(app, [\"config\", \"Morty\"])\n    assert result.exit_code == 0\n    result = runner.invoke(app, [\"sync\"])\n    assert result.exit_code == 0\n    result = runner.invoke(app, [\"help\"])\n    assert result.exit_code == 0\n    result = runner.invoke(app, [\"report\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"PYTHONIOENCODING\": \"utf-8\"},\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial007.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main_help",
        "content": "def test_main_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a new user. \u2728\" in result.output\n    assert \"Utils and Configs\" in result.output\n    assert \"config\" in result.output\n    assert \"Configure the system. \ud83d\udd27\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create_help",
        "content": "def test_create_help():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"username\" in result.output\n    assert \"The username to create\" in result.output\n    assert \"Secondary Arguments\" in result.output\n    assert \"lastname\" in result.output\n    assert \"The last name of the new user\" in result.output\n    assert \"--force\" in result.output\n    assert \"--no-force\" in result.output\n    assert \"Force the creation of the user\" in result.output\n    assert \"Additional Data\" in result.output\n    assert \"--age\" in result.output\n    assert \"The age of the new user\" in result.output\n    assert \"--favorite-color\" in result.output\n    assert \"The favorite color of the new user\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    # Mainly for coverage\n    result = runner.invoke(app, [\"create\", \"Morty\"])\n    assert result.exit_code == 0\n    result = runner.invoke(app, [\"config\", \"Morty\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"PYTHONIOENCODING\": \"utf-8\"},\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial007_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main_help",
        "content": "def test_main_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"create\" in result.output\n    assert \"Create a new user. \u2728\" in result.output\n    assert \"Utils and Configs\" in result.output\n    assert \"config\" in result.output\n    assert \"Configure the system. \ud83d\udd27\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create_help",
        "content": "def test_create_help():\n    result = runner.invoke(app, [\"create\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"username\" in result.output\n    assert \"The username to create\" in result.output\n    assert \"Secondary Arguments\" in result.output\n    assert \"lastname\" in result.output\n    assert \"The last name of the new user\" in result.output\n    assert \"--force\" in result.output\n    assert \"--no-force\" in result.output\n    assert \"Force the creation of the user\" in result.output\n    assert \"Additional Data\" in result.output\n    assert \"--age\" in result.output\n    assert \"The age of the new user\" in result.output\n    assert \"--favorite-color\" in result.output\n    assert \"The favorite color of the new user\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    # Mainly for coverage\n    result = runner.invoke(app, [\"create\", \"Morty\"])\n    assert result.exit_code == 0\n    result = runner.invoke(app, [\"config\", \"Morty\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"PYTHONIOENCODING\": \"utf-8\"},\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_help/test_tutorial008.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main_help",
        "content": "def test_main_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Create a new user. \u2728\" in result.output\n    assert \"Made with \u2764 in Venus\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    # Mainly for coverage\n    result = runner.invoke(app, [\"Morty\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_index/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_index/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.index",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_no_arg",
        "content": "def test_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"Missing argument 'NAME'.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_arg",
        "content": "def test_arg():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_index/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.index",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Hiro Hamada\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Hiro Hamada\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_index/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.index",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_no_arg",
        "content": "def test_no_arg():\n    result = runner.invoke(app)\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_additional_output",
        "content": "def test_no_additional_output():\n    \"\"\"Ensure that no additional output was generated (cf. PR #1262)\"\"\"\n    result = runner.invoke(app)\n    assert result.output.count(\"Usage\") == 1\n    assert \"Error\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Hiro Hamada\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Hiro Hamada\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_additional_output",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_additional_output",
        "caller_class": null,
        "called_function": "count",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_index/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.index",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    print(result.output)\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    # Test that the 'delete' command precedes the 'create' command in the help output\n    create_char = result.output.index(\"create\")\n    delete_char = result.output.index(\"delete\")\n    assert delete_char < create_char",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Hiro Hamada\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Hiro Hamada\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "index",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "index",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_name/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_name/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_one_or_multiple/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.one_or_multiple",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"create\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Hiro Hamada\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.one_or_multiple",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Creates a single user Hiro Hamada.\" in result.output\n    assert \"In the next version it will create 5 more users.\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"create\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Hiro Hamada\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_options/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_options/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.options",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    assert \"delete-all\" in result.output\n    assert \"init\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"], input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete the user? [y/n]:\" in result.output\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_delete",
        "content": "def test_no_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"], input=\"n\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete the user? [y/n]:\" in result.output\n    assert \"Operation cancelled\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete_all",
        "content": "def test_delete_all():\n    result = runner.invoke(app, [\"delete-all\"], input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" in result.output\n    assert \"Deleting all users\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_delete_all",
        "content": "def test_no_delete_all():\n    result = runner.invoke(app, [\"delete-all\"], input=\"n\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" in result.output\n    assert \"Operation cancelled\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete_all_force",
        "content": "def test_delete_all_force():\n    result = runner.invoke(app, [\"delete-all\", \"--force\"])\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" not in result.output\n    assert \"Deleting all users\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_init",
        "content": "def test_init():\n    result = runner.invoke(app, [\"init\"])\n    assert result.exit_code == 0\n    assert \"Initializing user database\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete_all_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_init",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_commands/test_options/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.commands.options",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    assert \"delete-all\" in result.output\n    assert \"init\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_create",
        "content": "def test_create():\n    result = runner.invoke(app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete",
        "content": "def test_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"], input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete the user? [y/n]:\" in result.output\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_delete",
        "content": "def test_no_delete():\n    result = runner.invoke(app, [\"delete\", \"Camila\"], input=\"n\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete the user? [y/n]:\" in result.output\n    assert \"Operation cancelled\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete_all",
        "content": "def test_delete_all():\n    result = runner.invoke(app, [\"delete-all\"], input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" in result.output\n    assert \"Deleting all users\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_delete_all",
        "content": "def test_no_delete_all():\n    result = runner.invoke(app, [\"delete-all\"], input=\"n\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" in result.output\n    assert \"Operation cancelled\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete_all_force",
        "content": "def test_delete_all_force():\n    result = runner.invoke(app, [\"delete-all\", \"--force\"])\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete ALL users? [y/n]:\" not in result.output\n    assert \"Deleting all users\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_init",
        "content": "def test_init():\n    result = runner.invoke(app, [\"init\"])\n    assert result.exit_code == 0\n    assert \"Initializing user database\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_delete_all",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete_all_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_init",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_exceptions/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_exceptions/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.exceptions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_traceback_rich",
        "content": "def test_traceback_rich():\n    file_path = Path(mod.__file__)\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"\"},\n    )\n    assert \"return get_command(self)(*args, **kwargs)\" not in result.stderr\n\n    assert \"typer.run(main)\" not in result.stderr\n    assert \"print(name + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr\n    assert \"name = 'morty'\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_standard_traceback_env_var",
        "content": "def test_standard_traceback_env_var():\n    file_path = Path(mod.__file__)\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"1\"},\n    )\n    assert \"return get_command(self)(*args, **kwargs)\" in result.stderr\n\n    assert \"typer.run(main)\" in result.stderr\n    assert \"print(name + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr\n    assert \"name = 'morty'\" not in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_traceback_rich",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_rich",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_rich",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_standard_traceback_env_var",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_standard_traceback_env_var",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_standard_traceback_env_var",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_exceptions/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.exceptions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_traceback_rich",
        "content": "def test_traceback_rich():\n    file_path = Path(mod.__file__)\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path), \"secret\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"\"},\n    )\n    assert \"return get_command(self)(*args, **kwargs)\" not in result.stderr\n\n    assert \"app()\" not in result.stderr\n    assert \"print(password + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr\n    assert \"name = 'morty'\" not in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_standard_traceback_env_var",
        "content": "def test_standard_traceback_env_var():\n    file_path = Path(mod.__file__)\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path), \"secret\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"1\"},\n    )\n    assert \"return get_command(self)(*args, **kwargs)\" in result.stderr\n\n    assert \"app()\" in result.stderr\n    assert \"print(password + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr\n    assert \"name = 'morty'\" not in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_traceback_rich",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_rich",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_rich",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_standard_traceback_env_var",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_standard_traceback_env_var",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_standard_traceback_env_var",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_exceptions/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.exceptions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_traceback_rich_pretty_short_disable",
        "content": "def test_traceback_rich_pretty_short_disable():\n    file_path = Path(mod.__file__)\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"\"},\n    )\n    assert \"return get_command(self)(*args, **kwargs)\" not in result.stderr\n\n    assert \"app()\" in result.stderr\n    assert \"print(name + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr\n    assert \"name = 'morty'\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_traceback_rich_pretty_short_disable",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_rich_pretty_short_disable",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_traceback_rich_pretty_short_disable",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_exceptions/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.exceptions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_rich_pretty_exceptions_disable",
        "content": "def test_rich_pretty_exceptions_disable():\n    file_path = Path(mod.__file__)\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", str(file_path)],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={**os.environ, \"_TYPER_STANDARD_TRACEBACK\": \"\"},\n    )\n    assert \"return get_command(self)(*args, **kwargs)\" in result.stderr\n\n    assert \"app()\" in result.stderr\n    assert \"print(name + 3)\" in result.stderr\n    assert 'TypeError: can only concatenate str (not \"int\") to str' in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_rich_pretty_exceptions_disable",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_pretty_exceptions_disable",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_rich_pretty_exceptions_disable",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_first_steps/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_first_steps/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.first_steps",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    app = typer.Typer()\n    app.command()(mod.main)\n    result = runner.invoke(app, [])\n    assert result.output == \"Hello World\\n\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_first_steps/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.first_steps",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [])\n    assert result.exit_code != 0\n    assert \"Missing argument 'NAME'\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_first_steps/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.first_steps",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code != 0\n    assert \"Missing argument 'LASTNAME'\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"Camila\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_first_steps/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.first_steps",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"[required]\" in result.output\n    assert \"LASTNAME\" in result.output\n    assert \"[required]\" in result.output\n    assert \"--formal\" in result.output\n    assert \"--no-formal\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"Camila\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal_1",
        "content": "def test_formal_1():\n    result = runner.invoke(app, [\"Camila\", \"Guti\u00e9rrez\", \"--formal\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila Guti\u00e9rrez.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal_2",
        "content": "def test_formal_2():\n    result = runner.invoke(app, [\"Camila\", \"--formal\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila Guti\u00e9rrez.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal_3",
        "content": "def test_formal_3():\n    result = runner.invoke(app, [\"--formal\", \"Camila\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila Guti\u00e9rrez.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal_3",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_first_steps/test_tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.first_steps",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Arguments\" in result.output\n    assert \"NAME\" in result.output\n    assert \"[required]\" in result.output\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--formal\" in result.output\n    assert \"--no-formal\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname_2",
        "content": "def test_option_lastname_2():\n    result = runner.invoke(app, [\"--lastname\", \"Guti\u00e9rrez\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal_1",
        "content": "def test_formal_1():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\", \"--formal\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila Guti\u00e9rrez.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_first_steps/test_tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.first_steps",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Say hi to NAME, optionally with a --lastname.\" in result.output\n    assert \"If --formal is used, say hi very formally.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname_2",
        "content": "def test_option_lastname_2():\n    result = runner.invoke(app, [\"--lastname\", \"Guti\u00e9rrez\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal_1",
        "content": "def test_formal_1():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\", \"--formal\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila Guti\u00e9rrez.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.arguments_with_multiple_values",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app, [\"README.md\", \"pyproject.toml\", \"woohoo!\"])\n    assert result.exit_code == 0\n    assert \"This file exists: README.md\\nwoohoo!\" in result.output\n    assert \"This file exists: pyproject.toml\\nwoohoo!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.arguments_with_multiple_values",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAMES]...\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"[default: Harry, Hermione, Ron]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_defaults",
        "content": "def test_defaults():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Harry\" in result.output\n    assert \"Hello Hermione\" in result.output\n    assert \"Hello Ron\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_args",
        "content": "def test_invalid_args():\n    result = runner.invoke(app, [\"Draco\", \"Hagrid\"])\n    assert result.exit_code != 0\n    assert \"Argument 'names' takes 3 values\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_valid_args",
        "content": "def test_valid_args():\n    result = runner.invoke(app, [\"Draco\", \"Hagrid\", \"Dobby\"])\n    assert result.exit_code == 0\n    assert \"Hello Draco\" in result.stdout\n    assert \"Hello Hagrid\" in result.stdout\n    assert \"Hello Dobby\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_defaults",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_args",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_valid_args",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.arguments_with_multiple_values",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] [NAMES]...\" in result.output\n    assert \"Arguments\" in result.output\n    assert \"[default: Harry, Hermione, Ron]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_defaults",
        "content": "def test_defaults():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Harry\" in result.output\n    assert \"Hello Hermione\" in result.output\n    assert \"Hello Ron\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_args",
        "content": "def test_invalid_args():\n    result = runner.invoke(app, [\"Draco\", \"Hagrid\"])\n    assert result.exit_code != 0\n    assert \"Argument 'names' takes 3 values\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_valid_args",
        "content": "def test_valid_args():\n    result = runner.invoke(app, [\"Draco\", \"Hagrid\", \"Dobby\"])\n    assert result.exit_code == 0\n    assert \"Hello Draco\" in result.stdout\n    assert \"Hello Hagrid\" in result.stdout\n    assert \"Hello Dobby\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_defaults",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_args",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_valid_args",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_multiple_options/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.multiple_options",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"No provided users\" in result.output\n    assert \"raw input = None\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1_user",
        "content": "def test_1_user():\n    result = runner.invoke(app, [\"--user\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Processing user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_3_user",
        "content": "def test_3_user():\n    result = runner.invoke(\n        app, [\"--user\", \"Camila\", \"--user\", \"Rick\", \"--user\", \"Morty\"]\n    )\n    assert result.exit_code == 0\n    assert \"Processing user: Camila\" in result.output\n    assert \"Processing user: Rick\" in result.output\n    assert \"Processing user: Morty\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1_user",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_3_user",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.multiple_options",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"No provided users\" in result.output\n    assert \"raw input = None\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1_user",
        "content": "def test_1_user():\n    result = runner.invoke(app, [\"--user\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Processing user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_3_user",
        "content": "def test_3_user():\n    result = runner.invoke(\n        app, [\"--user\", \"Camila\", \"--user\", \"Rick\", \"--user\", \"Morty\"]\n    )\n    assert result.exit_code == 0\n    assert \"Processing user: Camila\" in result.output\n    assert \"Processing user: Rick\" in result.output\n    assert \"Processing user: Morty\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1_user",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_3_user",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.multiple_options",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"The sum is 0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1_number",
        "content": "def test_1_number():\n    result = runner.invoke(app, [\"--number\", \"2\"])\n    assert result.exit_code == 0\n    assert \"The sum is 2.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2_number",
        "content": "def test_2_number():\n    result = runner.invoke(app, [\"--number\", \"2\", \"--number\", \"3\", \"--number\", \"4.5\"])\n    assert result.exit_code == 0\n    assert \"The sum is 9.5\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1_number",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2_number",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.multiple_options",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"The sum is 0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1_number",
        "content": "def test_1_number():\n    result = runner.invoke(app, [\"--number\", \"2\"])\n    assert result.exit_code == 0\n    assert \"The sum is 2.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2_number",
        "content": "def test_2_number():\n    result = runner.invoke(app, [\"--number\", \"2\", \"--number\", \"3\", \"--number\", \"4.5\"])\n    assert result.exit_code == 0\n    assert \"The sum is 9.5\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1_number",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2_number",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_options_with_multiple_values/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_options_with_multiple_values/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.options_with_multiple_values",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"No user provided\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_user_1",
        "content": "def test_user_1():\n    result = runner.invoke(app, [\"--user\", \"Camila\", \"50\", \"yes\"])\n    assert result.exit_code == 0\n    assert \"The username Camila has 50 coins\" in result.output\n    assert \"And this user is a wizard!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_user_2",
        "content": "def test_user_2():\n    result = runner.invoke(app, [\"--user\", \"Morty\", \"3\", \"no\"])\n    assert result.exit_code == 0\n    assert \"The username Morty has 3 coins\" in result.output\n    assert \"And this user is a wizard!\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_user",
        "content": "def test_invalid_user():\n    result = runner.invoke(app, [\"--user\", \"Camila\", \"50\"])\n    assert result.exit_code != 0\n    assert \"Option '--user' requires 3 arguments\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_user_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_user_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_user",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_multiple_values/test_options_with_multiple_values/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.multiple_values.options_with_multiple_values",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code != 0\n    assert \"No user provided\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_user_1",
        "content": "def test_user_1():\n    result = runner.invoke(app, [\"--user\", \"Camila\", \"50\", \"yes\"])\n    assert result.exit_code == 0\n    assert \"The username Camila has 50 coins\" in result.output\n    assert \"And this user is a wizard!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_user_2",
        "content": "def test_user_2():\n    result = runner.invoke(app, [\"--user\", \"Morty\", \"3\", \"no\"])\n    assert result.exit_code == 0\n    assert \"The username Morty has 3 coins\" in result.output\n    assert \"And this user is a wizard!\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_user",
        "content": "def test_invalid_user():\n    result = runner.invoke(app, [\"--user\", \"Camila\", \"50\"])\n    assert result.exit_code != 0\n    assert \"Option '--user' requires 3 arguments\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_user_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_user_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_user",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_one_file_per_command/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_one_file_per_command/test_tutorial.py",
    "type": "python",
    "imports": [
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.one_file_per_command",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(mod.app, [\"--help\"])\n\n    assert result.exit_code == 0\n\n    assert \"version\" in result.output\n    assert \"users\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_version",
        "content": "def test_version():\n    result = runner.invoke(mod.app, [\"version\"])\n\n    assert result.exit_code == 0\n    assert \"My CLI Version 1.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_users_help",
        "content": "def test_users_help():\n    result = runner.invoke(mod.app, [\"users\", \"--help\"])\n\n    assert result.exit_code == 0\n\n    assert \"add\" in result.output\n    assert \"delete\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_add_user",
        "content": "def test_add_user():\n    result = runner.invoke(mod.app, [\"users\", \"add\", \"Camila\"])\n\n    assert result.exit_code == 0\n    assert \"Adding user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_delete_user",
        "content": "def test_delete_user():\n    result = runner.invoke(mod.app, [\"users\", \"delete\", \"Camila\"])\n\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_version",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_add_user",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_delete_user",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_callback/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_callback/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"--name\", \"rick\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--name'\" in result.output\n    assert \"Only Camila is allowed\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_callback/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"--name\", \"rick\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--name'\" in result.output\n    assert \"Only Camila is allowed\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_callback/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Validating name\" in result.output\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"--name\", \"rick\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--name'\" in result.output\n    assert \"Only Camila is allowed\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL003.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"tutorial003.py --\",\n            \"COMP_CWORD\": \"1\",\n        },\n    )\n    assert \"--name\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_callback/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Validating name\" in result.output\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"--name\", \"rick\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--name'\" in result.output\n    assert \"Only Camila is allowed\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL003_AN.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"tutorial003_an.py --\",\n            \"COMP_CWORD\": \"1\",\n        },\n    )\n    assert \"--name\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_callback/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Validating param: name\" in result.output\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"--name\", \"rick\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--name'\" in result.output\n    assert \"Only Camila is allowed\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL004.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"tutorial004.py --\",\n            \"COMP_CWORD\": \"1\",\n        },\n    )\n    assert \"--name\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_callback/test_tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.callback",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Validating param: name\" in result.output\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"--name\", \"rick\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--name'\" in result.output\n    assert \"Only Camila is allowed\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL004_AN.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"tutorial004_an.py --\",\n            \"COMP_CWORD\": \"1\",\n        },\n    )\n    assert \"--name\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_help/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_help/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Say hi to NAME, optionally with a --lastname.\" in result.output\n    assert \"If --formal is used, say hi very formally.\" in result.output\n    assert \"Last name of person to greet.\" in result.output\n    assert \"Say hi formally.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal",
        "content": "def test_formal():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\", \"--formal\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila Guti\u00e9rrez.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_help/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Say hi to NAME, optionally with a --lastname.\" in result.output\n    assert \"If --formal is used, say hi very formally.\" in result.output\n    assert \"Last name of person to greet.\" in result.output\n    assert \"Say hi formally.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal",
        "content": "def test_formal():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\", \"--formal\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila Guti\u00e9rrez.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_help/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"World\"])\n    assert result.exit_code == 0\n    assert \"Hello World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal",
        "content": "def test_formal():\n    result = runner.invoke(app, [\"World\", \"--formal\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"Customization and Utils\" in result.output\n    assert \"--formal\" in result.output\n    assert \"--no-formal\" in result.output\n    assert \"--debug\" in result.output\n    assert \"--no-debug\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_help/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"World\"])\n    assert result.exit_code == 0\n    assert \"Hello World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_formal",
        "content": "def test_formal():\n    result = runner.invoke(app, [\"World\", \"--formal\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. World\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"Customization and Utils\" in result.output\n    assert \"--formal\" in result.output\n    assert \"--no-formal\" in result.output\n    assert \"--debug\" in result.output\n    assert \"--no-debug\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_formal",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_help/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Wade Wilson\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--fullname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[default: Wade Wilson]\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_help/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Wade Wilson\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--fullname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[default: Wade Wilson]\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--user-name\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_args",
        "content": "def test_call_no_args():\n    result = runner.invoke(app, [\"--name\"])\n    assert result.exit_code != 0\n    assert \"Option '--name' requires an argument\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_args",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--user-name\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_args",
        "content": "def test_call_no_args():\n    result = runner.invoke(app, [\"--name\"])\n    assert result.exit_code != 0\n    assert \"Option '--name' requires an argument\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_args",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-n\" in result.output\n    assert \"--name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--user-name\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"-n\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_long",
        "content": "def test_call_long():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_long",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-n\" in result.output\n    assert \"--name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--user-name\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"-n\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_long",
        "content": "def test_call_long():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_long",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-n\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--user-name\" not in result.output\n    assert \"--name\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"-n\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-n\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--user-name\" not in result.output\n    assert \"--name\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"-n\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-n\" in result.output\n    assert \"--user-name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--name\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"-n\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_long",
        "content": "def test_call_long():\n    result = runner.invoke(app, [\"--user-name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_long",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-n\" in result.output\n    assert \"--user-name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"--name\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"-n\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_long",
        "content": "def test_call_long():\n    result = runner.invoke(app, [\"--user-name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_long",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-n\" in result.output\n    assert \"--name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"-f\" in result.output\n    assert \"--formal\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"-n\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_formal",
        "content": "def test_call_formal():\n    result = runner.invoke(app, [\"-n\", \"Camila\", \"-f\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_formal_condensed",
        "content": "def test_call_formal_condensed():\n    result = runner.invoke(app, [\"-fn\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_condensed_wrong_order",
        "content": "def test_call_condensed_wrong_order():\n    result = runner.invoke(app, [\"-nf\", \"Camila\"])\n    assert result.exit_code != 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_formal",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_formal_condensed",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_condensed_wrong_order",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_name/test_tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.name",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_help",
        "content": "def test_option_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-n\" in result.output\n    assert \"--name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"-f\" in result.output\n    assert \"--formal\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call",
        "content": "def test_call():\n    result = runner.invoke(app, [\"-n\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_formal",
        "content": "def test_call_formal():\n    result = runner.invoke(app, [\"-n\", \"Camila\", \"-f\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_formal_condensed",
        "content": "def test_call_formal_condensed():\n    result = runner.invoke(app, [\"-fn\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Good day Ms. Camila.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_condensed_wrong_order",
        "content": "def test_call_condensed_wrong_order():\n    result = runner.invoke(app, [\"-nf\", \"Camila\"])\n    assert result.exit_code != 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_formal",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_formal_condensed",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_condensed_wrong_order",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_prompt/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_prompt/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname_prompt",
        "content": "def test_option_lastname_prompt():\n    result = runner.invoke(app, [\"Camila\"], input=\"Guti\u00e9rrez\")\n    assert result.exit_code == 0\n    assert \"Lastname: \" in result.output\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname_prompt",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_prompt/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname_prompt",
        "content": "def test_option_lastname_prompt():\n    result = runner.invoke(app, [\"Camila\"], input=\"Guti\u00e9rrez\")\n    assert result.exit_code == 0\n    assert \"Lastname: \" in result.output\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname_prompt",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_prompt/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname_prompt",
        "content": "def test_option_lastname_prompt():\n    result = runner.invoke(app, [\"Camila\"], input=\"Guti\u00e9rrez\")\n    assert result.exit_code == 0\n    assert \"Please tell me your last name: \" in result.output\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname_prompt",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_prompt/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname_prompt",
        "content": "def test_option_lastname_prompt():\n    result = runner.invoke(app, [\"Camila\"], input=\"Guti\u00e9rrez\")\n    assert result.exit_code == 0\n    assert \"Please tell me your last name: \" in result.output\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname_prompt",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_prompt/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_prompt",
        "content": "def test_prompt():\n    result = runner.invoke(app, input=\"Old Project\\nOld Project\\n\")\n    assert result.exit_code == 0\n    assert \"Deleting project Old Project\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_prompt_not_equal",
        "content": "def test_prompt_not_equal():\n    result = runner.invoke(\n        app, input=\"Old Project\\nNew Spice\\nOld Project\\nOld Project\\n\"\n    )\n    assert result.exit_code == 0\n    assert \"Error: The two entered values do not match\" in result.output\n    assert \"Deleting project Old Project\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option",
        "content": "def test_option():\n    result = runner.invoke(app, [\"--project-name\", \"Old Project\"])\n    assert result.exit_code == 0\n    assert \"Deleting project Old Project\" in result.output\n    assert \"Project name: \" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--project-name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_prompt",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_prompt_not_equal",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_prompt/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_prompt",
        "content": "def test_prompt():\n    result = runner.invoke(app, input=\"Old Project\\nOld Project\\n\")\n    assert result.exit_code == 0\n    assert \"Deleting project Old Project\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_prompt_not_equal",
        "content": "def test_prompt_not_equal():\n    result = runner.invoke(\n        app, input=\"Old Project\\nNew Spice\\nOld Project\\nOld Project\\n\"\n    )\n    assert result.exit_code == 0\n    assert \"Error: The two entered values do not match\" in result.output\n    assert \"Deleting project Old Project\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option",
        "content": "def test_option():\n    result = runner.invoke(app, [\"--project-name\", \"Old Project\"])\n    assert result.exit_code == 0\n    assert \"Deleting project Old Project\" in result.output\n    assert \"Project name: \" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--project-name\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_prompt",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_prompt_not_equal",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_required/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_required/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.required",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code != 0\n    assert \"Missing option '--lastname'\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_required/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.required",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code != 0\n    assert \"Missing option '--lastname'\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_option_lastname",
        "content": "def test_option_lastname():\n    result = runner.invoke(app, [\"Camila\", \"--lastname\", \"Guti\u00e9rrez\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila Guti\u00e9rrez\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--lastname\" in result.output\n    assert \"TEXT\" in result.output\n    assert \"[required]\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_option_lastname",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_version/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_version/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.version",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Rick\", \"--version\"])\n    assert result.exit_code == 0\n    assert \"Awesome CLI Version: 0.1.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"--name\", \"rick\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--name'\" in result.output\n    assert \"Only Camila is allowed\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_3",
        "content": "def test_3():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL003.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"tutorial003.py --name Rick --v\",\n            \"COMP_CWORD\": \"3\",\n        },\n    )\n    assert \"--version\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_3",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options/test_version/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options.version",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(app, [\"--name\", \"Rick\", \"--version\"])\n    assert result.exit_code == 0\n    assert \"Awesome CLI Version: 0.1.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_2",
        "content": "def test_2():\n    result = runner.invoke(app, [\"--name\", \"rick\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--name'\" in result.output\n    assert \"Only Camila is allowed\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_3",
        "content": "def test_3():\n    result = runner.invoke(app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL003_AN.PY_COMPLETE\": \"complete_bash\",\n            \"COMP_WORDS\": \"tutorial003_an.py --name Rick --v\",\n            \"COMP_CWORD\": \"3\",\n        },\n    )\n    assert \"--version\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_2",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_3",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL002.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial002.py --name \",\n        },\n    )\n    assert \"Camila\" in result.stdout\n    assert \"Carlos\" in result.stdout\n    assert \"Sebastian\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL002_AN.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial002_an.py --name \",\n        },\n    )\n    assert \"Camila\" in result.stdout\n    assert \"Carlos\" in result.stdout\n    assert \"Sebastian\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion_zsh",
        "content": "def test_completion_zsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL003.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial003.py --name Seb\",\n        },\n    )\n    assert \"Camila\" not in result.stdout\n    assert \"Carlos\" not in result.stdout\n    assert \"Sebastian\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_powershell",
        "content": "def test_completion_powershell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL003.PY_COMPLETE\": \"complete_powershell\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial003.py --name Seb\",\n            \"_TYPER_COMPLETE_WORD_TO_COMPLETE\": \"Seb\",\n        },\n    )\n    assert \"Camila\" not in result.stdout\n    assert \"Carlos\" not in result.stdout\n    assert \"Sebastian\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion_zsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion_zsh",
        "content": "def test_completion_zsh():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL003_AN.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial003_an.py --name Seb\",\n        },\n    )\n    assert \"Camila\" not in result.stdout\n    assert \"Carlos\" not in result.stdout\n    assert \"Sebastian\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_completion_powershell",
        "content": "def test_completion_powershell():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL003_AN.PY_COMPLETE\": \"complete_powershell\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial003.py --name Seb\",\n            \"_TYPER_COMPLETE_WORD_TO_COMPLETE\": \"Seb\",\n        },\n    )\n    assert \"Camila\" not in result.stdout\n    assert \"Carlos\" not in result.stdout\n    assert \"Sebastian\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion_zsh",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_completion_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL004.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial004_aux.py --name \",\n        },\n    )\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n    assert '\"Sebastian\":\"The type hints guy.\"' in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL004_AN.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial004_an_aux.py --name \",\n        },\n    )\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n    assert '\"Sebastian\":\"The type hints guy.\"' in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial007.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL007.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial007.py --name Sebastian --name \",\n        },\n    )\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n    assert '\"Sebastian\":\"The type hints guy.\"' not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\", \"--name\", \"Sebastian\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output\n    assert \"Hello Sebastian\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial007_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL007_AN.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial007_an.py --name Sebastian --name \",\n        },\n    )\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n    assert '\"Sebastian\":\"The type hints guy.\"' not in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\", \"--name\", \"Sebastian\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output\n    assert \"Hello Sebastian\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial008.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL008.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial008.py --name \",\n        },\n    )\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n    assert '\"Sebastian\":\"The type hints guy.\"' in result.stdout\n    assert \"[]\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\", \"--name\", \"Sebastian\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output\n    assert \"Hello Sebastian\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial008_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL008_AN.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial008_an.py --name \",\n        },\n    )\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n    assert '\"Sebastian\":\"The type hints guy.\"' in result.stdout\n    assert \"[]\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\", \"--name\", \"Sebastian\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output\n    assert \"Hello Sebastian\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial009.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL009.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial009.py --name Sebastian --name \",\n        },\n    )\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n    assert '\"Sebastian\":\"The type hints guy.\"' not in result.stdout\n    assert \"[]\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\", \"--name\", \"Sebastian\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output\n    assert \"Hello Sebastian\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_options_autocompletion/test_tutorial009_an.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.options_autocompletion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_completion",
        "content": "def test_completion():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \" \"],\n        capture_output=True,\n        encoding=\"utf-8\",\n        env={\n            **os.environ,\n            \"_TUTORIAL009_AN.PY_COMPLETE\": \"complete_zsh\",\n            \"_TYPER_COMPLETE_ARGS\": \"tutorial009_an.py --name Sebastian --name \",\n        },\n    )\n    assert '\"Camila\":\"The reader of books.\"' in result.stdout\n    assert '\"Carlos\":\"The writer of scripts.\"' in result.stdout\n    assert '\"Sebastian\":\"The type hints guy.\"' not in result.stdout\n    assert \"[]\" in result.stderr",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_1",
        "content": "def test_1():\n    result = runner.invoke(mod.app, [\"--name\", \"Camila\", \"--name\", \"Sebastian\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.output\n    assert \"Hello Sebastian\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_completion",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.bool",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--force\" in result.output\n    assert \"--no-force\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_force",
        "content": "def test_no_force():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Not forcing\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_force",
        "content": "def test_force():\n    result = runner.invoke(app, [\"--force\"])\n    assert result.exit_code == 0\n    assert \"Forcing operation\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_no_force",
        "content": "def test_invalid_no_force():\n    result = runner.invoke(app, [\"--no-force\"])\n    assert result.exit_code != 0\n    assert \"No such option: --no-force\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_no_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.bool",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--force\" in result.output\n    assert \"--no-force\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_force",
        "content": "def test_no_force():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Not forcing\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_force",
        "content": "def test_force():\n    result = runner.invoke(app, [\"--force\"])\n    assert result.exit_code == 0\n    assert \"Forcing operation\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_no_force",
        "content": "def test_invalid_no_force():\n    result = runner.invoke(app, [\"--no-force\"])\n    assert result.exit_code != 0\n    assert \"No such option: --no-force\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_no_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.bool",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--accept\" in result.output\n    assert \"--reject\" in result.output\n    assert \"--no-accept\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--accept\" in result.output\n    assert \"--reject\" in result.output\n    assert \"--no-accept\" not in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"I don't know what you want yet\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_accept",
        "content": "def test_accept():\n    result = runner.invoke(app, [\"--accept\"])\n    assert result.exit_code == 0\n    assert \"Accepting!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_reject",
        "content": "def test_reject():\n    result = runner.invoke(app, [\"--reject\"])\n    assert result.exit_code == 0\n    assert \"Rejecting!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_no_accept",
        "content": "def test_invalid_no_accept():\n    result = runner.invoke(app, [\"--no-accept\"])\n    assert result.exit_code != 0\n    assert \"No such option: --no-accept\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_accept",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_reject",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_no_accept",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.bool",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--accept\" in result.output\n    assert \"--reject\" in result.output\n    assert \"--no-accept\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--accept\" in result.output\n    assert \"--reject\" in result.output\n    assert \"--no-accept\" not in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"I don't know what you want yet\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_accept",
        "content": "def test_accept():\n    result = runner.invoke(app, [\"--accept\"])\n    assert result.exit_code == 0\n    assert \"Accepting!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_reject",
        "content": "def test_reject():\n    result = runner.invoke(app, [\"--reject\"])\n    assert result.exit_code == 0\n    assert \"Rejecting!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_no_accept",
        "content": "def test_invalid_no_accept():\n    result = runner.invoke(app, [\"--no-accept\"])\n    assert result.exit_code != 0\n    assert \"No such option: --no-accept\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_accept",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_reject",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_no_accept",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.bool",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-f\" in result.output\n    assert \"--force\" in result.output\n    assert \"-F\" in result.output\n    assert \"--no-force\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_force",
        "content": "def test_force():\n    result = runner.invoke(app, [\"-f\"])\n    assert result.exit_code == 0\n    assert \"Forcing operation\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_force",
        "content": "def test_no_force():\n    result = runner.invoke(app, [\"-F\"])\n    assert result.exit_code == 0\n    assert \"Not forcing\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.bool",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-f\" in result.output\n    assert \"--force\" in result.output\n    assert \"-F\" in result.output\n    assert \"--no-force\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_force",
        "content": "def test_force():\n    result = runner.invoke(app, [\"-f\"])\n    assert result.exit_code == 0\n    assert \"Forcing operation\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_force",
        "content": "def test_no_force():\n    result = runner.invoke(app, [\"-F\"])\n    assert result.exit_code == 0\n    assert \"Not forcing\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_force",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.bool",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-d\" in result.output\n    assert \"--demo\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Running in production\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_demo",
        "content": "def test_demo():\n    result = runner.invoke(app, [\"--demo\"])\n    assert result.exit_code == 0\n    assert \"Running demo\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_short_demo",
        "content": "def test_short_demo():\n    result = runner.invoke(app, [\"-d\"])\n    assert result.exit_code == 0\n    assert \"Running demo\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_demo",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_short_demo",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_bool/test_tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.bool",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"-d\" in result.output\n    assert \"--demo\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Running in production\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_demo",
        "content": "def test_demo():\n    result = runner.invoke(app, [\"--demo\"])\n    assert result.exit_code == 0\n    assert \"Running demo\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_short_demo",
        "content": "def test_short_demo():\n    result = runner.invoke(app, [\"-d\"])\n    assert result.exit_code == 0\n    assert \"Running demo\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_demo",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_short_demo",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_custom_types/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_custom_types/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.custom_types",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_parse_custom_type",
        "content": "def test_parse_custom_type():\n    result = runner.invoke(app, [\"0\", \"--custom-opt\", \"1\"])\n    assert \"custom_arg is <CustomClass: value=00>\" in result.output\n    assert \"custom-opt is <CustomClass: value=11>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_parse_custom_type_with_default",
        "content": "def test_parse_custom_type_with_default():\n    result = runner.invoke(app, [\"0\"])\n    assert \"custom_arg is <CustomClass: value=00>\" in result.output\n    assert \"custom-opt is <CustomClass: value=FooFoo>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_parse_custom_type",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_parse_custom_type_with_default",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_custom_types/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.custom_types",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_parse_custom_type",
        "content": "def test_parse_custom_type():\n    result = runner.invoke(app, [\"0\", \"--custom-opt\", \"1\"])\n    assert \"custom_arg is <CustomClass: value=00>\" in result.output\n    assert \"custom-opt is <CustomClass: value=11>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_parse_custom_type_with_default",
        "content": "def test_parse_custom_type_with_default():\n    result = runner.invoke(app, [\"0\"])\n    assert \"custom_arg is <CustomClass: value=00>\" in result.output\n    assert \"custom-opt is <CustomClass: value=FooFoo>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_parse_custom_type",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_parse_custom_type_with_default",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_custom_types/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.custom_types",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_parse_custom_type",
        "content": "def test_parse_custom_type():\n    result = runner.invoke(app, [\"0\", \"--custom-opt\", \"1\"])\n    assert \"custom_arg is <CustomClass: value=000>\" in result.output\n    assert \"custom-opt is <CustomClass: value=111>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_parse_custom_type_with_default",
        "content": "def test_parse_custom_type_with_default():\n    result = runner.invoke(app, [\"0\"])\n    assert \"custom_arg is <CustomClass: value=000>\" in result.output\n    assert \"custom-opt is <CustomClass: value=FooFooFoo>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_parse_custom_type",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_parse_custom_type_with_default",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_custom_types/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.custom_types",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_parse_custom_type",
        "content": "def test_parse_custom_type():\n    result = runner.invoke(app, [\"0\", \"--custom-opt\", \"1\"])\n    assert \"custom_arg is <CustomClass: value=000>\" in result.output\n    assert \"custom-opt is <CustomClass: value=111>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_parse_custom_type_with_default",
        "content": "def test_parse_custom_type_with_default():\n    result = runner.invoke(app, [\"0\"])\n    assert \"custom_arg is <CustomClass: value=000>\" in result.output\n    assert \"custom-opt is <CustomClass: value=FooFooFoo>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_parse_custom_type",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_parse_custom_type_with_default",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_datetime/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_datetime/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.datetime",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app, [\"1956-01-31T10:00:00\"])\n    assert result.exit_code == 0\n    assert \"Interesting day to be born: 1956-01-31 10:00:00\" in result.output\n    assert \"Birth hour: 10\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid",
        "content": "def test_invalid():\n    result = runner.invoke(app, [\"july-19-1989\"])\n    assert result.exit_code != 0\n    assert (\n        \"Invalid value for 'BIRTH:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S]':\"\n        in result.output\n    )\n    assert \"'july-19-1989' does not match the formats\" in result.output\n    assert \"%Y-%m-%d\" in result.output\n    assert \"%Y-%m-%dT%H:%M:%S\" in result.output\n    assert \"%Y-%m-%d %H:%M:%S\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_datetime/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.datetime",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app, [\"1969-10-29\"])\n    assert result.exit_code == 0\n    assert \"Launch will be at: 1969-10-29 00:00:00\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_usa_weird_date_format",
        "content": "def test_usa_weird_date_format():\n    result = runner.invoke(app, [\"10/29/1969\"])\n    assert result.exit_code == 0\n    assert \"Launch will be at: 1969-10-29 00:00:00\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_usa_weird_date_format",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_datetime/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.datetime",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app, [\"1969-10-29\"])\n    assert result.exit_code == 0\n    assert \"Launch will be at: 1969-10-29 00:00:00\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_usa_weird_date_format",
        "content": "def test_usa_weird_date_format():\n    result = runner.invoke(app, [\"10/29/1969\"])\n    assert result.exit_code == 0\n    assert \"Launch will be at: 1969-10-29 00:00:00\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_usa_weird_date_format",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_enum/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_enum/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.enum",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--network\" in result.output\n    assert \"[simple|conv|lstm]\" in result.output\n    assert \"default: simple\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app, [\"--network\", \"conv\"])\n    assert result.exit_code == 0\n    assert \"Training neural network of type: conv\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main_default",
        "content": "def test_main_default():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Training neural network of type: simple\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_case",
        "content": "def test_invalid_case():\n    result = runner.invoke(app, [\"--network\", \"CONV\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--network'\" in result.output\n    assert \"'CONV' is not one of\" in result.output\n    assert \"simple\" in result.output\n    assert \"conv\" in result.output\n    assert \"lstm\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_other",
        "content": "def test_invalid_other():\n    result = runner.invoke(app, [\"--network\", \"capsule\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--network'\" in result.output\n    assert \"'capsule' is not one of\" in result.output\n    assert \"simple\" in result.output\n    assert \"conv\" in result.output\n    assert \"lstm\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main_default",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_case",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_other",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_enum/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.enum",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_upper",
        "content": "def test_upper():\n    result = runner.invoke(app, [\"--network\", \"CONV\"])\n    assert result.exit_code == 0\n    assert \"Training neural network of type: conv\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_mix",
        "content": "def test_mix():\n    result = runner.invoke(app, [\"--network\", \"LsTm\"])\n    assert result.exit_code == 0\n    assert \"Training neural network of type: lstm\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_upper",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_mix",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_enum/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.enum",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_upper",
        "content": "def test_upper():\n    result = runner.invoke(app, [\"--network\", \"CONV\"])\n    assert result.exit_code == 0\n    assert \"Training neural network of type: conv\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_mix",
        "content": "def test_mix():\n    result = runner.invoke(app, [\"--network\", \"LsTm\"])\n    assert result.exit_code == 0\n    assert \"Training neural network of type: lstm\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_upper",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_mix",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_enum/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.enum",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--groceries\" in result.output\n    assert \"[Eggs|Bacon|Cheese]\" in result.output\n    assert \"default: Eggs, Cheese\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Buying groceries: Eggs, Cheese\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_single_arg",
        "content": "def test_call_single_arg():\n    result = runner.invoke(app, [\"--groceries\", \"Bacon\"])\n    assert result.exit_code == 0\n    assert \"Buying groceries: Bacon\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_multiple_arg",
        "content": "def test_call_multiple_arg():\n    result = runner.invoke(app, [\"--groceries\", \"Eggs\", \"--groceries\", \"Bacon\"])\n    assert result.exit_code == 0\n    assert \"Buying groceries: Eggs, Bacon\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_single_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_multiple_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_enum/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.enum",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--groceries\" in result.output\n    assert \"[Eggs|Bacon|Cheese]\" in result.output\n    assert \"default: Eggs, Cheese\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_no_arg",
        "content": "def test_call_no_arg():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Buying groceries: Eggs, Cheese\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_single_arg",
        "content": "def test_call_single_arg():\n    result = runner.invoke(app, [\"--groceries\", \"Bacon\"])\n    assert result.exit_code == 0\n    assert \"Buying groceries: Bacon\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_call_multiple_arg",
        "content": "def test_call_multiple_arg():\n    result = runner.invoke(app, [\"--groceries\", \"Eggs\", \"--groceries\", \"Bacon\"])\n    assert result.exit_code == 0\n    assert \"Buying groceries: Eggs, Bacon\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_no_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_single_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_call_multiple_arg",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_enum/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.enum",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--network [simple|conv|lstm]\" in result.output.replace(\"  \", \"\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app, [\"--network\", \"conv\"])\n    assert result.exit_code == 0\n    assert \"Training neural network of type: conv\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid",
        "content": "def test_invalid():\n    result = runner.invoke(app, [\"--network\", \"capsule\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--network'\" in result.output\n    assert (\n        \"invalid choice: capsule. (choose from\" in result.output\n        or \"'capsule' is not one of\" in result.output\n    )\n    assert \"simple\" in result.output\n    assert \"conv\" in result.output\n    assert \"lstm\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_enum/test_tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.enum",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--network [simple|conv|lstm]\" in result.output.replace(\"  \", \"\")",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app, [\"--network\", \"conv\"])\n    assert result.exit_code == 0\n    assert \"Training neural network of type: conv\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid",
        "content": "def test_invalid():\n    result = runner.invoke(app, [\"--network\", \"capsule\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--network'\" in result.output\n    assert (\n        \"invalid choice: capsule. (choose from\" in result.output\n        or \"'capsule' is not one of\" in result.output\n    )\n    assert \"simple\" in result.output\n    assert \"conv\" in result.output\n    assert \"lstm\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    config_file.write_text(\"some settings\\nsome more settings\")\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config line: some settings\" in result.output\n    assert \"Config line: some more settings\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    config_file.write_text(\"some settings\\nsome more settings\")\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config line: some settings\" in result.output\n    assert \"Config line: some more settings\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    if config_file.exists():  # pragma: no cover\n        config_file.unlink()\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    text = config_file.read_text()\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config written\" in result.output\n    assert \"Some config written by the app\" in text",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    if config_file.exists():  # pragma: no cover\n        config_file.unlink()\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    text = config_file.read_text()\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config written\" in result.output\n    assert \"Some config written by the app\" in text",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    binary_file = Path(tmpdir) / \"config.txt\"\n    binary_file.write_bytes(b\"la cig\\xc3\\xbce\\xc3\\xb1a trae al ni\\xc3\\xb1o\")\n    result = runner.invoke(app, [\"--file\", f\"{binary_file}\"])\n    binary_file.unlink()\n    assert result.exit_code == 0\n    assert \"Processed bytes total:\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "write_bytes",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    binary_file = Path(tmpdir) / \"config.txt\"\n    binary_file.write_bytes(b\"la cig\\xc3\\xbce\\xc3\\xb1a trae al ni\\xc3\\xb1o\")\n    result = runner.invoke(app, [\"--file\", f\"{binary_file}\"])\n    binary_file.unlink()\n    assert result.exit_code == 0\n    assert \"Processed bytes total:\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "write_bytes",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    binary_file = Path(tmpdir) / \"config.txt\"\n    if binary_file.exists():  # pragma: no cover\n        binary_file.unlink()\n    result = runner.invoke(app, [\"--file\", f\"{binary_file}\"])\n    text = binary_file.read_text(encoding=\"utf-8\")\n    binary_file.unlink()\n    assert result.exit_code == 0\n    assert \"Binary file written\" in result.output\n    assert \"some settings\" in text\n    assert \"la cig\u00fce\u00f1a trae al ni\u00f1o\" in text",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial004_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    binary_file = Path(tmpdir) / \"config.txt\"\n    if binary_file.exists():  # pragma: no cover\n        binary_file.unlink()\n    result = runner.invoke(app, [\"--file\", f\"{binary_file}\"])\n    text = binary_file.read_text(encoding=\"utf-8\")\n    binary_file.unlink()\n    assert result.exit_code == 0\n    assert \"Binary file written\" in result.output\n    assert \"some settings\" in text\n    assert \"la cig\u00fce\u00f1a trae al ni\u00f1o\" in text",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    if config_file.exists():  # pragma: no cover\n        config_file.unlink()\n        config_file.write_text(\"\")\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    text = config_file.read_text()\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config line written\"\n    assert \"This is a single line\\nThis is a single line\\nThis is a single line\" in text",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_file/test_tutorial005_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.file",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    if config_file.exists():  # pragma: no cover\n        config_file.unlink()\n        config_file.write_text(\"\")\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    text = config_file.read_text()\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config line written\"\n    assert \"This is a single line\\nThis is a single line\\nThis is a single line\" in text",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_index/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_index/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.index",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--age\" in result.output\n    assert \"INTEGER\" in result.output\n    assert \"--height-meters\" in result.output\n    assert \"FLOAT\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_params",
        "content": "def test_params():\n    result = runner.invoke(\n        app, [\"Camila\", \"--age\", \"15\", \"--height-meters\", \"1.70\", \"--female\"]\n    )\n    assert result.exit_code == 0\n    assert \"NAME is Camila, of type: <class 'str'>\" in result.output\n    assert \"--age is 15, of type: <class 'int'>\" in result.output\n    assert \"--height-meters is 1.7, of type: <class 'float'>\" in result.output\n    assert \"--female is True, of type: <class 'bool'>\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid",
        "content": "def test_invalid():\n    result = runner.invoke(app, [\"Camila\", \"--age\", \"15.3\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--age'\" in result.output\n    assert \"'15.3' is not a valid integer\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_params",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_number/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_number/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.number",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--age\" in result.output\n    assert \"INTEGER RANGE\" in result.output\n    assert \"--score\" in result.output\n    assert \"FLOAT RANGE\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--age\" in result.output\n    assert \"INTEGER RANGE\" in result.output\n    assert \"--score\" in result.output\n    assert \"FLOAT RANGE\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_params",
        "content": "def test_params():\n    result = runner.invoke(app, [\"5\", \"--age\", \"20\", \"--score\", \"90\"])\n    assert result.exit_code == 0\n    assert \"ID is 5\" in result.output\n    assert \"--age is 20\" in result.output\n    assert \"--score is 90.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_id",
        "content": "def test_invalid_id():\n    result = runner.invoke(app, [\"1002\"])\n    assert result.exit_code != 0\n    assert (\n        \"Invalid value for 'ID': 1002 is not in the range 0<=x<=1000.\" in result.output\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_age",
        "content": "def test_invalid_age():\n    result = runner.invoke(app, [\"5\", \"--age\", \"15\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--age'\" in result.output\n    assert \"15 is not in the range x>=18\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_score",
        "content": "def test_invalid_score():\n    result = runner.invoke(app, [\"5\", \"--age\", \"20\", \"--score\", \"100.5\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--score'\" in result.output\n    assert \"100.5 is not in the range x<=100.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_negative_score",
        "content": "def test_negative_score():\n    result = runner.invoke(app, [\"5\", \"--age\", \"20\", \"--score\", \"-5\"])\n    assert result.exit_code == 0\n    assert \"ID is 5\" in result.output\n    assert \"--age is 20\" in result.output\n    assert \"--score is -5.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_params",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_id",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_age",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_score",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_negative_score",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_number/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.number",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--age\" in result.output\n    assert \"INTEGER RANGE\" in result.output\n    assert \"--score\" in result.output\n    assert \"FLOAT RANGE\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_no_rich",
        "content": "def test_help_no_rich(monkeypatch: pytest.MonkeyPatch):\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"--age\" in result.output\n    assert \"INTEGER RANGE\" in result.output\n    assert \"--score\" in result.output\n    assert \"FLOAT RANGE\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_params",
        "content": "def test_params():\n    result = runner.invoke(app, [\"5\", \"--age\", \"20\", \"--score\", \"90\"])\n    assert result.exit_code == 0\n    assert \"ID is 5\" in result.output\n    assert \"--age is 20\" in result.output\n    assert \"--score is 90.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_id",
        "content": "def test_invalid_id():\n    result = runner.invoke(app, [\"1002\"])\n    assert result.exit_code != 0\n    assert (\n        \"Invalid value for 'ID': 1002 is not in the range 0<=x<=1000.\" in result.output\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_age",
        "content": "def test_invalid_age():\n    result = runner.invoke(app, [\"5\", \"--age\", \"15\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--age'\" in result.output\n    assert \"15 is not in the range x>=18\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_score",
        "content": "def test_invalid_score():\n    result = runner.invoke(app, [\"5\", \"--age\", \"20\", \"--score\", \"100.5\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--score'\" in result.output\n    assert \"100.5 is not in the range x<=100.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_negative_score",
        "content": "def test_negative_score():\n    result = runner.invoke(app, [\"5\", \"--age\", \"20\", \"--score\", \"-5\"])\n    assert result.exit_code == 0\n    assert \"ID is 5\" in result.output\n    assert \"--age is 20\" in result.output\n    assert \"--score is -5.0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_params",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_id",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_age",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_score",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_negative_score",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_number/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.number",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_invalid_id",
        "content": "def test_invalid_id():\n    result = runner.invoke(app, [\"1002\"])\n    assert result.exit_code != 0\n    assert (\n        \"Invalid value for 'ID': 1002 is not in the range 0<=x<=1000\" in result.output\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_clamped",
        "content": "def test_clamped():\n    result = runner.invoke(app, [\"5\", \"--rank\", \"11\", \"--score\", \"-5\"])\n    assert result.exit_code == 0\n    assert \"ID is 5\" in result.output\n    assert \"--rank is 10\" in result.output\n    assert \"--score is 0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_invalid_id",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_clamped",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_number/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.number",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_invalid_id",
        "content": "def test_invalid_id():\n    result = runner.invoke(app, [\"1002\"])\n    assert result.exit_code != 0\n    assert (\n        \"Invalid value for 'ID': 1002 is not in the range 0<=x<=1000\" in result.output\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_clamped",
        "content": "def test_clamped():\n    result = runner.invoke(app, [\"5\", \"--rank\", \"11\", \"--score\", \"-5\"])\n    assert result.exit_code == 0\n    assert \"ID is 5\" in result.output\n    assert \"--rank is 10\" in result.output\n    assert \"--score is 0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_invalid_id",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_clamped",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_number/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.number",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Verbose level is 0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_1",
        "content": "def test_verbose_1():\n    result = runner.invoke(app, [\"--verbose\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 1\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_3",
        "content": "def test_verbose_3():\n    result = runner.invoke(app, [\"--verbose\", \"--verbose\", \"--verbose\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 3\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_short_1",
        "content": "def test_verbose_short_1():\n    result = runner.invoke(app, [\"-v\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 1\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_short_3",
        "content": "def test_verbose_short_3():\n    result = runner.invoke(app, [\"-v\", \"-v\", \"-v\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 3\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_short_3_condensed",
        "content": "def test_verbose_short_3_condensed():\n    result = runner.invoke(app, [\"-vvv\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 3\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_3",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_short_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_short_3",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_short_3_condensed",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_number/test_tutorial003_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.number",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Verbose level is 0\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_1",
        "content": "def test_verbose_1():\n    result = runner.invoke(app, [\"--verbose\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 1\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_3",
        "content": "def test_verbose_3():\n    result = runner.invoke(app, [\"--verbose\", \"--verbose\", \"--verbose\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 3\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_short_1",
        "content": "def test_verbose_short_1():\n    result = runner.invoke(app, [\"-v\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 1\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_short_3",
        "content": "def test_verbose_short_3():\n    result = runner.invoke(app, [\"-v\", \"-v\", \"-v\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 3\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_verbose_short_3_condensed",
        "content": "def test_verbose_short_3_condensed():\n    result = runner.invoke(app, [\"-vvv\"])\n    assert result.exit_code == 0\n    assert \"Verbose level is 3\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_3",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_short_1",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_short_3",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_verbose_short_3_condensed",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_path/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_path/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.path",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_no_path",
        "content": "def test_no_path(tmpdir):\n    Path(tmpdir) / \"config.txt\"\n    result = runner.invoke(app)\n    assert result.exit_code == 1\n    assert \"No config file\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_not_exists",
        "content": "def test_not_exists(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    if config_file.exists():  # pragma: no cover\n        config_file.unlink()\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    assert result.exit_code == 0\n    assert \"The config doesn't exist\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_exists",
        "content": "def test_exists(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    config_file.write_text(\"some settings\")\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config file contents: some settings\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_dir",
        "content": "def test_dir():\n    result = runner.invoke(app, [\"--config\", \"./\"])\n    assert result.exit_code == 0\n    assert \"Config is a directory, will use all its config files\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_no_path",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_path",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_dir",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_path/test_tutorial001_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.path",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_no_path",
        "content": "def test_no_path(tmpdir):\n    Path(tmpdir) / \"config.txt\"\n    result = runner.invoke(app)\n    assert result.exit_code == 1\n    assert \"No config file\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_not_exists",
        "content": "def test_not_exists(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    if config_file.exists():  # pragma: no cover\n        config_file.unlink()\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    assert result.exit_code == 0\n    assert \"The config doesn't exist\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_exists",
        "content": "def test_exists(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    config_file.write_text(\"some settings\")\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config file contents: some settings\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_dir",
        "content": "def test_dir():\n    result = runner.invoke(app, [\"--config\", \"./\"])\n    assert result.exit_code == 0\n    assert \"Config is a directory, will use all its config files\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_no_path",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_path",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_dir",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_path/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.path",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_not_exists",
        "content": "def test_not_exists(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    if config_file.exists():  # pragma: no cover\n        config_file.unlink()\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--config'\" in result.output\n    assert \"File\" in result.output\n    assert \"does not exist\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_exists",
        "content": "def test_exists(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    config_file.write_text(\"some settings\")\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config file contents: some settings\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_dir",
        "content": "def test_dir():\n    result = runner.invoke(app, [\"--config\", \"./\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--config'\" in result.output\n    assert \"File './' is a directory.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_dir",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_path/test_tutorial002_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.path",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_not_exists",
        "content": "def test_not_exists(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    if config_file.exists():  # pragma: no cover\n        config_file.unlink()\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--config'\" in result.output\n    assert \"File\" in result.output\n    assert \"does not exist\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_exists",
        "content": "def test_exists(tmpdir):\n    config_file = Path(tmpdir) / \"config.txt\"\n    config_file.write_text(\"some settings\")\n    result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\n    config_file.unlink()\n    assert result.exit_code == 0\n    assert \"Config file contents: some settings\" in result.output",
        "signature": {
          "args": [
            "tmpdir"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_dir",
        "content": "def test_dir():\n    result = runner.invoke(app, [\"--config\", \"./\"])\n    assert result.exit_code != 0\n    assert \"Invalid value for '--config'\" in result.output\n    assert \"File './' is a directory.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_not_exists",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_exists",
        "caller_class": null,
        "called_function": "unlink",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_dir",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_uuid/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_parameter_types/test_uuid/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.parameter_types.uuid",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_main",
        "content": "def test_main():\n    result = runner.invoke(app, [\"d48edaa6-871a-4082-a196-4daab372d4a1\"])\n    assert result.exit_code == 0\n    assert \"USER_ID is d48edaa6-871a-4082-a196-4daab372d4a1\" in result.output\n    assert \"UUID version is: 4\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_invalid_uuid",
        "content": "def test_invalid_uuid():\n    result = runner.invoke(app, [\"7479706572-72756c6573\"])\n    assert result.exit_code != 0\n    assert (\n        \"Invalid value for 'USER_ID': '7479706572-72756c6573' is not a valid UUID\"\n        in result.output\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_invalid_uuid",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_prompt/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_prompt/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, input=\"Camila\\n\")\n    assert result.exit_code == 0\n    assert \"What's your name?:\" in result.output\n    assert \"Hello Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_prompt/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete it? [y/N]:\" in result.output\n    assert \"Deleting it!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_confirm",
        "content": "def test_no_confirm():\n    result = runner.invoke(app, input=\"n\\n\")\n    assert result.exit_code == 1\n    assert \"Are you sure you want to delete it? [y/N]:\" in result.output\n    assert \"Not deleting\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_confirm",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_prompt/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.prompt",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, input=\"y\\n\")\n    assert result.exit_code == 0\n    assert \"Are you sure you want to delete it? [y/N]:\" in result.output\n    assert \"Deleting it!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_no_confirm",
        "content": "def test_no_confirm():\n    result = runner.invoke(app, input=\"n\\n\")\n    assert result.exit_code == 1\n    assert \"Are you sure you want to delete it? [y/N]:\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_confirm",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_callback_override/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_callback_override/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.callback_override",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Running a users command\" in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_callback_override/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.callback_override",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Running a users command\" in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_callback_override/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.callback_override",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Running a users command\" not in result.output\n    assert \"Callback override, running users command\" in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_for_coverage",
        "content": "def test_for_coverage():\n    mod.default_callback()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_for_coverage",
        "caller_class": null,
        "called_function": "default_callback",
        "called_function_files": [
          "docs_src/subcommands/callback_override/tutorial003.py",
          "docs_src/subcommands/callback_override/tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_callback_override/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.callback_override",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Running a users command\" not in result.output\n    assert \"Callback override, running users command\" not in result.output\n    assert \"I have the high land! Running users command\" in result.output\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_for_coverage",
        "content": "def test_for_coverage():\n    mod.default_callback()\n    mod.user_callback()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_for_coverage",
        "caller_class": null,
        "called_function": "default_callback",
        "called_function_files": [
          "docs_src/subcommands/callback_override/tutorial003.py",
          "docs_src/subcommands/callback_override/tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_for_coverage",
        "caller_class": null,
        "called_function": "user_callback",
        "called_function_files": [
          "docs_src/subcommands/callback_override/tutorial003.py",
          "docs_src/subcommands/callback_override/tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.name_help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"users\" in result.output\n    assert \"Manage users in the app.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command_help",
        "content": "def test_command_help():\n    result = runner.invoke(app, [\"users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Manage users in the app.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.name_help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"users\" in result.output\n    assert \"Manage users in the app.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command_help",
        "content": "def test_command_help():\n    result = runner.invoke(app, [\"users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Manage users in the app.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.name_help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"users\" in result.output\n    assert \"Manage users in the app.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command_help",
        "content": "def test_command_help():\n    result = runner.invoke(app, [\"users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Manage users in the app.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.name_help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"users\" in result.output\n    assert \"Manage users in the app.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command_help",
        "content": "def test_command_help():\n    result = runner.invoke(app, [\"users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Manage users in the app.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/test_tutorial005.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.name_help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"new-users\" in result.output\n    assert \"I have the highland! Create some users.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command_help",
        "content": "def test_command_help():\n    result = runner.invoke(app, [\"new-users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"I have the highland! Create some users.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"new-users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/test_tutorial006.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.name_help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"exp-users\" in result.output\n    assert \"Explicit help.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command_help",
        "content": "def test_command_help():\n    result = runner.invoke(app, [\"exp-users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Explicit help.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"exp-users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/test_tutorial007.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.name_help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"users\" in result.output\n    assert \"Help from callback for users.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command_help",
        "content": "def test_command_help():\n    result = runner.invoke(app, [\"users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Help from callback for users.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_name_help/test_tutorial008.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.name_help",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"cake-sith-users\" in result.output\n    assert \"Unlimited powder! Eh, users.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command_help",
        "content": "def test_command_help():\n    result = runner.invoke(app, [\"cake-sith-users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"Unlimited powder! Eh, users.\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_command",
        "content": "def test_command():\n    result = runner.invoke(app, [\"cake-sith-users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_command",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.tutorial001",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.tutorial001",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "mod",
        "content": "def mod(monkeypatch):\n    with monkeypatch.context():\n        monkeypatch.syspath_prepend(list(tutorial001.__path__)[0])\n        from docs_src.subcommands.tutorial001 import main\n\n        return main",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.fixture()"
        ]
      },
      {
        "name": "app",
        "content": "def app(mod):\n    return mod.app",
        "signature": {
          "args": [
            "mod"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.fixture()"
        ]
      },
      {
        "name": "test_help",
        "content": "def test_help(app):\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"items\" in result.output\n    assert \"users\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_items",
        "content": "def test_help_items(app):\n    result = runner.invoke(app, [\"items\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    assert \"sell\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_create",
        "content": "def test_items_create(app):\n    result = runner.invoke(app, [\"items\", \"create\", \"Wand\"])\n    assert result.exit_code == 0\n    assert \"Creating item: Wand\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_sell",
        "content": "def test_items_sell(app):\n    result = runner.invoke(app, [\"items\", \"sell\", \"Vase\"])\n    assert result.exit_code == 0\n    assert \"Selling item: Vase\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_delete",
        "content": "def test_items_delete(app):\n    result = runner.invoke(app, [\"items\", \"delete\", \"Vase\"])\n    assert result.exit_code == 0\n    assert \"Deleting item: Vase\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_users",
        "content": "def test_help_users(app):\n    result = runner.invoke(app, [\"users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    assert \"sell\" not in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_users_create",
        "content": "def test_users_create(app):\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_users_delete",
        "content": "def test_users_delete(app):\n    result = runner.invoke(app, [\"users\", \"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_scripts",
        "content": "def test_scripts(mod):\n    from docs_src.subcommands.tutorial001 import items, users\n\n    env = os.environ.copy()\n    env[\"PYTHONPATH\"] = \":\".join(list(tutorial001.__path__))\n\n    for module in [mod, items, users]:\n        result = subprocess.run(\n            [sys.executable, \"-m\", \"coverage\", \"run\", module.__file__, \"--help\"],\n            capture_output=True,\n            encoding=\"utf-8\",\n            env=env,\n        )\n        assert \"Usage\" in result.stdout",
        "signature": {
          "args": [
            "mod"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "mod",
        "caller_class": null,
        "called_function": "context",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "mod",
        "caller_class": null,
        "called_function": "syspath_prepend",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "mod",
        "caller_class": null,
        "called_function": "list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "mod",
        "caller_class": null,
        "called_function": "fixture",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "app",
        "caller_class": null,
        "called_function": "fixture",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_items",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_sell",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_users",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_scripts",
        "caller_class": null,
        "called_function": "copy",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_scripts",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_scripts",
        "caller_class": null,
        "called_function": "list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_scripts",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.tutorial002",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"items\" in result.output\n    assert \"users\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_items",
        "content": "def test_help_items():\n    result = runner.invoke(app, [\"items\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    assert \"sell\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_create",
        "content": "def test_items_create():\n    result = runner.invoke(app, [\"items\", \"create\", \"Wand\"])\n    assert result.exit_code == 0\n    assert \"Creating item: Wand\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_sell",
        "content": "def test_items_sell():\n    result = runner.invoke(app, [\"items\", \"sell\", \"Vase\"])\n    assert result.exit_code == 0\n    assert \"Selling item: Vase\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_delete",
        "content": "def test_items_delete():\n    result = runner.invoke(app, [\"items\", \"delete\", \"Vase\"])\n    assert result.exit_code == 0\n    assert \"Deleting item: Vase\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_users",
        "content": "def test_help_users():\n    result = runner.invoke(app, [\"users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    assert \"sell\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_users_create",
        "content": "def test_users_create():\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_users_delete",
        "content": "def test_users_delete():\n    result = runner.invoke(app, [\"users\", \"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_items",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_sell",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_users",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_subcommands/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.tutorial003",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.tutorial003",
        "type": "external"
      },
      {
        "module": "docs_src.subcommands.tutorial003",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "mod",
        "content": "def mod(monkeypatch):\n    with monkeypatch.context() as m:\n        m.syspath_prepend(list(tutorial003.__path__)[0])\n        from docs_src.subcommands.tutorial003 import main\n\n        return main",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.fixture()"
        ]
      },
      {
        "name": "app",
        "content": "def app(mod):\n    return mod.app",
        "signature": {
          "args": [
            "mod"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.fixture()"
        ]
      },
      {
        "name": "test_help",
        "content": "def test_help(app):\n    result = runner.invoke(app, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"items\" in result.output\n    assert \"users\" in result.output\n    assert \"lands\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_items",
        "content": "def test_help_items(app):\n    result = runner.invoke(app, [\"items\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    assert \"sell\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_create",
        "content": "def test_items_create(app):\n    result = runner.invoke(app, [\"items\", \"create\", \"Wand\"])\n    assert result.exit_code == 0\n    assert \"Creating item: Wand\" in result.output\n    # For coverage, because the monkeypatch above sometimes confuses coverage\n    result = runner.invoke(items.app, [\"create\", \"Wand\"])\n    assert result.exit_code == 0\n    assert \"Creating item: Wand\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_sell",
        "content": "def test_items_sell(app):\n    result = runner.invoke(app, [\"items\", \"sell\", \"Vase\"])\n    assert result.exit_code == 0\n    assert \"Selling item: Vase\" in result.output\n    # For coverage, because the monkeypatch above sometimes confuses coverage\n    result = runner.invoke(items.app, [\"sell\", \"Vase\"])\n    assert result.exit_code == 0\n    assert \"Selling item: Vase\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_items_delete",
        "content": "def test_items_delete(app):\n    result = runner.invoke(app, [\"items\", \"delete\", \"Vase\"])\n    assert result.exit_code == 0\n    assert \"Deleting item: Vase\" in result.output\n    # For coverage, because the monkeypatch above sometimes confuses coverage\n    result = runner.invoke(items.app, [\"delete\", \"Vase\"])\n    assert result.exit_code == 0\n    assert \"Deleting item: Vase\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_users",
        "content": "def test_help_users(app):\n    result = runner.invoke(app, [\"users\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"[OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"create\" in result.output\n    assert \"delete\" in result.output\n    assert \"sell\" not in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_users_create",
        "content": "def test_users_create(app):\n    result = runner.invoke(app, [\"users\", \"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output\n    # For coverage, because the monkeypatch above sometimes confuses coverage\n    result = runner.invoke(users.app, [\"create\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Creating user: Camila\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_users_delete",
        "content": "def test_users_delete(app):\n    result = runner.invoke(app, [\"users\", \"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output\n    # For coverage, because the monkeypatch above sometimes confuses coverage\n    result = runner.invoke(users.app, [\"delete\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"Deleting user: Camila\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_lands",
        "content": "def test_help_lands(app):\n    result = runner.invoke(app, [\"lands\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"lands [OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"reigns\" in result.output\n    assert \"towns\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_lands_reigns",
        "content": "def test_help_lands_reigns(app):\n    result = runner.invoke(app, [\"lands\", \"reigns\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"lands reigns [OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"conquer\" in result.output\n    assert \"destroy\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_lands_reigns_conquer",
        "content": "def test_lands_reigns_conquer(app):\n    result = runner.invoke(app, [\"lands\", \"reigns\", \"conquer\", \"Gondor\"])\n    assert result.exit_code == 0\n    assert \"Conquering reign: Gondor\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_lands_reigns_destroy",
        "content": "def test_lands_reigns_destroy(app):\n    result = runner.invoke(app, [\"lands\", \"reigns\", \"destroy\", \"Mordor\"])\n    assert result.exit_code == 0\n    assert \"Destroying reign: Mordor\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help_lands_towns",
        "content": "def test_help_lands_towns(app):\n    result = runner.invoke(app, [\"lands\", \"towns\", \"--help\"])\n    assert result.exit_code == 0\n    assert \"lands towns [OPTIONS] COMMAND [ARGS]...\" in result.output\n    assert \"Commands\" in result.output\n    assert \"burn\" in result.output\n    assert \"found\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_lands_towns_found",
        "content": "def test_lands_towns_found(app):\n    result = runner.invoke(app, [\"lands\", \"towns\", \"found\", \"Cartagena\"])\n    assert result.exit_code == 0\n    assert \"Founding town: Cartagena\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_lands_towns_burn",
        "content": "def test_lands_towns_burn(app):\n    result = runner.invoke(app, [\"lands\", \"towns\", \"burn\", \"New Asgard\"])\n    assert result.exit_code == 0\n    assert \"Burning town: New Asgard\" in result.output",
        "signature": {
          "args": [
            "app"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_scripts",
        "content": "def test_scripts(mod):\n    from docs_src.subcommands.tutorial003 import items, lands, reigns, towns, users\n\n    env = os.environ.copy()\n    env[\"PYTHONPATH\"] = \":\".join(list(tutorial003.__path__))\n\n    for module in [mod, items, lands, reigns, towns, users]:\n        result = subprocess.run(\n            [sys.executable, \"-m\", \"coverage\", \"run\", module.__file__, \"--help\"],\n            capture_output=True,\n            encoding=\"utf-8\",\n            env=env,\n        )\n        assert \"Usage\" in result.stdout",
        "signature": {
          "args": [
            "mod"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "mod",
        "caller_class": null,
        "called_function": "context",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "mod",
        "caller_class": null,
        "called_function": "syspath_prepend",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "mod",
        "caller_class": null,
        "called_function": "list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "mod",
        "caller_class": null,
        "called_function": "fixture",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "app",
        "caller_class": null,
        "called_function": "fixture",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_items",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_sell",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_sell",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_items_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_users",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_create",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_users_delete",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_lands",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_lands_reigns",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_lands_reigns_conquer",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_lands_reigns_destroy",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help_lands_towns",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_lands_towns_found",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_lands_towns_burn",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_scripts",
        "caller_class": null,
        "called_function": "copy",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_scripts",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_scripts",
        "caller_class": null,
        "called_function": "list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_scripts",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_terminating/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_terminating/test_tutorial001.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.terminating",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"User created: Camila\" in result.output\n    assert \"Notification sent for new user: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_existing",
        "content": "def test_existing():\n    result = runner.invoke(app, [\"rick\"])\n    assert result.exit_code == 0\n    assert \"The user already exists\" in result.output\n    assert \"Notification sent for new user\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_existing_no_standalone",
        "content": "def test_existing_no_standalone():\n    # Mainly for coverage\n    result = runner.invoke(app, [\"rick\"], standalone_mode=False)\n    assert result.exit_code == 0\n    assert \"The user already exists\" in result.output\n    assert \"Notification sent for new user\" not in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_existing",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_existing_no_standalone",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_terminating/test_tutorial002.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.terminating",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"New user created: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_root",
        "content": "def test_root():\n    result = runner.invoke(app, [\"root\"])\n    assert result.exit_code == 1\n    assert \"The root user is reserved\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_root",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_terminating/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "docs_src.terminating",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"New user created: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_root",
        "content": "def test_root():\n    result = runner.invoke(app, [\"root\"])\n    assert result.exit_code == 1\n    assert \"The root user is reserved\" in result.output\n    assert \"Aborted\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_root_no_standalone",
        "content": "def test_root_no_standalone():\n    # Mainly for coverage\n    result = runner.invoke(app, [\"root\"], standalone_mode=False)\n    assert result.exit_code == 1",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_root_no_rich",
        "content": "def test_root_no_rich(monkeypatch: pytest.MonkeyPatch):\n    # Mainly for coverage\n    monkeypatch.setattr(typer.core, \"HAS_RICH\", False)\n    result = runner.invoke(app, [\"root\"])\n    assert result.exit_code == 1\n    assert \"The root user is reserved\" in result.output\n    assert \"Aborted!\" in result.output",
        "signature": {
          "args": [
            "monkeypatch"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_root",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_root_no_standalone",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_root_no_rich",
        "caller_class": null,
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_root_no_rich",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_testing/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_testing/test_app01.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "docs_src.testing.app01",
        "type": "external"
      },
      {
        "module": "docs_src.testing.app01.test_main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app01",
        "content": "def test_app01():\n    test_app()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app01",
        "caller_class": null,
        "called_function": "test_app",
        "called_function_files": [
          "docs_src/testing/app01/test_main.py",
          "docs_src/testing/app02/test_main.py",
          "docs_src/testing/app02_an/test_main.py",
          "docs_src/testing/app03/test_main.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial002.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial003.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_testing/test_app02.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "docs_src.testing.app02",
        "type": "external"
      },
      {
        "module": "docs_src.testing.app02.test_main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app02",
        "content": "def test_app02():\n    test_app()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app02",
        "caller_class": null,
        "called_function": "test_app",
        "called_function_files": [
          "docs_src/testing/app01/test_main.py",
          "docs_src/testing/app02/test_main.py",
          "docs_src/testing/app02_an/test_main.py",
          "docs_src/testing/app03/test_main.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial002.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial003.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_testing/test_app02_an.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "docs_src.testing.app02_an",
        "type": "external"
      },
      {
        "module": "docs_src.testing.app02_an.test_main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app02_an",
        "content": "def test_app02_an():\n    test_app()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app02_an",
        "caller_class": null,
        "called_function": "test_app",
        "called_function_files": [
          "docs_src/testing/app01/test_main.py",
          "docs_src/testing/app02/test_main.py",
          "docs_src/testing/app02_an/test_main.py",
          "docs_src/testing/app03/test_main.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial002.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial003.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_testing/test_app03.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "docs_src.testing.app03",
        "type": "external"
      },
      {
        "module": "docs_src.testing.app03.test_main",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_app03",
        "content": "def test_app03():\n    test_app()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_app03",
        "caller_class": null,
        "called_function": "test_app",
        "called_function_files": [
          "docs_src/testing/app01/test_main.py",
          "docs_src/testing/app02/test_main.py",
          "docs_src/testing/app02_an/test_main.py",
          "docs_src/testing/app03/test_main.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial002.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial003.py",
          "tests/test_tutorial/test_commands/test_callback/test_tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_using_click/__init__.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_using_click/test_tutorial003.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "click.testing",
        "type": "external"
      },
      {
        "module": "docs_src.using_click",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(mod.typer_click_object, [])\n    assert \"Missing command\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_help",
        "content": "def test_help():\n    result = runner.invoke(mod.typer_click_object, [\"--help\"])\n    assert result.exit_code == 0\n    assert \"Commands\" in result.output\n    assert \"top\" in result.output\n    assert \"hello\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_typer",
        "content": "def test_typer():\n    result = runner.invoke(mod.typer_click_object, [\"top\"])\n    assert \"The Typer app is at the top level\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_click",
        "content": "def test_click():\n    result = runner.invoke(mod.typer_click_object, [\"hello\", \"--name\", \"Camila\"])\n    assert \"Hello Camila!\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_help",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_typer",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_click",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_tutorial/test_using_click/test_tutorial004.py",
    "type": "python",
    "imports": [
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "click.testing",
        "type": "external"
      },
      {
        "module": "docs_src.using_click",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "test_cli",
        "content": "def test_cli():\n    result = runner.invoke(mod.cli, [])\n    assert \"Usage\" in result.output\n    assert \"dropdb\" in result.output\n    assert \"sub\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_typer",
        "content": "def test_typer():\n    result = runner.invoke(mod.cli, [\"sub\"])\n    assert \"Typer is now below Click, the Click app is the top level\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_click_initdb",
        "content": "def test_click_initdb():\n    result = runner.invoke(mod.cli, [\"initdb\"])\n    assert \"Initialized the database\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_click_dropdb",
        "content": "def test_click_dropdb():\n    result = runner.invoke(mod.cli, [\"dropdb\"])\n    assert \"Dropped the database\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "test_script",
        "content": "def test_script():\n    result = subprocess.run(\n        [sys.executable, \"-m\", \"coverage\", \"run\", mod.__file__, \"--help\"],\n        capture_output=True,\n        encoding=\"utf-8\",\n    )\n    assert \"Usage\" in result.stdout",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "test_cli",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_typer",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_click_initdb",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_click_dropdb",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_script",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/test_type_conversion.py",
    "type": "python",
    "imports": [
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      },
      {
        "module": "utils",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "SomeEnum",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "Enum"
        ]
      },
      {
        "name": "BaseNumberParamType",
        "methods": [
          {
            "name": "convert",
            "content": "        def convert(\n            self,\n            value: Any,\n            param: Optional[click.Parameter],\n            ctx: Optional[click.Context],\n        ) -> Any:\n            return int(value, 0)",
            "signature": {
              "args": [
                "self",
                "value",
                "param",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.ParamType"
        ]
      }
    ],
    "functions": [
      {
        "name": "test_optional",
        "content": "def test_optional():\n    app = typer.Typer()\n\n    @app.command()\n    def opt(user: Optional[str] = None):\n        if user:\n            print(f\"User: {user}\")\n        else:\n            print(\"No user\")\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"No user\" in result.output\n\n    result = runner.invoke(app, [\"--user\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"User: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "opt",
        "content": "    def opt(user: Optional[str] = None):\n        if user:\n            print(f\"User: {user}\")\n        else:\n            print(\"No user\")",
        "signature": {
          "args": [
            "user"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_union_type_optional",
        "content": "def test_union_type_optional():\n    app = typer.Typer()\n\n    @app.command()\n    def opt(user: str | None = None):\n        if user:\n            print(f\"User: {user}\")\n        else:\n            print(\"No user\")\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"No user\" in result.output\n\n    result = runner.invoke(app, [\"--user\", \"Camila\"])\n    assert result.exit_code == 0\n    assert \"User: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "needs_py310"
        ]
      },
      {
        "name": "opt",
        "content": "    def opt(user: str | None = None):\n        if user:\n            print(f\"User: {user}\")\n        else:\n            print(\"No user\")",
        "signature": {
          "args": [
            "user"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_optional_tuple",
        "content": "def test_optional_tuple():\n    app = typer.Typer()\n\n    @app.command()\n    def opt(number: Optional[Tuple[int, int]] = None):\n        if number:\n            print(f\"Number: {number}\")\n        else:\n            print(\"No number\")\n\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"No number\" in result.output\n\n    result = runner.invoke(app, [\"--number\", \"4\", \"2\"])\n    assert result.exit_code == 0\n    assert \"Number: (4, 2)\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "opt",
        "content": "    def opt(number: Optional[Tuple[int, int]] = None):\n        if number:\n            print(f\"Number: {number}\")\n        else:\n            print(\"No number\")",
        "signature": {
          "args": [
            "number"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_no_type",
        "content": "def test_no_type():\n    app = typer.Typer()\n\n    @app.command()\n    def no_type(user):\n        print(f\"User: {user}\")\n\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"User: Camila\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "no_type",
        "content": "    def no_type(user):\n        print(f\"User: {user}\")",
        "signature": {
          "args": [
            "user"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_list_parameters_convert_to_lists",
        "content": "def test_list_parameters_convert_to_lists(type_annotation):\n    # Lists containing objects that are converted by Click (i.e. not Path or Enum)\n    # should not be inadvertently converted to tuples\n    expected_element_type = type_annotation.__args__[0]\n    app = typer.Typer()\n\n    @app.command()\n    def list_conversion(container: type_annotation):\n        assert isinstance(container, list)\n        for element in container:\n            assert isinstance(element, expected_element_type)\n\n    result = runner.invoke(app, [\"one\", \"two\", \"three\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [
            "type_annotation"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('type_annotation', [List[Path], List[SomeEnum], List[str]])"
        ]
      },
      {
        "name": "list_conversion",
        "content": "    def list_conversion(container: type_annotation):\n        assert isinstance(container, list)\n        for element in container:\n            assert isinstance(element, expected_element_type)",
        "signature": {
          "args": [
            "container"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_tuple_parameter_elements_are_converted_recursively",
        "content": "def test_tuple_parameter_elements_are_converted_recursively(type_annotation):\n    # Tuple elements that aren't converted by Click (i.e. Path or Enum)\n    # should be recursively converted by Typer\n    expected_element_types = type_annotation.__args__\n    app = typer.Typer()\n\n    @app.command()\n    def tuple_recursive_conversion(container: type_annotation):\n        assert isinstance(container, tuple)\n        for element, expected_type in zip(container, expected_element_types):\n            assert isinstance(element, expected_type)\n\n    result = runner.invoke(app, [\"one\", \"two\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [
            "type_annotation"
          ],
          "defaults": []
        },
        "decorators": [
          "pytest.mark.parametrize('type_annotation', [Tuple[str, str], Tuple[str, Path], Tuple[Path, Path], Tuple[str, SomeEnum], Tuple[SomeEnum, SomeEnum]])"
        ]
      },
      {
        "name": "tuple_recursive_conversion",
        "content": "    def tuple_recursive_conversion(container: type_annotation):\n        assert isinstance(container, tuple)\n        for element, expected_type in zip(container, expected_element_types):\n            assert isinstance(element, expected_type)",
        "signature": {
          "args": [
            "container"
          ],
          "defaults": []
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_custom_parse",
        "content": "def test_custom_parse():\n    app = typer.Typer()\n\n    @app.command()\n    def custom_parser(\n        hex_value: int = typer.Argument(None, parser=lambda x: int(x, 0)),\n    ):\n        assert hex_value == 0x56\n\n    result = runner.invoke(app, [\"0x56\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "custom_parser",
        "content": "    def custom_parser(\n        hex_value: int = typer.Argument(None, parser=lambda x: int(x, 0)),\n    ):\n        assert hex_value == 0x56",
        "signature": {
          "args": [
            "hex_value"
          ],
          "defaults": [
            "typer.Argument(None, parser=lambda x: int(x, 0))"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_custom_click_type",
        "content": "def test_custom_click_type():\n    class BaseNumberParamType(click.ParamType):\n        name = \"base_integer\"\n\n        def convert(\n            self,\n            value: Any,\n            param: Optional[click.Parameter],\n            ctx: Optional[click.Context],\n        ) -> Any:\n            return int(value, 0)\n\n    app = typer.Typer()\n\n    @app.command()\n    def custom_click_type(\n        hex_value: int = typer.Argument(None, click_type=BaseNumberParamType()),\n    ):\n        assert hex_value == 0x56\n\n    result = runner.invoke(app, [\"0x56\"])\n    assert result.exit_code == 0",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "custom_click_type",
        "content": "    def custom_click_type(\n        hex_value: int = typer.Argument(None, click_type=BaseNumberParamType()),\n    ):\n        assert hex_value == 0x56",
        "signature": {
          "args": [
            "hex_value"
          ],
          "defaults": [
            "typer.Argument(None, click_type=BaseNumberParamType())"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      }
    ],
    "calls": [
      {
        "caller_function": "test_optional",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_union_type_optional",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_optional_tuple",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "opt",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_no_type",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "no_type",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "no_type",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_list_parameters_convert_to_lists",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "list_conversion",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "list_conversion",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "list_conversion",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_tuple_parameter_elements_are_converted_recursively",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "tuple_recursive_conversion",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "tuple_recursive_conversion",
        "caller_class": null,
        "called_function": "zip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "tuple_recursive_conversion",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "tuple_recursive_conversion",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_custom_parse",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_parser",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_parser",
        "caller_class": null,
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_parser",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "convert",
        "caller_class": "BaseNumberParamType",
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_click_type",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_click_type",
        "caller_class": null,
        "called_function": "BaseNumberParamType",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "custom_click_type",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "convert",
        "content": "        def convert(\n            self,\n            value: Any,\n            param: Optional[click.Parameter],\n            ctx: Optional[click.Context],\n        ) -> Any:\n            return int(value, 0)",
        "signature": {
          "args": [
            "self",
            "value",
            "param",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "tests/test_types.py",
    "type": "python",
    "imports": [
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.testing",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "User",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "str",
          "Enum"
        ]
      }
    ],
    "functions": [
      {
        "name": "hello",
        "content": "def hello(name: User = User.rick) -> None:\n    print(f\"Hello {name.value}!\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": [
            "User.rick"
          ]
        },
        "decorators": [
          "app.command()"
        ]
      },
      {
        "name": "test_enum_choice",
        "content": "def test_enum_choice() -> None:\n    # This test is only for coverage of the new custom TyperChoice class\n    result = runner.invoke(app, [\"--name\", \"morty\"], catch_exceptions=False)\n    assert result.exit_code == 0\n    assert \"Hello Morty!\" in result.output\n\n    result = runner.invoke(app, [\"--name\", \"Rick\"])\n    assert result.exit_code == 0\n    assert \"Hello Rick!\" in result.output\n\n    result = runner.invoke(app, [\"--name\", \"RICK\"])\n    assert result.exit_code == 0\n    assert \"Hello Rick!\" in result.output",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "hello",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_enum_choice",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_enum_choice",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "test_enum_choice",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "tests/utils.py",
    "type": "python",
    "imports": [
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "pytest",
        "type": "external"
      },
      {
        "module": "shellingham",
        "type": "external"
      },
      {
        "module": "shellingham",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "typer-cli/README.md",
    "type": "markdown",
    "content": "<p align=\"center\">\n  <a href=\"https://typer.tiangolo.com\"><img src=\"https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg\" alt=\"Typer\"></a>\n</p>\n<p align=\"center\">\n    <em>Typer, build great CLIs. Easy to code. Based on Python type hints.</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/fastapi/typer/actions?query=workflow%3ATest\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/typer/workflows/Test/badge.svg\" alt=\"Test\">\n</a>\n<a href=\"https://github.com/fastapi/typer/actions?query=workflow%3APublish\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/typer/workflows/Publish/badge.svg\" alt=\"Publish\">\n</a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/typer\" target=\"_blank\">\n    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/fastapi/typer.svg\" alt=\"Coverage\">\n<a href=\"https://pypi.org/project/typer\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/typer?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n</p>\n\n---\n\n**Documentation**: <a href=\"https://typer.tiangolo.com\" target=\"_blank\">https://typer.tiangolo.com/tutorial/typer-command/</a>\n\n**Source Code**: <a href=\"https://github.com/fastapi/typer\" target=\"_blank\">https://github.com/fastapi/typer</a>\n\n---\n\nTyper is a library for building <abbr title=\"command line interface, programs executed from a terminal\">CLI</abbr> applications that users will **love using** and developers will **love creating**. Based on Python type hints.\n\n## Typer CLI\n\n\u26a0\ufe0f Do not install this package. \u26a0\ufe0f\n\nThis package, `typer-cli`, does nothing other than depend on `typer`.\n\nAll the functionality has been integrated into `typer`.\n\nThe only reason this package exists is as a migration path for old projects that used to depend on `typer-cli`, so that they can get the latest version of `typer`.\n\nYou probably **should not** install this package.\n\nInstall instead:\n\n```bash\npip install typer\n```\n\nThat includes the `typer` command.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n"
  },
  {
    "file": "typer/__init__.py",
    "type": "python",
    "imports": [
      {
        "module": "shutil",
        "type": "external"
      },
      {
        "module": "click.exceptions",
        "type": "external"
      },
      {
        "module": "click.exceptions",
        "type": "external"
      },
      {
        "module": "click.exceptions",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.termui",
        "type": "external"
      },
      {
        "module": "click.utils",
        "type": "external"
      },
      {
        "module": "click.utils",
        "type": "external"
      },
      {
        "module": "click.utils",
        "type": "external"
      },
      {
        "module": "click.utils",
        "type": "external"
      },
      {
        "module": "click.utils",
        "type": "external"
      },
      {
        "module": "click.utils",
        "type": "external"
      },
      {
        "module": "main",
        "type": "external"
      },
      {
        "module": "main",
        "type": "external"
      },
      {
        "module": "main",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "params",
        "type": "external"
      },
      {
        "module": "params",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "typer/__main__.py",
    "type": "python",
    "imports": [
      {
        "module": "cli",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "typer/_completion_classes.py",
    "type": "python",
    "imports": [
      {
        "module": "importlib.util",
        "type": "external"
      },
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "re",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "click.parser",
        "type": "external"
      },
      {
        "module": "click.shell_completion",
        "type": "external"
      },
      {
        "module": "_completion_shared",
        "type": "external"
      },
      {
        "module": "click.shell_completion",
        "type": "external"
      },
      {
        "module": "shellingham",
        "type": "external"
      },
      {
        "module": "click.parser",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "BashComplete",
        "methods": [
          {
            "name": "source_vars",
            "content": "    def source_vars(self) -> Dict[str, Any]:\n        return {\n            \"complete_func\": self.func_name,\n            \"autocomplete_var\": self.complete_var,\n            \"prog_name\": self.prog_name,\n        }",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "get_completion_args",
            "content": "    def get_completion_args(self) -> Tuple[List[str], str]:\n        cwords = click_split_arg_string(os.environ[\"COMP_WORDS\"])\n        cword = int(os.environ[\"COMP_CWORD\"])\n        args = cwords[1:cword]\n\n        try:\n            incomplete = cwords[cword]\n        except IndexError:\n            incomplete = \"\"\n\n        return args, incomplete",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "format_completion",
            "content": "    def format_completion(self, item: click.shell_completion.CompletionItem) -> str:\n        # TODO: Explore replicating the new behavior from Click, with item types and\n        # triggering completion for files and directories\n        # return f\"{item.type},{item.value}\"\n        return f\"{item.value}\"",
            "signature": {
              "args": [
                "self",
                "item"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "complete",
            "content": "    def complete(self) -> str:\n        args, incomplete = self.get_completion_args()\n        completions = self.get_completions(args, incomplete)\n        out = [self.format_completion(item) for item in completions]\n        return \"\\n\".join(out)",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.shell_completion.BashComplete"
        ]
      },
      {
        "name": "ZshComplete",
        "methods": [
          {
            "name": "source_vars",
            "content": "    def source_vars(self) -> Dict[str, Any]:\n        return {\n            \"complete_func\": self.func_name,\n            \"autocomplete_var\": self.complete_var,\n            \"prog_name\": self.prog_name,\n        }",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "get_completion_args",
            "content": "    def get_completion_args(self) -> Tuple[List[str], str]:\n        completion_args = os.getenv(\"_TYPER_COMPLETE_ARGS\", \"\")\n        cwords = click_split_arg_string(completion_args)\n        args = cwords[1:]\n        if args and not completion_args.endswith(\" \"):\n            incomplete = args[-1]\n            args = args[:-1]\n        else:\n            incomplete = \"\"\n        return args, incomplete",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "format_completion",
            "content": "    def format_completion(self, item: click.shell_completion.CompletionItem) -> str:\n        def escape(s: str) -> str:\n            return (\n                s.replace('\"', '\"\"')\n                .replace(\"'\", \"''\")\n                .replace(\"$\", \"\\\\$\")\n                .replace(\"`\", \"\\\\`\")\n                .replace(\":\", r\"\\\\:\")\n            )\n\n        # TODO: Explore replicating the new behavior from Click, pay attention to\n        # the difference with and without escape\n        # return f\"{item.type}\\n{item.value}\\n{item.help if item.help else '_'}\"\n        if item.help:\n            return f'\"{escape(item.value)}\":\"{_sanitize_help_text(escape(item.help))}\"'\n        else:\n            return f'\"{escape(item.value)}\"'",
            "signature": {
              "args": [
                "self",
                "item"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "complete",
            "content": "    def complete(self) -> str:\n        args, incomplete = self.get_completion_args()\n        completions = self.get_completions(args, incomplete)\n        res = [self.format_completion(item) for item in completions]\n        if res:\n            args_str = \"\\n\".join(res)\n            return f\"_arguments '*: :(({args_str}))'\"\n        else:\n            return \"_files\"",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.shell_completion.ZshComplete"
        ]
      },
      {
        "name": "FishComplete",
        "methods": [
          {
            "name": "source_vars",
            "content": "    def source_vars(self) -> Dict[str, Any]:\n        return {\n            \"complete_func\": self.func_name,\n            \"autocomplete_var\": self.complete_var,\n            \"prog_name\": self.prog_name,\n        }",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "get_completion_args",
            "content": "    def get_completion_args(self) -> Tuple[List[str], str]:\n        completion_args = os.getenv(\"_TYPER_COMPLETE_ARGS\", \"\")\n        cwords = click_split_arg_string(completion_args)\n        args = cwords[1:]\n        if args and not completion_args.endswith(\" \"):\n            incomplete = args[-1]\n            args = args[:-1]\n        else:\n            incomplete = \"\"\n        return args, incomplete",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "format_completion",
            "content": "    def format_completion(self, item: click.shell_completion.CompletionItem) -> str:\n        # TODO: Explore replicating the new behavior from Click, pay attention to\n        # the difference with and without formatted help\n        # if item.help:\n        #     return f\"{item.type},{item.value}\\t{item.help}\"\n\n        # return f\"{item.type},{item.value}\n        if item.help:\n            formatted_help = re.sub(r\"\\s\", \" \", item.help)\n            return f\"{item.value}\\t{_sanitize_help_text(formatted_help)}\"\n        else:\n            return f\"{item.value}\"",
            "signature": {
              "args": [
                "self",
                "item"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "complete",
            "content": "    def complete(self) -> str:\n        complete_action = os.getenv(\"_TYPER_COMPLETE_FISH_ACTION\", \"\")\n        args, incomplete = self.get_completion_args()\n        completions = self.get_completions(args, incomplete)\n        show_args = [self.format_completion(item) for item in completions]\n        if complete_action == \"get-args\":\n            if show_args:\n                return \"\\n\".join(show_args)\n        elif complete_action == \"is-args\":\n            if show_args:\n                # Activate complete args (no files)\n                sys.exit(0)\n            else:\n                # Deactivate complete args (allow files)\n                sys.exit(1)\n        return \"\"  # pragma: no cover",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.shell_completion.FishComplete"
        ]
      },
      {
        "name": "PowerShellComplete",
        "methods": [
          {
            "name": "source_vars",
            "content": "    def source_vars(self) -> Dict[str, Any]:\n        return {\n            \"complete_func\": self.func_name,\n            \"autocomplete_var\": self.complete_var,\n            \"prog_name\": self.prog_name,\n        }",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "get_completion_args",
            "content": "    def get_completion_args(self) -> Tuple[List[str], str]:\n        completion_args = os.getenv(\"_TYPER_COMPLETE_ARGS\", \"\")\n        incomplete = os.getenv(\"_TYPER_COMPLETE_WORD_TO_COMPLETE\", \"\")\n        cwords = click_split_arg_string(completion_args)\n        args = cwords[1:-1] if incomplete else cwords[1:]\n        return args, incomplete",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "format_completion",
            "content": "    def format_completion(self, item: click.shell_completion.CompletionItem) -> str:\n        return f\"{item.value}:::{_sanitize_help_text(item.help) if item.help else ' '}\"",
            "signature": {
              "args": [
                "self",
                "item"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.shell_completion.ShellComplete"
        ]
      }
    ],
    "functions": [
      {
        "name": "_sanitize_help_text",
        "content": "def _sanitize_help_text(text: str) -> str:\n    \"\"\"Sanitizes the help text by removing rich tags\"\"\"\n    if not importlib.util.find_spec(\"rich\"):\n        return text\n    from . import rich_utils\n\n    return rich_utils.rich_render_text(text)",
        "signature": {
          "args": [
            "text"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "completion_init",
        "content": "def completion_init() -> None:\n    click.shell_completion.add_completion_class(BashComplete, Shells.bash.value)\n    click.shell_completion.add_completion_class(ZshComplete, Shells.zsh.value)\n    click.shell_completion.add_completion_class(FishComplete, Shells.fish.value)\n    click.shell_completion.add_completion_class(\n        PowerShellComplete, Shells.powershell.value\n    )\n    click.shell_completion.add_completion_class(PowerShellComplete, Shells.pwsh.value)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "_sanitize_help_text",
        "caller_class": null,
        "called_function": "find_spec",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_sanitize_help_text",
        "caller_class": null,
        "called_function": "rich_render_text",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "BashComplete",
        "called_function": "click_split_arg_string",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "BashComplete",
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "BashComplete",
        "called_function": "get_completion_args",
        "called_function_files": [],
        "called_method_files": [
          "typer/_completion_classes.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "complete",
        "caller_class": "BashComplete",
        "called_function": "get_completions",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "BashComplete",
        "called_function": "format_completion",
        "called_function_files": [],
        "called_method_files": [
          "typer/_completion_classes.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "complete",
        "caller_class": "BashComplete",
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "ZshComplete",
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "ZshComplete",
        "called_function": "click_split_arg_string",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "ZshComplete",
        "called_function": "endswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "escape",
        "caller_class": "ZshComplete",
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "escape",
        "caller_class": "ZshComplete",
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "escape",
        "caller_class": "ZshComplete",
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "escape",
        "caller_class": "ZshComplete",
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "escape",
        "caller_class": "ZshComplete",
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "ZshComplete",
        "called_function": "get_completion_args",
        "called_function_files": [],
        "called_method_files": [
          "typer/_completion_classes.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "complete",
        "caller_class": "ZshComplete",
        "called_function": "get_completions",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "ZshComplete",
        "called_function": "format_completion",
        "called_function_files": [],
        "called_method_files": [
          "typer/_completion_classes.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "complete",
        "caller_class": "ZshComplete",
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "FishComplete",
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "FishComplete",
        "called_function": "click_split_arg_string",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "FishComplete",
        "called_function": "endswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "format_completion",
        "caller_class": "FishComplete",
        "called_function": "sub",
        "called_function_files": [
          "docs_src/using_click/tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "format_completion",
        "caller_class": "FishComplete",
        "called_function": "_sanitize_help_text",
        "called_function_files": [
          "typer/_completion_classes.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "FishComplete",
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "FishComplete",
        "called_function": "get_completion_args",
        "called_function_files": [],
        "called_method_files": [
          "typer/_completion_classes.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "complete",
        "caller_class": "FishComplete",
        "called_function": "get_completions",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "FishComplete",
        "called_function": "format_completion",
        "called_function_files": [],
        "called_method_files": [
          "typer/_completion_classes.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "complete",
        "caller_class": "FishComplete",
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "FishComplete",
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "complete",
        "caller_class": "FishComplete",
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "PowerShellComplete",
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "PowerShellComplete",
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_args",
        "caller_class": "PowerShellComplete",
        "called_function": "click_split_arg_string",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "format_completion",
        "caller_class": "PowerShellComplete",
        "called_function": "_sanitize_help_text",
        "called_function_files": [
          "typer/_completion_classes.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "completion_init",
        "caller_class": null,
        "called_function": "add_completion_class",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "completion_init",
        "caller_class": null,
        "called_function": "add_completion_class",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "completion_init",
        "caller_class": null,
        "called_function": "add_completion_class",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "completion_init",
        "caller_class": null,
        "called_function": "add_completion_class",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "completion_init",
        "caller_class": null,
        "called_function": "add_completion_class",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "source_vars",
        "content": "    def source_vars(self) -> Dict[str, Any]:\n        return {\n            \"complete_func\": self.func_name,\n            \"autocomplete_var\": self.complete_var,\n            \"prog_name\": self.prog_name,\n        }",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_completion_args",
        "content": "    def get_completion_args(self) -> Tuple[List[str], str]:\n        cwords = click_split_arg_string(os.environ[\"COMP_WORDS\"])\n        cword = int(os.environ[\"COMP_CWORD\"])\n        args = cwords[1:cword]\n\n        try:\n            incomplete = cwords[cword]\n        except IndexError:\n            incomplete = \"\"\n\n        return args, incomplete",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "format_completion",
        "content": "    def format_completion(self, item: click.shell_completion.CompletionItem) -> str:\n        # TODO: Explore replicating the new behavior from Click, with item types and\n        # triggering completion for files and directories\n        # return f\"{item.type},{item.value}\"\n        return f\"{item.value}\"",
        "signature": {
          "args": [
            "self",
            "item"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "complete",
        "content": "    def complete(self) -> str:\n        args, incomplete = self.get_completion_args()\n        completions = self.get_completions(args, incomplete)\n        out = [self.format_completion(item) for item in completions]\n        return \"\\n\".join(out)",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "source_vars",
        "content": "    def source_vars(self) -> Dict[str, Any]:\n        return {\n            \"complete_func\": self.func_name,\n            \"autocomplete_var\": self.complete_var,\n            \"prog_name\": self.prog_name,\n        }",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_completion_args",
        "content": "    def get_completion_args(self) -> Tuple[List[str], str]:\n        completion_args = os.getenv(\"_TYPER_COMPLETE_ARGS\", \"\")\n        cwords = click_split_arg_string(completion_args)\n        args = cwords[1:]\n        if args and not completion_args.endswith(\" \"):\n            incomplete = args[-1]\n            args = args[:-1]\n        else:\n            incomplete = \"\"\n        return args, incomplete",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "format_completion",
        "content": "    def format_completion(self, item: click.shell_completion.CompletionItem) -> str:\n        def escape(s: str) -> str:\n            return (\n                s.replace('\"', '\"\"')\n                .replace(\"'\", \"''\")\n                .replace(\"$\", \"\\\\$\")\n                .replace(\"`\", \"\\\\`\")\n                .replace(\":\", r\"\\\\:\")\n            )\n\n        # TODO: Explore replicating the new behavior from Click, pay attention to\n        # the difference with and without escape\n        # return f\"{item.type}\\n{item.value}\\n{item.help if item.help else '_'}\"\n        if item.help:\n            return f'\"{escape(item.value)}\":\"{_sanitize_help_text(escape(item.help))}\"'\n        else:\n            return f'\"{escape(item.value)}\"'",
        "signature": {
          "args": [
            "self",
            "item"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "complete",
        "content": "    def complete(self) -> str:\n        args, incomplete = self.get_completion_args()\n        completions = self.get_completions(args, incomplete)\n        res = [self.format_completion(item) for item in completions]\n        if res:\n            args_str = \"\\n\".join(res)\n            return f\"_arguments '*: :(({args_str}))'\"\n        else:\n            return \"_files\"",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "source_vars",
        "content": "    def source_vars(self) -> Dict[str, Any]:\n        return {\n            \"complete_func\": self.func_name,\n            \"autocomplete_var\": self.complete_var,\n            \"prog_name\": self.prog_name,\n        }",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_completion_args",
        "content": "    def get_completion_args(self) -> Tuple[List[str], str]:\n        completion_args = os.getenv(\"_TYPER_COMPLETE_ARGS\", \"\")\n        cwords = click_split_arg_string(completion_args)\n        args = cwords[1:]\n        if args and not completion_args.endswith(\" \"):\n            incomplete = args[-1]\n            args = args[:-1]\n        else:\n            incomplete = \"\"\n        return args, incomplete",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "format_completion",
        "content": "    def format_completion(self, item: click.shell_completion.CompletionItem) -> str:\n        # TODO: Explore replicating the new behavior from Click, pay attention to\n        # the difference with and without formatted help\n        # if item.help:\n        #     return f\"{item.type},{item.value}\\t{item.help}\"\n\n        # return f\"{item.type},{item.value}\n        if item.help:\n            formatted_help = re.sub(r\"\\s\", \" \", item.help)\n            return f\"{item.value}\\t{_sanitize_help_text(formatted_help)}\"\n        else:\n            return f\"{item.value}\"",
        "signature": {
          "args": [
            "self",
            "item"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "complete",
        "content": "    def complete(self) -> str:\n        complete_action = os.getenv(\"_TYPER_COMPLETE_FISH_ACTION\", \"\")\n        args, incomplete = self.get_completion_args()\n        completions = self.get_completions(args, incomplete)\n        show_args = [self.format_completion(item) for item in completions]\n        if complete_action == \"get-args\":\n            if show_args:\n                return \"\\n\".join(show_args)\n        elif complete_action == \"is-args\":\n            if show_args:\n                # Activate complete args (no files)\n                sys.exit(0)\n            else:\n                # Deactivate complete args (allow files)\n                sys.exit(1)\n        return \"\"  # pragma: no cover",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "source_vars",
        "content": "    def source_vars(self) -> Dict[str, Any]:\n        return {\n            \"complete_func\": self.func_name,\n            \"autocomplete_var\": self.complete_var,\n            \"prog_name\": self.prog_name,\n        }",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_completion_args",
        "content": "    def get_completion_args(self) -> Tuple[List[str], str]:\n        completion_args = os.getenv(\"_TYPER_COMPLETE_ARGS\", \"\")\n        incomplete = os.getenv(\"_TYPER_COMPLETE_WORD_TO_COMPLETE\", \"\")\n        cwords = click_split_arg_string(completion_args)\n        args = cwords[1:-1] if incomplete else cwords[1:]\n        return args, incomplete",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "format_completion",
        "content": "    def format_completion(self, item: click.shell_completion.CompletionItem) -> str:\n        return f\"{item.value}:::{_sanitize_help_text(item.help) if item.help else ' '}\"",
        "signature": {
          "args": [
            "self",
            "item"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "typer/_completion_shared.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "re",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "shellingham",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "Shells",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "str",
          "Enum"
        ]
      }
    ],
    "functions": [
      {
        "name": "get_completion_script",
        "content": "def get_completion_script(*, prog_name: str, complete_var: str, shell: str) -> str:\n    cf_name = _invalid_ident_char_re.sub(\"\", prog_name.replace(\"-\", \"_\"))\n    script = _completion_scripts.get(shell)\n    if script is None:\n        click.echo(f\"Shell {shell} not supported.\", err=True)\n        raise click.exceptions.Exit(1)\n    return (\n        script\n        % {\n            \"complete_func\": f\"_{cf_name}_completion\",\n            \"prog_name\": prog_name,\n            \"autocomplete_var\": complete_var,\n        }\n    ).strip()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "install_bash",
        "content": "def install_bash(*, prog_name: str, complete_var: str, shell: str) -> Path:\n    # Ref: https://github.com/scop/bash-completion#faq\n    # It seems bash-completion is the official completion system for bash:\n    # Ref: https://www.gnu.org/software/bash/manual/html_node/A-Programmable-Completion-Example.html\n    # But installing in the locations from the docs doesn't seem to have effect\n    completion_path = Path.home() / \".bash_completions\" / f\"{prog_name}.sh\"\n    rc_path = Path.home() / \".bashrc\"\n    rc_path.parent.mkdir(parents=True, exist_ok=True)\n    rc_content = \"\"\n    if rc_path.is_file():\n        rc_content = rc_path.read_text()\n    completion_init_lines = [f\"source '{completion_path}'\"]\n    for line in completion_init_lines:\n        if line not in rc_content:  # pragma: no cover\n            rc_content += f\"\\n{line}\"\n    rc_content += \"\\n\"\n    rc_path.write_text(rc_content)\n    # Install completion\n    completion_path.parent.mkdir(parents=True, exist_ok=True)\n    script_content = get_completion_script(\n        prog_name=prog_name, complete_var=complete_var, shell=shell\n    )\n    completion_path.write_text(script_content)\n    return completion_path",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "install_zsh",
        "content": "def install_zsh(*, prog_name: str, complete_var: str, shell: str) -> Path:\n    # Setup Zsh and load ~/.zfunc\n    zshrc_path = Path.home() / \".zshrc\"\n    zshrc_path.parent.mkdir(parents=True, exist_ok=True)\n    zshrc_content = \"\"\n    if zshrc_path.is_file():\n        zshrc_content = zshrc_path.read_text()\n    completion_line = \"fpath+=~/.zfunc; autoload -Uz compinit; compinit\"\n    if completion_line not in zshrc_content:\n        zshrc_content += f\"\\n{completion_line}\\n\"\n    style_line = \"zstyle ':completion:*' menu select\"\n    # TODO: consider setting the style only for the current program\n    # style_line = f\"zstyle ':completion:*:*:{prog_name}:*' menu select\"\n    # Install zstyle completion config only if the user doesn't have a customization\n    if \"zstyle\" not in zshrc_content:\n        zshrc_content += f\"\\n{style_line}\\n\"\n    zshrc_content = f\"{zshrc_content.strip()}\\n\"\n    zshrc_path.write_text(zshrc_content)\n    # Install completion under ~/.zfunc/\n    path_obj = Path.home() / f\".zfunc/_{prog_name}\"\n    path_obj.parent.mkdir(parents=True, exist_ok=True)\n    script_content = get_completion_script(\n        prog_name=prog_name, complete_var=complete_var, shell=shell\n    )\n    path_obj.write_text(script_content)\n    return path_obj",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "install_fish",
        "content": "def install_fish(*, prog_name: str, complete_var: str, shell: str) -> Path:\n    path_obj = Path.home() / f\".config/fish/completions/{prog_name}.fish\"\n    parent_dir: Path = path_obj.parent\n    parent_dir.mkdir(parents=True, exist_ok=True)\n    script_content = get_completion_script(\n        prog_name=prog_name, complete_var=complete_var, shell=shell\n    )\n    path_obj.write_text(f\"{script_content}\\n\")\n    return path_obj",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "install_powershell",
        "content": "def install_powershell(*, prog_name: str, complete_var: str, shell: str) -> Path:\n    subprocess.run(\n        [\n            shell,\n            \"-Command\",\n            \"Set-ExecutionPolicy\",\n            \"Unrestricted\",\n            \"-Scope\",\n            \"CurrentUser\",\n        ]\n    )\n    result = subprocess.run(\n        [shell, \"-NoProfile\", \"-Command\", \"echo\", \"$profile\"],\n        check=True,\n        stdout=subprocess.PIPE,\n    )\n    if result.returncode != 0:  # pragma: no cover\n        click.echo(\"Couldn't get PowerShell user profile\", err=True)\n        raise click.exceptions.Exit(result.returncode)\n    path_str = \"\"\n    if isinstance(result.stdout, str):  # pragma: no cover\n        path_str = result.stdout\n    if isinstance(result.stdout, bytes):\n        for encoding in [\"windows-1252\", \"utf8\", \"cp850\"]:\n            try:\n                path_str = result.stdout.decode(encoding)\n                break\n            except UnicodeDecodeError:  # pragma: no cover\n                pass\n        if not path_str:  # pragma: no cover\n            click.echo(\"Couldn't decode the path automatically\", err=True)\n            raise click.exceptions.Exit(1)\n    path_obj = Path(path_str.strip())\n    parent_dir: Path = path_obj.parent\n    parent_dir.mkdir(parents=True, exist_ok=True)\n    script_content = get_completion_script(\n        prog_name=prog_name, complete_var=complete_var, shell=shell\n    )\n    with path_obj.open(mode=\"a\") as f:\n        f.write(f\"{script_content}\\n\")\n    return path_obj",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "install",
        "content": "def install(\n    shell: Optional[str] = None,\n    prog_name: Optional[str] = None,\n    complete_var: Optional[str] = None,\n) -> Tuple[str, Path]:\n    prog_name = prog_name or click.get_current_context().find_root().info_name\n    assert prog_name\n    if complete_var is None:\n        complete_var = \"_{}_COMPLETE\".format(prog_name.replace(\"-\", \"_\").upper())\n    test_disable_detection = os.getenv(\"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\")\n    if shell is None and shellingham is not None and not test_disable_detection:\n        shell, _ = shellingham.detect_shell()\n    if shell == \"bash\":\n        installed_path = install_bash(\n            prog_name=prog_name, complete_var=complete_var, shell=shell\n        )\n        return shell, installed_path\n    elif shell == \"zsh\":\n        installed_path = install_zsh(\n            prog_name=prog_name, complete_var=complete_var, shell=shell\n        )\n        return shell, installed_path\n    elif shell == \"fish\":\n        installed_path = install_fish(\n            prog_name=prog_name, complete_var=complete_var, shell=shell\n        )\n        return shell, installed_path\n    elif shell in {\"powershell\", \"pwsh\"}:\n        installed_path = install_powershell(\n            prog_name=prog_name, complete_var=complete_var, shell=shell\n        )\n        return shell, installed_path\n    else:\n        click.echo(f\"Shell {shell} is not supported.\")\n        raise click.exceptions.Exit(1)",
        "signature": {
          "args": [
            "shell",
            "prog_name",
            "complete_var"
          ],
          "defaults": [
            "None",
            "None",
            "None"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "get_completion_script",
        "caller_class": null,
        "called_function": "sub",
        "called_function_files": [
          "docs_src/using_click/tutorial004.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_script",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_script",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_script",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_script",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_script",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "mkdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "mkdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "get_completion_script",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "install_bash",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "mkdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "read_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "mkdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "get_completion_script",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "install_zsh",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_fish",
        "caller_class": null,
        "called_function": "home",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_fish",
        "caller_class": null,
        "called_function": "mkdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_fish",
        "caller_class": null,
        "called_function": "get_completion_script",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "install_fish",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "run",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "decode",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "mkdir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "get_completion_script",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "open",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_powershell",
        "caller_class": null,
        "called_function": "write",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "find_root",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "get_current_context",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "upper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "detect_shell",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "install_bash",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "install_zsh",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "install_fish",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "install_powershell",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "typer/_types.py",
    "type": "python",
    "imports": [
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "TyperChoice",
        "methods": [
          {
            "name": "normalize_choice",
            "content": "    def normalize_choice(\n        self, choice: ParamTypeValue, ctx: Union[click.Context, None]\n    ) -> str:\n        # Click 8.2.0 added a new method `normalize_choice` to the `Choice` class\n        # to support enums, but it uses the enum names, while Typer has always used the\n        # enum values.\n        # This class overrides that method to maintain the previous behavior.\n        # In Click:\n        # normed_value = choice.name if isinstance(choice, Enum) else str(choice)\n        normed_value = str(choice.value) if isinstance(choice, Enum) else str(choice)\n\n        if ctx is not None and ctx.token_normalize_func is not None:\n            normed_value = ctx.token_normalize_func(normed_value)\n\n        if not self.case_sensitive:\n            normed_value = normed_value.casefold()\n\n        return normed_value",
            "signature": {
              "args": [
                "self",
                "choice",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.Choice",
          "Generic[ParamTypeValue]"
        ]
      }
    ],
    "functions": [],
    "calls": [
      {
        "caller_function": "normalize_choice",
        "caller_class": "TyperChoice",
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "normalize_choice",
        "caller_class": "TyperChoice",
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "normalize_choice",
        "caller_class": "TyperChoice",
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "normalize_choice",
        "caller_class": "TyperChoice",
        "called_function": "token_normalize_func",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "normalize_choice",
        "caller_class": "TyperChoice",
        "called_function": "casefold",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "normalize_choice",
        "content": "    def normalize_choice(\n        self, choice: ParamTypeValue, ctx: Union[click.Context, None]\n    ) -> str:\n        # Click 8.2.0 added a new method `normalize_choice` to the `Choice` class\n        # to support enums, but it uses the enum names, while Typer has always used the\n        # enum values.\n        # This class overrides that method to maintain the previous behavior.\n        # In Click:\n        # normed_value = choice.name if isinstance(choice, Enum) else str(choice)\n        normed_value = str(choice.value) if isinstance(choice, Enum) else str(choice)\n\n        if ctx is not None and ctx.token_normalize_func is not None:\n            normed_value = ctx.token_normalize_func(normed_value)\n\n        if not self.case_sensitive:\n            normed_value = normed_value.casefold()\n\n        return normed_value",
        "signature": {
          "args": [
            "self",
            "choice",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "typer/_typing.py",
    "type": "python",
    "imports": [
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      },
      {
        "module": "types",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "is_union",
        "content": "    def is_union(tp: Optional[Type[Any]]) -> bool:\n        return tp is Union",
        "signature": {
          "args": [
            "tp"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "is_union",
        "content": "    def is_union(tp: Optional[Type[Any]]) -> bool:\n        return tp is Union or tp is types.UnionType  # noqa: E721",
        "signature": {
          "args": [
            "tp"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "is_none_type",
        "content": "    def is_none_type(type_: Any) -> bool:\n        Literal[None]  # fix edge case\n        for none_type in NONE_TYPES:\n            if type_ is none_type:\n                return True\n        return False",
        "signature": {
          "args": [
            "type_"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "is_none_type",
        "content": "    def is_none_type(type_: Any) -> bool:\n        for none_type in NONE_TYPES:\n            if type_ is none_type:\n                return True\n        return False",
        "signature": {
          "args": [
            "type_"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "is_callable_type",
        "content": "def is_callable_type(type_: Type[Any]) -> bool:\n    return type_ is Callable or get_origin(type_) is Callable",
        "signature": {
          "args": [
            "type_"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "is_literal_type",
        "content": "def is_literal_type(type_: Type[Any]) -> bool:\n    import typing_extensions\n\n    return get_origin(type_) in (Literal, typing_extensions.Literal)",
        "signature": {
          "args": [
            "type_"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "literal_values",
        "content": "def literal_values(type_: Type[Any]) -> Tuple[Any, ...]:\n    return get_args(type_)",
        "signature": {
          "args": [
            "type_"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "all_literal_values",
        "content": "def all_literal_values(type_: Type[Any]) -> Tuple[Any, ...]:\n    \"\"\"\n    This method is used to retrieve all Literal values as\n    Literal can be used recursively (see https://www.python.org/dev/peps/pep-0586)\n    e.g. `Literal[Literal[Literal[1, 2, 3], \"foo\"], 5, None]`\n    \"\"\"\n    if not is_literal_type(type_):\n        return (type_,)\n\n    values = literal_values(type_)\n    return tuple(x for value in values for x in all_literal_values(value))",
        "signature": {
          "args": [
            "type_"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "is_callable_type",
        "caller_class": null,
        "called_function": "get_origin",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "is_literal_type",
        "caller_class": null,
        "called_function": "get_origin",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "literal_values",
        "caller_class": null,
        "called_function": "get_args",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "all_literal_values",
        "caller_class": null,
        "called_function": "is_literal_type",
        "called_function_files": [
          "typer/_typing.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "all_literal_values",
        "caller_class": null,
        "called_function": "literal_values",
        "called_function_files": [
          "typer/_typing.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "all_literal_values",
        "caller_class": null,
        "called_function": "tuple",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "all_literal_values",
        "caller_class": null,
        "called_function": "all_literal_values",
        "called_function_files": [
          "typer/_typing.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "typer/cli.py",
    "type": "python",
    "imports": [
      {
        "module": "importlib.util",
        "type": "external"
      },
      {
        "module": "re",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "typer",
        "type": "external"
      },
      {
        "module": "typer.core",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "core",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "State",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self) -> None:\n        self.app: Optional[str] = None\n        self.func: Optional[str] = None\n        self.file: Optional[Path] = None\n        self.module: Optional[str] = None",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "TyperCLIGroup",
        "methods": [
          {
            "name": "list_commands",
            "content": "    def list_commands(self, ctx: click.Context) -> List[str]:\n        self.maybe_add_run(ctx)\n        return super().list_commands(ctx)",
            "signature": {
              "args": [
                "self",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "get_command",
            "content": "    def get_command(self, ctx: click.Context, name: str) -> Optional[Command]:\n        self.maybe_add_run(ctx)\n        return super().get_command(ctx, name)",
            "signature": {
              "args": [
                "self",
                "ctx",
                "name"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "invoke",
            "content": "    def invoke(self, ctx: click.Context) -> Any:\n        self.maybe_add_run(ctx)\n        return super().invoke(ctx)",
            "signature": {
              "args": [
                "self",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "maybe_add_run",
            "content": "    def maybe_add_run(self, ctx: click.Context) -> None:\n        maybe_update_state(ctx)\n        maybe_add_run_to_cli(self)",
            "signature": {
              "args": [
                "self",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "typer.core.TyperGroup"
        ]
      }
    ],
    "functions": [
      {
        "name": "maybe_update_state",
        "content": "def maybe_update_state(ctx: click.Context) -> None:\n    path_or_module = ctx.params.get(\"path_or_module\")\n    if path_or_module:\n        file_path = Path(path_or_module)\n        if file_path.exists() and file_path.is_file():\n            state.file = file_path\n        else:\n            if not re.fullmatch(r\"[a-zA-Z_]\\w*(\\.[a-zA-Z_]\\w*)*\", path_or_module):\n                typer.echo(\n                    f\"Not a valid file or Python module: {path_or_module}\", err=True\n                )\n                sys.exit(1)\n            state.module = path_or_module\n    app_name = ctx.params.get(\"app\")\n    if app_name:\n        state.app = app_name\n    func_name = ctx.params.get(\"func\")\n    if func_name:\n        state.func = func_name",
        "signature": {
          "args": [
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_typer_from_module",
        "content": "def get_typer_from_module(module: Any) -> Optional[typer.Typer]:\n    # Try to get defined app\n    if state.app:\n        obj = getattr(module, state.app, None)\n        if not isinstance(obj, typer.Typer):\n            typer.echo(f\"Not a Typer object: --app {state.app}\", err=True)\n            sys.exit(1)\n        return obj\n    # Try to get defined function\n    if state.func:\n        func_obj = getattr(module, state.func, None)\n        if not callable(func_obj):\n            typer.echo(f\"Not a function: --func {state.func}\", err=True)\n            sys.exit(1)\n        sub_app = typer.Typer()\n        sub_app.command()(func_obj)\n        return sub_app\n    # Iterate and get a default object to use as CLI\n    local_names = dir(module)\n    local_names_set = set(local_names)\n    # Try to get a default Typer app\n    for name in default_app_names:\n        if name in local_names_set:\n            obj = getattr(module, name, None)\n            if isinstance(obj, typer.Typer):\n                return obj\n    # Try to get any Typer app\n    for name in local_names_set - set(default_app_names):\n        obj = getattr(module, name)\n        if isinstance(obj, typer.Typer):\n            return obj\n    # Try to get a default function\n    for func_name in default_func_names:\n        func_obj = getattr(module, func_name, None)\n        if callable(func_obj):\n            sub_app = typer.Typer()\n            sub_app.command()(func_obj)\n            return sub_app\n    # Try to get any func app\n    for func_name in local_names_set - set(default_func_names):\n        func_obj = getattr(module, func_name)\n        if callable(func_obj):\n            sub_app = typer.Typer()\n            sub_app.command()(func_obj)\n            return sub_app\n    return None",
        "signature": {
          "args": [
            "module"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_typer_from_state",
        "content": "def get_typer_from_state() -> Optional[typer.Typer]:\n    spec = None\n    if state.file:\n        module_name = state.file.name\n        spec = importlib.util.spec_from_file_location(module_name, str(state.file))\n    elif state.module:\n        spec = importlib.util.find_spec(state.module)\n    if spec is None:\n        if state.file:\n            typer.echo(f\"Could not import as Python file: {state.file}\", err=True)\n        else:\n            typer.echo(f\"Could not import as Python module: {state.module}\", err=True)\n        sys.exit(1)\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)  # type: ignore\n    obj = get_typer_from_module(module)\n    return obj",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "maybe_add_run_to_cli",
        "content": "def maybe_add_run_to_cli(cli: click.Group) -> None:\n    if \"run\" not in cli.commands:\n        if state.file or state.module:\n            obj = get_typer_from_state()\n            if obj:\n                obj._add_completion = False\n                click_obj = typer.main.get_command(obj)\n                click_obj.name = \"run\"\n                if not click_obj.help:\n                    click_obj.help = \"Run the provided Typer app.\"\n                cli.add_command(click_obj)",
        "signature": {
          "args": [
            "cli"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "print_version",
        "content": "def print_version(ctx: click.Context, param: Option, value: bool) -> None:\n    if not value or ctx.resilient_parsing:\n        return\n    typer.echo(f\"Typer version: {__version__}\")\n    raise typer.Exit()",
        "signature": {
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "callback",
        "content": "def callback(\n    ctx: typer.Context,\n    *,\n    path_or_module: str = typer.Argument(None),\n    app: str = typer.Option(None, help=\"The typer app object/variable to use.\"),\n    func: str = typer.Option(None, help=\"The function to convert to Typer.\"),\n    version: bool = typer.Option(\n        False,\n        \"--version\",\n        help=\"Print version and exit.\",\n        callback=print_version,\n    ),\n) -> None:\n    \"\"\"\n    Run Typer scripts with completion, without having to create a package.\n\n    You probably want to install completion for the typer command:\n\n    $ typer --install-completion\n\n    https://typer.tiangolo.com/\n    \"\"\"\n    maybe_update_state(ctx)",
        "signature": {
          "args": [
            "ctx"
          ],
          "defaults": []
        },
        "decorators": [
          "app.callback(cls=TyperCLIGroup, no_args_is_help=True)"
        ]
      },
      {
        "name": "get_docs_for_click",
        "content": "def get_docs_for_click(\n    *,\n    obj: Command,\n    ctx: typer.Context,\n    indent: int = 0,\n    name: str = \"\",\n    call_prefix: str = \"\",\n    title: Optional[str] = None,\n) -> str:\n    docs = \"#\" * (1 + indent)\n    command_name = name or obj.name\n    if call_prefix:\n        command_name = f\"{call_prefix} {command_name}\"\n    if not title:\n        title = f\"`{command_name}`\" if command_name else \"CLI\"\n    docs += f\" {title}\\n\\n\"\n    if obj.help:\n        docs += f\"{_parse_html(obj.help)}\\n\\n\"\n    usage_pieces = obj.collect_usage_pieces(ctx)\n    if usage_pieces:\n        docs += \"**Usage**:\\n\\n\"\n        docs += \"```console\\n\"\n        docs += \"$ \"\n        if command_name:\n            docs += f\"{command_name} \"\n        docs += f\"{' '.join(usage_pieces)}\\n\"\n        docs += \"```\\n\\n\"\n    args = []\n    opts = []\n    for param in obj.get_params(ctx):\n        rv = param.get_help_record(ctx)\n        if rv is not None:\n            if param.param_type_name == \"argument\":\n                args.append(rv)\n            elif param.param_type_name == \"option\":\n                opts.append(rv)\n    if args:\n        docs += \"**Arguments**:\\n\\n\"\n        for arg_name, arg_help in args:\n            docs += f\"* `{arg_name}`\"\n            if arg_help:\n                docs += f\": {_parse_html(arg_help)}\"\n            docs += \"\\n\"\n        docs += \"\\n\"\n    if opts:\n        docs += \"**Options**:\\n\\n\"\n        for opt_name, opt_help in opts:\n            docs += f\"* `{opt_name}`\"\n            if opt_help:\n                docs += f\": {_parse_html(opt_help)}\"\n            docs += \"\\n\"\n        docs += \"\\n\"\n    if obj.epilog:\n        docs += f\"{obj.epilog}\\n\\n\"\n    if isinstance(obj, Group):\n        group = obj\n        commands = group.list_commands(ctx)\n        if commands:\n            docs += \"**Commands**:\\n\\n\"\n            for command in commands:\n                command_obj = group.get_command(ctx, command)\n                assert command_obj\n                docs += f\"* `{command_obj.name}`\"\n                command_help = command_obj.get_short_help_str()\n                if command_help:\n                    docs += f\": {_parse_html(command_help)}\"\n                docs += \"\\n\"\n            docs += \"\\n\"\n        for command in commands:\n            command_obj = group.get_command(ctx, command)\n            assert command_obj\n            use_prefix = \"\"\n            if command_name:\n                use_prefix += f\"{command_name}\"\n            docs += get_docs_for_click(\n                obj=command_obj, ctx=ctx, indent=indent + 1, call_prefix=use_prefix\n            )\n    return docs",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_parse_html",
        "content": "def _parse_html(input_text: str) -> str:\n    if not HAS_RICH:  # pragma: no cover\n        return input_text\n    from . import rich_utils\n\n    return rich_utils.rich_to_html(input_text)",
        "signature": {
          "args": [
            "input_text"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "docs",
        "content": "def docs(\n    ctx: typer.Context,\n    name: str = typer.Option(\"\", help=\"The name of the CLI program to use in docs.\"),\n    output: Optional[Path] = typer.Option(\n        None,\n        help=\"An output file to write docs to, like README.md.\",\n        file_okay=True,\n        dir_okay=False,\n    ),\n    title: Optional[str] = typer.Option(\n        None,\n        help=\"The title for the documentation page. If not provided, the name of \"\n        \"the program is used.\",\n    ),\n) -> None:\n    \"\"\"\n    Generate Markdown docs for a Typer app.\n    \"\"\"\n    typer_obj = get_typer_from_state()\n    if not typer_obj:\n        typer.echo(\"No Typer app found\", err=True)\n        raise typer.Abort()\n    click_obj = typer.main.get_command(typer_obj)\n    docs = get_docs_for_click(obj=click_obj, ctx=ctx, name=name, title=title)\n    clean_docs = f\"{docs.strip()}\\n\"\n    if output:\n        output.write_text(clean_docs)\n        typer.echo(f\"Docs saved to: {output}\")\n    else:\n        typer.echo(clean_docs)",
        "signature": {
          "args": [
            "ctx",
            "name",
            "output",
            "title"
          ],
          "defaults": [
            "typer.Option('', help='The name of the CLI program to use in docs.')",
            "typer.Option(None, help='An output file to write docs to, like README.md.', file_okay=True, dir_okay=False)",
            "typer.Option(None, help='The title for the documentation page. If not provided, the name of the program is used.')"
          ]
        },
        "decorators": [
          "utils_app.command()"
        ]
      },
      {
        "name": "main",
        "content": "def main() -> Any:\n    return app()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "exists",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "is_file",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "fullmatch",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_update_state",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "list_commands",
        "caller_class": "TyperCLIGroup",
        "called_function": "maybe_add_run",
        "called_function_files": [],
        "called_method_files": [
          "typer/cli.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "list_commands",
        "caller_class": "TyperCLIGroup",
        "called_function": "list_commands",
        "called_function_files": [],
        "called_method_files": [
          "typer/cli.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "list_commands",
        "caller_class": "TyperCLIGroup",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": "TyperCLIGroup",
        "called_function": "maybe_add_run",
        "called_function_files": [],
        "called_method_files": [
          "typer/cli.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "get_command",
        "caller_class": "TyperCLIGroup",
        "called_function": "get_command",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [
          "typer/cli.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "get_command",
        "caller_class": "TyperCLIGroup",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "invoke",
        "caller_class": "TyperCLIGroup",
        "called_function": "maybe_add_run",
        "called_function_files": [],
        "called_method_files": [
          "typer/cli.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "invoke",
        "caller_class": "TyperCLIGroup",
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [
          "typer/cli.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "invoke",
        "caller_class": "TyperCLIGroup",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_add_run",
        "caller_class": "TyperCLIGroup",
        "called_function": "maybe_update_state",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_add_run",
        "caller_class": "TyperCLIGroup",
        "called_function": "maybe_add_run_to_cli",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "callable",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "dir",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "set",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "set",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "callable",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "set",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "callable",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_module",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "spec_from_file_location",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "find_spec",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "module_from_spec",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "exec_module",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_typer_from_state",
        "caller_class": null,
        "called_function": "get_typer_from_module",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_add_run_to_cli",
        "caller_class": null,
        "called_function": "get_typer_from_state",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_add_run_to_cli",
        "caller_class": null,
        "called_function": "get_command",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "maybe_add_run_to_cli",
        "caller_class": null,
        "called_function": "add_command",
        "called_function_files": [
          "tests/test_deprecation.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "print_version",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "print_version",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "Argument",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "maybe_update_state",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "_parse_html",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "collect_usage_pieces",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "get_params",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "get_help_record",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "_parse_html",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "_parse_html",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "list_commands",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "get_command",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "get_short_help_str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "_parse_html",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "get_command",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_docs_for_click",
        "caller_class": null,
        "called_function": "get_docs_for_click",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_parse_html",
        "caller_class": null,
        "called_function": "rich_to_html",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "get_typer_from_state",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "get_command",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "get_docs_for_click",
        "called_function_files": [
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "write_text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "docs",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": null,
        "called_function": "app",
        "called_function_files": [
          "tests/test_tutorial/test_subcommands/test_tutorial001.py",
          "tests/test_tutorial/test_subcommands/test_tutorial003.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(self) -> None:\n        self.app: Optional[str] = None\n        self.func: Optional[str] = None\n        self.file: Optional[Path] = None\n        self.module: Optional[str] = None",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "list_commands",
        "content": "    def list_commands(self, ctx: click.Context) -> List[str]:\n        self.maybe_add_run(ctx)\n        return super().list_commands(ctx)",
        "signature": {
          "args": [
            "self",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_command",
        "content": "    def get_command(self, ctx: click.Context, name: str) -> Optional[Command]:\n        self.maybe_add_run(ctx)\n        return super().get_command(ctx, name)",
        "signature": {
          "args": [
            "self",
            "ctx",
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "invoke",
        "content": "    def invoke(self, ctx: click.Context) -> Any:\n        self.maybe_add_run(ctx)\n        return super().invoke(ctx)",
        "signature": {
          "args": [
            "self",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "maybe_add_run",
        "content": "    def maybe_add_run(self, ctx: click.Context) -> None:\n        maybe_update_state(ctx)\n        maybe_add_run_to_cli(self)",
        "signature": {
          "args": [
            "self",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "typer/colors.py",
    "type": "python",
    "imports": [],
    "classes": [],
    "functions": [],
    "calls": [],
    "methods": []
  },
  {
    "file": "typer/completion.py",
    "type": "python",
    "imports": [
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "_completion_classes",
        "type": "external"
      },
      {
        "module": "_completion_shared",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "params",
        "type": "external"
      },
      {
        "module": "utils",
        "type": "external"
      },
      {
        "module": "shellingham",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "click.shell_completion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "get_completion_inspect_parameters",
        "content": "def get_completion_inspect_parameters() -> Tuple[ParamMeta, ParamMeta]:\n    completion_init()\n    test_disable_detection = os.getenv(\"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\")\n    if shellingham and not test_disable_detection:\n        parameters = get_params_from_function(_install_completion_placeholder_function)\n    else:\n        parameters = get_params_from_function(\n            _install_completion_no_auto_placeholder_function\n        )\n    install_param, show_param = parameters.values()\n    return install_param, show_param",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "install_callback",
        "content": "def install_callback(ctx: click.Context, param: click.Parameter, value: Any) -> Any:\n    if not value or ctx.resilient_parsing:\n        return value  # pragma: no cover\n    if isinstance(value, str):\n        shell, path = install(shell=value)\n    else:\n        shell, path = install()\n    click.secho(f\"{shell} completion installed in {path}\", fg=\"green\")\n    click.echo(\"Completion will take effect once you restart the terminal\")\n    sys.exit(0)",
        "signature": {
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "show_callback",
        "content": "def show_callback(ctx: click.Context, param: click.Parameter, value: Any) -> Any:\n    if not value or ctx.resilient_parsing:\n        return value  # pragma: no cover\n    prog_name = ctx.find_root().info_name\n    assert prog_name\n    complete_var = \"_{}_COMPLETE\".format(prog_name.replace(\"-\", \"_\").upper())\n    shell = \"\"\n    test_disable_detection = os.getenv(\"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\")\n    if isinstance(value, str):\n        shell = value\n    elif shellingham and not test_disable_detection:\n        shell, _ = shellingham.detect_shell()\n    script_content = get_completion_script(\n        prog_name=prog_name, complete_var=complete_var, shell=shell\n    )\n    click.echo(script_content)\n    sys.exit(0)",
        "signature": {
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_install_completion_placeholder_function",
        "content": "def _install_completion_placeholder_function(\n    install_completion: bool = Option(\n        None,\n        \"--install-completion\",\n        callback=install_callback,\n        expose_value=False,\n        help=\"Install completion for the current shell.\",\n    ),\n    show_completion: bool = Option(\n        None,\n        \"--show-completion\",\n        callback=show_callback,\n        expose_value=False,\n        help=\"Show completion for the current shell, to copy it or customize the installation.\",\n    ),\n) -> Any:\n    pass  # pragma: no cover",
        "signature": {
          "args": [
            "install_completion",
            "show_completion"
          ],
          "defaults": [
            "Option(None, '--install-completion', callback=install_callback, expose_value=False, help='Install completion for the current shell.')",
            "Option(None, '--show-completion', callback=show_callback, expose_value=False, help='Show completion for the current shell, to copy it or customize the installation.')"
          ]
        },
        "decorators": []
      },
      {
        "name": "_install_completion_no_auto_placeholder_function",
        "content": "def _install_completion_no_auto_placeholder_function(\n    install_completion: Shells = Option(\n        None,\n        callback=install_callback,\n        expose_value=False,\n        help=\"Install completion for the specified shell.\",\n    ),\n    show_completion: Shells = Option(\n        None,\n        callback=show_callback,\n        expose_value=False,\n        help=\"Show completion for the specified shell, to copy it or customize the installation.\",\n    ),\n) -> Any:\n    pass  # pragma: no cover",
        "signature": {
          "args": [
            "install_completion",
            "show_completion"
          ],
          "defaults": [
            "Option(None, callback=install_callback, expose_value=False, help='Install completion for the specified shell.')",
            "Option(None, callback=show_callback, expose_value=False, help='Show completion for the specified shell, to copy it or customize the installation.')"
          ]
        },
        "decorators": []
      },
      {
        "name": "shell_complete",
        "content": "def shell_complete(\n    cli: click.Command,\n    ctx_args: MutableMapping[str, Any],\n    prog_name: str,\n    complete_var: str,\n    instruction: str,\n) -> int:\n    import click\n    import click.shell_completion\n\n    if \"_\" not in instruction:\n        click.echo(\"Invalid completion instruction.\", err=True)\n        return 1\n\n    # Click 8 changed the order/style of shell instructions from e.g.\n    # source_bash to bash_source\n    # Typer override to preserve the old style for compatibility\n    # Original in Click 8.x commented:\n    # shell, _, instruction = instruction.partition(\"_\")\n    instruction, _, shell = instruction.partition(\"_\")\n    # Typer override end\n\n    comp_cls = click.shell_completion.get_completion_class(shell)\n\n    if comp_cls is None:\n        click.echo(f\"Shell {shell} not supported.\", err=True)\n        return 1\n\n    comp = comp_cls(cli, ctx_args, prog_name, complete_var)\n\n    if instruction == \"source\":\n        click.echo(comp.source())\n        return 0\n\n    # Typer override to print the completion help msg with Rich\n    if instruction == \"complete\":\n        click.echo(comp.complete())\n        return 0\n    # Typer override end\n\n    click.echo(f'Completion instruction \"{instruction}\" not supported.', err=True)\n    return 1",
        "signature": {
          "args": [
            "cli",
            "ctx_args",
            "prog_name",
            "complete_var",
            "instruction"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "get_completion_inspect_parameters",
        "caller_class": null,
        "called_function": "completion_init",
        "called_function_files": [
          "typer/_completion_classes.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_inspect_parameters",
        "caller_class": null,
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_inspect_parameters",
        "caller_class": null,
        "called_function": "get_params_from_function",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_inspect_parameters",
        "caller_class": null,
        "called_function": "get_params_from_function",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_completion_inspect_parameters",
        "caller_class": null,
        "called_function": "values",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_callback",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_callback",
        "caller_class": null,
        "called_function": "install",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_callback",
        "caller_class": null,
        "called_function": "install",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_callback",
        "caller_class": null,
        "called_function": "secho",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_callback",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "install_callback",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "find_root",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "upper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "detect_shell",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "get_completion_script",
        "called_function_files": [
          "typer/_completion_shared.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "show_callback",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_install_completion_placeholder_function",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_install_completion_placeholder_function",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_install_completion_no_auto_placeholder_function",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_install_completion_no_auto_placeholder_function",
        "caller_class": null,
        "called_function": "Option",
        "called_function_files": [
          "typer/params.py",
          "typer/params.py",
          "typer/params.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "partition",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "get_completion_class",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "comp_cls",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "source",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "complete",
        "called_function_files": [
          "tests/assets/completion_no_types.py",
          "tests/assets/completion_no_types_order.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "shell_complete",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "typer/core.py",
    "type": "python",
    "imports": [
      {
        "module": "errno",
        "type": "external_builtin"
      },
      {
        "module": "importlib.util",
        "type": "external"
      },
      {
        "module": "inspect",
        "type": "external"
      },
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "gettext",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "click.core",
        "type": "external"
      },
      {
        "module": "click.formatting",
        "type": "external"
      },
      {
        "module": "click.parser",
        "type": "external"
      },
      {
        "module": "click.shell_completion",
        "type": "external"
      },
      {
        "module": "click.types",
        "type": "external"
      },
      {
        "module": "click.utils",
        "type": "external"
      },
      {
        "module": "_typing",
        "type": "external"
      },
      {
        "module": "completion",
        "type": "external"
      },
      {
        "module": "warnings",
        "type": "external"
      },
      {
        "module": "click.shell_completion",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "TyperArgument",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        # Parameter\n        param_decls: List[str],\n        type: Optional[Any] = None,\n        required: Optional[bool] = None,\n        default: Optional[Any] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        nargs: Optional[int] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        # TyperArgument\n        show_default: Union[bool, str] = True,\n        show_choices: bool = True,\n        show_envvar: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        self.help = help\n        self.show_default = show_default\n        self.show_choices = show_choices\n        self.show_envvar = show_envvar\n        self.hidden = hidden\n        self.rich_help_panel = rich_help_panel\n\n        super().__init__(\n            param_decls=param_decls,\n            type=type,\n            required=required,\n            default=default,\n            callback=callback,\n            nargs=nargs,\n            metavar=metavar,\n            expose_value=expose_value,\n            is_eager=is_eager,\n            envvar=envvar,\n            shell_complete=shell_complete,\n        )\n        _typer_param_setup_autocompletion_compat(self, autocompletion=autocompletion)",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "_get_default_string",
            "content": "    def _get_default_string(\n        self,\n        *,\n        ctx: click.Context,\n        show_default_is_str: bool,\n        default_value: Union[List[Any], Tuple[Any, ...], str, Callable[..., Any], Any],\n    ) -> str:\n        return _get_default_string(\n            self,\n            ctx=ctx,\n            show_default_is_str=show_default_is_str,\n            default_value=default_value,\n        )",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "_extract_default_help_str",
            "content": "    def _extract_default_help_str(\n        self, *, ctx: click.Context\n    ) -> Optional[Union[Any, Callable[[], Any]]]:\n        return _extract_default_help_str(self, ctx=ctx)",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "get_help_record",
            "content": "    def get_help_record(self, ctx: click.Context) -> Optional[Tuple[str, str]]:\n        # Modified version of click.core.Option.get_help_record()\n        # to support Arguments\n        if self.hidden:\n            return None\n        name = self.make_metavar(ctx=ctx)\n        help = self.help or \"\"\n        extra = []\n        if self.show_envvar:\n            envvar = self.envvar\n            # allow_from_autoenv is currently not supported in Typer for CLI Arguments\n            if envvar is not None:\n                var_str = (\n                    \", \".join(str(d) for d in envvar)\n                    if isinstance(envvar, (list, tuple))\n                    else envvar\n                )\n                extra.append(f\"env var: {var_str}\")\n\n        # Typer override:\n        # Extracted to _extract_default_help_str() to allow re-using it in rich_utils\n        default_value = self._extract_default_help_str(ctx=ctx)\n        # Typer override end\n\n        show_default_is_str = isinstance(self.show_default, str)\n\n        if show_default_is_str or (\n            default_value is not None and (self.show_default or ctx.show_default)\n        ):\n            # Typer override:\n            # Extracted to _get_default_string() to allow re-using it in rich_utils\n            default_string = self._get_default_string(\n                ctx=ctx,\n                show_default_is_str=show_default_is_str,\n                default_value=default_value,\n            )\n            # Typer override end\n            if default_string:\n                extra.append(_(\"default: {default}\").format(default=default_string))\n        if self.required:\n            extra.append(_(\"required\"))\n        if extra:\n            extra_str = \"; \".join(extra)\n            extra_str = f\"[{extra_str}]\"\n            if HAS_RICH:\n                # This is needed for when we want to export to HTML\n                from . import rich_utils\n\n                extra_str = rich_utils.escape_before_html_export(extra_str)\n\n            help = f\"{help}  {extra_str}\" if help else f\"{extra_str}\"\n        return name, help",
            "signature": {
              "args": [
                "self",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "make_metavar",
            "content": "    def make_metavar(self, ctx: Union[click.Context, None] = None) -> str:\n        # Modified version of click.core.Argument.make_metavar()\n        # to include Argument name\n        if self.metavar is not None:\n            return self.metavar\n        var = (self.name or \"\").upper()\n        if not self.required:\n            var = f\"[{var}]\"\n        # TODO: When deprecating Click < 8.2, remove this\n        signature = inspect.signature(self.type.get_metavar)\n        if \"ctx\" in signature.parameters:\n            # Click >= 8.2\n            type_var = self.type.get_metavar(self, ctx=ctx)  # type: ignore[arg-type]\n        else:\n            # Click < 8.2\n            type_var = self.type.get_metavar(self)  # type: ignore[call-arg]\n        # TODO: /When deprecating Click < 8.2, remove this, uncomment the line below\n        # type_var = self.type.get_metavar(self, ctx=ctx)\n        if type_var:\n            var += f\":{type_var}\"\n        if self.nargs != 1:\n            var += \"...\"\n        return var",
            "signature": {
              "args": [
                "self",
                "ctx"
              ],
              "defaults": [
                "None"
              ]
            },
            "decorators": []
          },
          {
            "name": "value_is_missing",
            "content": "    def value_is_missing(self, value: Any) -> bool:\n        return _value_is_missing(self, value)",
            "signature": {
              "args": [
                "self",
                "value"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.core.Argument"
        ]
      },
      {
        "name": "TyperOption",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        # Parameter\n        param_decls: List[str],\n        type: Optional[Union[click.types.ParamType, Any]] = None,\n        required: Optional[bool] = None,\n        default: Optional[Any] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        nargs: Optional[int] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        # Option\n        show_default: Union[bool, str] = False,\n        prompt: Union[bool, str] = False,\n        confirmation_prompt: Union[bool, str] = False,\n        prompt_required: bool = True,\n        hide_input: bool = False,\n        is_flag: Optional[bool] = None,\n        multiple: bool = False,\n        count: bool = False,\n        allow_from_autoenv: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        show_choices: bool = True,\n        show_envvar: bool = False,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        super().__init__(\n            param_decls=param_decls,\n            type=type,\n            required=required,\n            default=default,\n            callback=callback,\n            nargs=nargs,\n            metavar=metavar,\n            expose_value=expose_value,\n            is_eager=is_eager,\n            envvar=envvar,\n            show_default=show_default,\n            prompt=prompt,\n            confirmation_prompt=confirmation_prompt,\n            hide_input=hide_input,\n            is_flag=is_flag,\n            multiple=multiple,\n            count=count,\n            allow_from_autoenv=allow_from_autoenv,\n            help=help,\n            hidden=hidden,\n            show_choices=show_choices,\n            show_envvar=show_envvar,\n            prompt_required=prompt_required,\n            shell_complete=shell_complete,\n        )\n        _typer_param_setup_autocompletion_compat(self, autocompletion=autocompletion)\n        self.rich_help_panel = rich_help_panel",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "_get_default_string",
            "content": "    def _get_default_string(\n        self,\n        *,\n        ctx: click.Context,\n        show_default_is_str: bool,\n        default_value: Union[List[Any], Tuple[Any, ...], str, Callable[..., Any], Any],\n    ) -> str:\n        return _get_default_string(\n            self,\n            ctx=ctx,\n            show_default_is_str=show_default_is_str,\n            default_value=default_value,\n        )",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "_extract_default_help_str",
            "content": "    def _extract_default_help_str(\n        self, *, ctx: click.Context\n    ) -> Optional[Union[Any, Callable[[], Any]]]:\n        return _extract_default_help_str(self, ctx=ctx)",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "make_metavar",
            "content": "    def make_metavar(self, ctx: Union[click.Context, None] = None) -> str:\n        signature = inspect.signature(super().make_metavar)\n        if \"ctx\" in signature.parameters:\n            # Click >= 8.2\n            return super().make_metavar(ctx=ctx)  # type: ignore[arg-type]\n        # Click < 8.2\n        return super().make_metavar()  # type: ignore[call-arg]",
            "signature": {
              "args": [
                "self",
                "ctx"
              ],
              "defaults": [
                "None"
              ]
            },
            "decorators": []
          },
          {
            "name": "get_help_record",
            "content": "    def get_help_record(self, ctx: click.Context) -> Optional[Tuple[str, str]]:\n        # Duplicate all of Click's logic only to modify a single line, to allow boolean\n        # flags with only names for False values as it's currently supported by Typer\n        # Ref: https://typer.tiangolo.com/tutorial/parameter-types/bool/#only-names-for-false\n        if self.hidden:\n            return None\n\n        any_prefix_is_slash = False\n\n        def _write_opts(opts: Sequence[str]) -> str:\n            nonlocal any_prefix_is_slash\n\n            rv, any_slashes = click.formatting.join_options(opts)\n\n            if any_slashes:\n                any_prefix_is_slash = True\n\n            if not self.is_flag and not self.count:\n                rv += f\" {self.make_metavar(ctx=ctx)}\"\n\n            return rv\n\n        rv = [_write_opts(self.opts)]\n\n        if self.secondary_opts:\n            rv.append(_write_opts(self.secondary_opts))\n\n        help = self.help or \"\"\n        extra = []\n\n        if self.show_envvar:\n            envvar = self.envvar\n\n            if envvar is None:\n                if (\n                    self.allow_from_autoenv\n                    and ctx.auto_envvar_prefix is not None\n                    and self.name is not None\n                ):\n                    envvar = f\"{ctx.auto_envvar_prefix}_{self.name.upper()}\"\n\n            if envvar is not None:\n                var_str = (\n                    envvar\n                    if isinstance(envvar, str)\n                    else \", \".join(str(d) for d in envvar)\n                )\n                extra.append(_(\"env var: {var}\").format(var=var_str))\n\n        # Typer override:\n        # Extracted to _extract_default() to allow re-using it in rich_utils\n        default_value = self._extract_default_help_str(ctx=ctx)\n        # Typer override end\n\n        show_default_is_str = isinstance(self.show_default, str)\n\n        if show_default_is_str or (\n            default_value is not None and (self.show_default or ctx.show_default)\n        ):\n            # Typer override:\n            # Extracted to _get_default_string() to allow re-using it in rich_utils\n            default_string = self._get_default_string(\n                ctx=ctx,\n                show_default_is_str=show_default_is_str,\n                default_value=default_value,\n            )\n            # Typer override end\n            if default_string:\n                extra.append(_(\"default: {default}\").format(default=default_string))\n\n        if isinstance(self.type, click.types._NumberRangeBase):\n            range_str = self.type._describe_range()\n\n            if range_str:\n                extra.append(range_str)\n\n        if self.required:\n            extra.append(_(\"required\"))\n\n        if extra:\n            extra_str = \"; \".join(extra)\n            extra_str = f\"[{extra_str}]\"\n            if HAS_RICH:\n                # This is needed for when we want to export to HTML\n                from . import rich_utils\n\n                extra_str = rich_utils.escape_before_html_export(extra_str)\n\n            help = f\"{help}  {extra_str}\" if help else f\"{extra_str}\"\n\n        return (\"; \" if any_prefix_is_slash else \" / \").join(rv), help",
            "signature": {
              "args": [
                "self",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "value_is_missing",
            "content": "    def value_is_missing(self, value: Any) -> bool:\n        return _value_is_missing(self, value)",
            "signature": {
              "args": [
                "self",
                "value"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.core.Option"
        ]
      },
      {
        "name": "TyperCommand",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        name: Optional[str],\n        *,\n        context_settings: Optional[Dict[str, Any]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        params: Optional[List[click.Parameter]] = None,\n        help: Optional[str] = None,\n        epilog: Optional[str] = None,\n        short_help: Optional[str] = None,\n        options_metavar: Optional[str] = \"[OPTIONS]\",\n        add_help_option: bool = True,\n        no_args_is_help: bool = False,\n        hidden: bool = False,\n        deprecated: bool = False,\n        # Rich settings\n        rich_markup_mode: MarkupMode = DEFAULT_MARKUP_MODE,\n        rich_help_panel: Union[str, None] = None,\n    ) -> None:\n        super().__init__(\n            name=name,\n            context_settings=context_settings,\n            callback=callback,\n            params=params,\n            help=help,\n            epilog=epilog,\n            short_help=short_help,\n            options_metavar=options_metavar,\n            add_help_option=add_help_option,\n            no_args_is_help=no_args_is_help,\n            hidden=hidden,\n            deprecated=deprecated,\n        )\n        self.rich_markup_mode: MarkupMode = rich_markup_mode\n        self.rich_help_panel = rich_help_panel",
            "signature": {
              "args": [
                "self",
                "name"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "format_options",
            "content": "    def format_options(\n        self, ctx: click.Context, formatter: click.HelpFormatter\n    ) -> None:\n        _typer_format_options(self, ctx=ctx, formatter=formatter)",
            "signature": {
              "args": [
                "self",
                "ctx",
                "formatter"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "_main_shell_completion",
            "content": "    def _main_shell_completion(\n        self,\n        ctx_args: MutableMapping[str, Any],\n        prog_name: str,\n        complete_var: Optional[str] = None,\n    ) -> None:\n        _typer_main_shell_completion(\n            self, ctx_args=ctx_args, prog_name=prog_name, complete_var=complete_var\n        )",
            "signature": {
              "args": [
                "self",
                "ctx_args",
                "prog_name",
                "complete_var"
              ],
              "defaults": [
                "None"
              ]
            },
            "decorators": []
          },
          {
            "name": "main",
            "content": "    def main(\n        self,\n        args: Optional[Sequence[str]] = None,\n        prog_name: Optional[str] = None,\n        complete_var: Optional[str] = None,\n        standalone_mode: bool = True,\n        windows_expand_args: bool = True,\n        **extra: Any,\n    ) -> Any:\n        return _main(\n            self,\n            args=args,\n            prog_name=prog_name,\n            complete_var=complete_var,\n            standalone_mode=standalone_mode,\n            windows_expand_args=windows_expand_args,\n            rich_markup_mode=self.rich_markup_mode,\n            **extra,\n        )",
            "signature": {
              "args": [
                "self",
                "args",
                "prog_name",
                "complete_var",
                "standalone_mode",
                "windows_expand_args"
              ],
              "defaults": [
                "None",
                "None",
                "None",
                "True",
                "True"
              ]
            },
            "decorators": []
          },
          {
            "name": "format_help",
            "content": "    def format_help(self, ctx: click.Context, formatter: click.HelpFormatter) -> None:\n        if not HAS_RICH or self.rich_markup_mode is None:\n            return super().format_help(ctx, formatter)\n        from . import rich_utils\n\n        return rich_utils.rich_format_help(\n            obj=self,\n            ctx=ctx,\n            markup_mode=self.rich_markup_mode,\n        )",
            "signature": {
              "args": [
                "self",
                "ctx",
                "formatter"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.core.Command"
        ]
      },
      {
        "name": "TyperGroup",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        name: Optional[str] = None,\n        commands: Optional[\n            Union[Dict[str, click.Command], Sequence[click.Command]]\n        ] = None,\n        # Rich settings\n        rich_markup_mode: MarkupMode = DEFAULT_MARKUP_MODE,\n        rich_help_panel: Union[str, None] = None,\n        **attrs: Any,\n    ) -> None:\n        super().__init__(name=name, commands=commands, **attrs)\n        self.rich_markup_mode: MarkupMode = rich_markup_mode\n        self.rich_help_panel = rich_help_panel",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "format_options",
            "content": "    def format_options(\n        self, ctx: click.Context, formatter: click.HelpFormatter\n    ) -> None:\n        _typer_format_options(self, ctx=ctx, formatter=formatter)\n        self.format_commands(ctx, formatter)",
            "signature": {
              "args": [
                "self",
                "ctx",
                "formatter"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "_main_shell_completion",
            "content": "    def _main_shell_completion(\n        self,\n        ctx_args: MutableMapping[str, Any],\n        prog_name: str,\n        complete_var: Optional[str] = None,\n    ) -> None:\n        _typer_main_shell_completion(\n            self, ctx_args=ctx_args, prog_name=prog_name, complete_var=complete_var\n        )",
            "signature": {
              "args": [
                "self",
                "ctx_args",
                "prog_name",
                "complete_var"
              ],
              "defaults": [
                "None"
              ]
            },
            "decorators": []
          },
          {
            "name": "main",
            "content": "    def main(\n        self,\n        args: Optional[Sequence[str]] = None,\n        prog_name: Optional[str] = None,\n        complete_var: Optional[str] = None,\n        standalone_mode: bool = True,\n        windows_expand_args: bool = True,\n        **extra: Any,\n    ) -> Any:\n        return _main(\n            self,\n            args=args,\n            prog_name=prog_name,\n            complete_var=complete_var,\n            standalone_mode=standalone_mode,\n            windows_expand_args=windows_expand_args,\n            rich_markup_mode=self.rich_markup_mode,\n            **extra,\n        )",
            "signature": {
              "args": [
                "self",
                "args",
                "prog_name",
                "complete_var",
                "standalone_mode",
                "windows_expand_args"
              ],
              "defaults": [
                "None",
                "None",
                "None",
                "True",
                "True"
              ]
            },
            "decorators": []
          },
          {
            "name": "format_help",
            "content": "    def format_help(self, ctx: click.Context, formatter: click.HelpFormatter) -> None:\n        if not HAS_RICH or self.rich_markup_mode is None:\n            return super().format_help(ctx, formatter)\n        from . import rich_utils\n\n        return rich_utils.rich_format_help(\n            obj=self,\n            ctx=ctx,\n            markup_mode=self.rich_markup_mode,\n        )",
            "signature": {
              "args": [
                "self",
                "ctx",
                "formatter"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "list_commands",
            "content": "    def list_commands(self, ctx: click.Context) -> List[str]:\n        \"\"\"Returns a list of subcommand names.\n        Note that in Click's Group class, these are sorted.\n        In Typer, we wish to maintain the original order of creation (cf Issue #933)\"\"\"\n        return [n for n, c in self.commands.items()]",
            "signature": {
              "args": [
                "self",
                "ctx"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.core.Group"
        ]
      }
    ],
    "functions": [
      {
        "name": "_split_opt",
        "content": "def _split_opt(opt: str) -> Tuple[str, str]:\n    first = opt[:1]\n    if first.isalnum():\n        return \"\", opt\n    if opt[1:2] == first:\n        return opt[:2], opt[2:]\n    return first, opt[1:]",
        "signature": {
          "args": [
            "opt"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_typer_param_setup_autocompletion_compat",
        "content": "def _typer_param_setup_autocompletion_compat(\n    self: click.Parameter,\n    *,\n    autocompletion: Optional[\n        Callable[[click.Context, List[str], str], List[Union[Tuple[str, str], str]]]\n    ] = None,\n) -> None:\n    if self._custom_shell_complete is not None:\n        import warnings\n\n        warnings.warn(\n            \"In Typer, only the parameter 'autocompletion' is supported. \"\n            \"The support for 'shell_complete' is deprecated and will be removed in upcoming versions. \",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n    if autocompletion is not None:\n\n        def compat_autocompletion(\n            ctx: click.Context, param: click.core.Parameter, incomplete: str\n        ) -> List[\"click.shell_completion.CompletionItem\"]:\n            from click.shell_completion import CompletionItem\n\n            out = []\n\n            for c in autocompletion(ctx, [], incomplete):\n                if isinstance(c, tuple):\n                    use_completion = CompletionItem(c[0], help=c[1])\n                else:\n                    assert isinstance(c, str)\n                    use_completion = CompletionItem(c)\n\n                if use_completion.value.startswith(incomplete):\n                    out.append(use_completion)\n\n            return out\n\n        self._custom_shell_complete = compat_autocompletion",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "compat_autocompletion",
        "content": "        def compat_autocompletion(\n            ctx: click.Context, param: click.core.Parameter, incomplete: str\n        ) -> List[\"click.shell_completion.CompletionItem\"]:\n            from click.shell_completion import CompletionItem\n\n            out = []\n\n            for c in autocompletion(ctx, [], incomplete):\n                if isinstance(c, tuple):\n                    use_completion = CompletionItem(c[0], help=c[1])\n                else:\n                    assert isinstance(c, str)\n                    use_completion = CompletionItem(c)\n\n                if use_completion.value.startswith(incomplete):\n                    out.append(use_completion)\n\n            return out",
        "signature": {
          "args": [
            "ctx",
            "param",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_get_default_string",
        "content": "def _get_default_string(\n    obj: Union[\"TyperArgument\", \"TyperOption\"],\n    *,\n    ctx: click.Context,\n    show_default_is_str: bool,\n    default_value: Union[List[Any], Tuple[Any, ...], str, Callable[..., Any], Any],\n) -> str:\n    # Extracted from click.core.Option.get_help_record() to be reused by\n    # rich_utils avoiding RegEx hacks\n    if show_default_is_str:\n        default_string = f\"({obj.show_default})\"\n    elif isinstance(default_value, (list, tuple)):\n        default_string = \", \".join(\n            _get_default_string(\n                obj, ctx=ctx, show_default_is_str=show_default_is_str, default_value=d\n            )\n            for d in default_value\n        )\n    elif isinstance(default_value, Enum):\n        default_string = str(default_value.value)\n    elif inspect.isfunction(default_value):\n        default_string = _(\"(dynamic)\")\n    elif isinstance(obj, TyperOption) and obj.is_bool_flag and obj.secondary_opts:\n        # For boolean flags that have distinct True/False opts,\n        # use the opt without prefix instead of the value.\n        # Typer override, original commented\n        # default_string = click.parser.split_opt(\n        #     (self.opts if self.default else self.secondary_opts)[0]\n        # )[1]\n        if obj.default:\n            if obj.opts:\n                default_string = _split_opt(obj.opts[0])[1]\n            else:\n                default_string = str(default_value)\n        else:\n            default_string = _split_opt(obj.secondary_opts[0])[1]\n        # Typer override end\n    elif (\n        isinstance(obj, TyperOption)\n        and obj.is_bool_flag\n        and not obj.secondary_opts\n        and not default_value\n    ):\n        default_string = \"\"\n    else:\n        default_string = str(default_value)\n    return default_string",
        "signature": {
          "args": [
            "obj"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_extract_default_help_str",
        "content": "def _extract_default_help_str(\n    obj: Union[\"TyperArgument\", \"TyperOption\"], *, ctx: click.Context\n) -> Optional[Union[Any, Callable[[], Any]]]:\n    # Extracted from click.core.Option.get_help_record() to be reused by\n    # rich_utils avoiding RegEx hacks\n    # Temporarily enable resilient parsing to avoid type casting\n    # failing for the default. Might be possible to extend this to\n    # help formatting in general.\n    resilient = ctx.resilient_parsing\n    ctx.resilient_parsing = True\n\n    try:\n        default_value = obj.get_default(ctx, call=False)\n    finally:\n        ctx.resilient_parsing = resilient\n    return default_value",
        "signature": {
          "args": [
            "obj"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_main",
        "content": "def _main(\n    self: click.Command,\n    *,\n    args: Optional[Sequence[str]] = None,\n    prog_name: Optional[str] = None,\n    complete_var: Optional[str] = None,\n    standalone_mode: bool = True,\n    windows_expand_args: bool = True,\n    rich_markup_mode: MarkupMode = DEFAULT_MARKUP_MODE,\n    **extra: Any,\n) -> Any:\n    # Typer override, duplicated from click.main() to handle custom rich exceptions\n    # Verify that the environment is configured correctly, or reject\n    # further execution to avoid a broken script.\n    if args is None:\n        args = sys.argv[1:]\n\n        # Covered in Click tests\n        if os.name == \"nt\" and windows_expand_args:  # pragma: no cover\n            args = click.utils._expand_args(args)\n    else:\n        args = list(args)\n\n    if prog_name is None:\n        prog_name = click.utils._detect_program_name()\n\n    # Process shell completion requests and exit early.\n    self._main_shell_completion(extra, prog_name, complete_var)\n\n    try:\n        try:\n            with self.make_context(prog_name, args, **extra) as ctx:\n                rv = self.invoke(ctx)\n                if not standalone_mode:\n                    return rv\n                # it's not safe to `ctx.exit(rv)` here!\n                # note that `rv` may actually contain data like \"1\" which\n                # has obvious effects\n                # more subtle case: `rv=[None, None]` can come out of\n                # chained commands which all returned `None` -- so it's not\n                # even always obvious that `rv` indicates success/failure\n                # by its truthiness/falsiness\n                ctx.exit()\n        except EOFError as e:\n            click.echo(file=sys.stderr)\n            raise click.Abort() from e\n        except KeyboardInterrupt as e:\n            raise click.exceptions.Exit(130) from e\n        except click.ClickException as e:\n            if not standalone_mode:\n                raise\n            # Typer override\n            if HAS_RICH and rich_markup_mode is not None:\n                from . import rich_utils\n\n                rich_utils.rich_format_error(e)\n            else:\n                e.show()\n            # Typer override end\n            sys.exit(e.exit_code)\n        except OSError as e:\n            if e.errno == errno.EPIPE:\n                sys.stdout = cast(TextIO, click.utils.PacifyFlushWrapper(sys.stdout))\n                sys.stderr = cast(TextIO, click.utils.PacifyFlushWrapper(sys.stderr))\n                sys.exit(1)\n            else:\n                raise\n    except click.exceptions.Exit as e:\n        if standalone_mode:\n            sys.exit(e.exit_code)\n        else:\n            # in non-standalone mode, return the exit code\n            # note that this is only reached if `self.invoke` above raises\n            # an Exit explicitly -- thus bypassing the check there which\n            # would return its result\n            # the results of non-standalone execution may therefore be\n            # somewhat ambiguous: if there are codepaths which lead to\n            # `ctx.exit(1)` and to `return 1`, the caller won't be able to\n            # tell the difference between the two\n            return e.exit_code\n    except click.Abort:\n        if not standalone_mode:\n            raise\n        # Typer override\n        if HAS_RICH and rich_markup_mode is not None:\n            from . import rich_utils\n\n            rich_utils.rich_abort_error()\n        else:\n            click.echo(_(\"Aborted!\"), file=sys.stderr)\n        # Typer override end\n        sys.exit(1)",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_value_is_missing",
        "content": "def _value_is_missing(param: click.Parameter, value: Any) -> bool:\n    if value is None:\n        return True\n\n    # Click 8.3 and beyond\n    # if value is UNSET:\n    #     return True\n\n    if (param.nargs != 1 or param.multiple) and value == ():\n        return True  # pragma: no cover\n\n    return False",
        "signature": {
          "args": [
            "param",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_typer_format_options",
        "content": "def _typer_format_options(\n    self: click.core.Command, *, ctx: click.Context, formatter: click.HelpFormatter\n) -> None:\n    args = []\n    opts = []\n    for param in self.get_params(ctx):\n        rv = param.get_help_record(ctx)\n        if rv is not None:\n            if param.param_type_name == \"argument\":\n                args.append(rv)\n            elif param.param_type_name == \"option\":\n                opts.append(rv)\n\n    if args:\n        with formatter.section(_(\"Arguments\")):\n            formatter.write_dl(args)\n    if opts:\n        with formatter.section(_(\"Options\")):\n            formatter.write_dl(opts)",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_typer_main_shell_completion",
        "content": "def _typer_main_shell_completion(\n    self: click.core.Command,\n    *,\n    ctx_args: MutableMapping[str, Any],\n    prog_name: str,\n    complete_var: Optional[str] = None,\n) -> None:\n    if complete_var is None:\n        complete_var = f\"_{prog_name}_COMPLETE\".replace(\"-\", \"_\").upper()\n\n    instruction = os.environ.get(complete_var)\n\n    if not instruction:\n        return\n\n    from .completion import shell_complete\n\n    rv = shell_complete(self, ctx_args, prog_name, complete_var, instruction)\n    sys.exit(rv)",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "_split_opt",
        "caller_class": null,
        "called_function": "isalnum",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_param_setup_autocompletion_compat",
        "caller_class": null,
        "called_function": "warn",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "compat_autocompletion",
        "caller_class": null,
        "called_function": "autocompletion",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "compat_autocompletion",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "compat_autocompletion",
        "caller_class": null,
        "called_function": "CompletionItem",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "compat_autocompletion",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "compat_autocompletion",
        "caller_class": null,
        "called_function": "CompletionItem",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "compat_autocompletion",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "compat_autocompletion",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "_get_default_string",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "isfunction",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "_",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "_split_opt",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "_split_opt",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_extract_default_help_str",
        "caller_class": null,
        "called_function": "get_default",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "_expand_args",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "_detect_program_name",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "_main_shell_completion",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "make_context",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "Abort",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "Exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "rich_format_error",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "show",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "cast",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "PacifyFlushWrapper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "cast",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "PacifyFlushWrapper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "rich_abort_error",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "echo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "_",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperArgument",
        "called_function": "__init__",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperArgument",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperArgument",
        "called_function": "_typer_param_setup_autocompletion_compat",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": "TyperArgument",
        "called_function": "_get_default_string",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": true,
        "self_call_method": true
      },
      {
        "caller_function": "_extract_default_help_str",
        "caller_class": "TyperArgument",
        "called_function": "_extract_default_help_str",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": true,
        "self_call_method": true
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "make_metavar",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "_extract_default_help_str",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": true,
        "self_call_method": true
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "_get_default_string",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": true,
        "self_call_method": true
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "_",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "_",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_help_record",
        "caller_class": "TyperArgument",
        "called_function": "escape_before_html_export",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperArgument",
        "called_function": "upper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperArgument",
        "called_function": "signature",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperArgument",
        "called_function": "get_metavar",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperArgument",
        "called_function": "get_metavar",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "value_is_missing",
        "caller_class": "TyperArgument",
        "called_function": "_value_is_missing",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperOption",
        "called_function": "__init__",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperOption",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperOption",
        "called_function": "_typer_param_setup_autocompletion_compat",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_get_default_string",
        "caller_class": "TyperOption",
        "called_function": "_get_default_string",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": true,
        "self_call_method": true
      },
      {
        "caller_function": "_extract_default_help_str",
        "caller_class": "TyperOption",
        "called_function": "_extract_default_help_str",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": true,
        "self_call_method": true
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperOption",
        "called_function": "signature",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperOption",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperOption",
        "called_function": "make_metavar",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperOption",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperOption",
        "called_function": "make_metavar",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "make_metavar",
        "caller_class": "TyperOption",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_write_opts",
        "caller_class": "TyperOption",
        "called_function": "join_options",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_write_opts",
        "caller_class": "TyperOption",
        "called_function": "make_metavar",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "value_is_missing",
        "caller_class": "TyperOption",
        "called_function": "_value_is_missing",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "get_params",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "get_help_record",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "section",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "_",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "write_dl",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "section",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "_",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_format_options",
        "caller_class": null,
        "called_function": "write_dl",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_main_shell_completion",
        "caller_class": null,
        "called_function": "upper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_main_shell_completion",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_main_shell_completion",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_main_shell_completion",
        "caller_class": null,
        "called_function": "shell_complete",
        "called_function_files": [
          "tests/assets/completion_argument.py",
          "typer/completion.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_typer_main_shell_completion",
        "caller_class": null,
        "called_function": "exit",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperCommand",
        "called_function": "__init__",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperCommand",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "format_options",
        "caller_class": "TyperCommand",
        "called_function": "_typer_format_options",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_main_shell_completion",
        "caller_class": "TyperCommand",
        "called_function": "_typer_main_shell_completion",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": "TyperCommand",
        "called_function": "_main",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "format_help",
        "caller_class": "TyperCommand",
        "called_function": "format_help",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "format_help",
        "caller_class": "TyperCommand",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "format_help",
        "caller_class": "TyperCommand",
        "called_function": "rich_format_help",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperGroup",
        "called_function": "__init__",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperGroup",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "format_options",
        "caller_class": "TyperGroup",
        "called_function": "_typer_format_options",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "format_options",
        "caller_class": "TyperGroup",
        "called_function": "format_commands",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_main_shell_completion",
        "caller_class": "TyperGroup",
        "called_function": "_typer_main_shell_completion",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "main",
        "caller_class": "TyperGroup",
        "called_function": "_main",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "format_help",
        "caller_class": "TyperGroup",
        "called_function": "format_help",
        "called_function_files": [],
        "called_method_files": [
          "typer/core.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "format_help",
        "caller_class": "TyperGroup",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "format_help",
        "caller_class": "TyperGroup",
        "called_function": "rich_format_help",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "list_commands",
        "caller_class": "TyperGroup",
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        # Parameter\n        param_decls: List[str],\n        type: Optional[Any] = None,\n        required: Optional[bool] = None,\n        default: Optional[Any] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        nargs: Optional[int] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        # TyperArgument\n        show_default: Union[bool, str] = True,\n        show_choices: bool = True,\n        show_envvar: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        self.help = help\n        self.show_default = show_default\n        self.show_choices = show_choices\n        self.show_envvar = show_envvar\n        self.hidden = hidden\n        self.rich_help_panel = rich_help_panel\n\n        super().__init__(\n            param_decls=param_decls,\n            type=type,\n            required=required,\n            default=default,\n            callback=callback,\n            nargs=nargs,\n            metavar=metavar,\n            expose_value=expose_value,\n            is_eager=is_eager,\n            envvar=envvar,\n            shell_complete=shell_complete,\n        )\n        _typer_param_setup_autocompletion_compat(self, autocompletion=autocompletion)",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_get_default_string",
        "content": "    def _get_default_string(\n        self,\n        *,\n        ctx: click.Context,\n        show_default_is_str: bool,\n        default_value: Union[List[Any], Tuple[Any, ...], str, Callable[..., Any], Any],\n    ) -> str:\n        return _get_default_string(\n            self,\n            ctx=ctx,\n            show_default_is_str=show_default_is_str,\n            default_value=default_value,\n        )",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_extract_default_help_str",
        "content": "    def _extract_default_help_str(\n        self, *, ctx: click.Context\n    ) -> Optional[Union[Any, Callable[[], Any]]]:\n        return _extract_default_help_str(self, ctx=ctx)",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_help_record",
        "content": "    def get_help_record(self, ctx: click.Context) -> Optional[Tuple[str, str]]:\n        # Modified version of click.core.Option.get_help_record()\n        # to support Arguments\n        if self.hidden:\n            return None\n        name = self.make_metavar(ctx=ctx)\n        help = self.help or \"\"\n        extra = []\n        if self.show_envvar:\n            envvar = self.envvar\n            # allow_from_autoenv is currently not supported in Typer for CLI Arguments\n            if envvar is not None:\n                var_str = (\n                    \", \".join(str(d) for d in envvar)\n                    if isinstance(envvar, (list, tuple))\n                    else envvar\n                )\n                extra.append(f\"env var: {var_str}\")\n\n        # Typer override:\n        # Extracted to _extract_default_help_str() to allow re-using it in rich_utils\n        default_value = self._extract_default_help_str(ctx=ctx)\n        # Typer override end\n\n        show_default_is_str = isinstance(self.show_default, str)\n\n        if show_default_is_str or (\n            default_value is not None and (self.show_default or ctx.show_default)\n        ):\n            # Typer override:\n            # Extracted to _get_default_string() to allow re-using it in rich_utils\n            default_string = self._get_default_string(\n                ctx=ctx,\n                show_default_is_str=show_default_is_str,\n                default_value=default_value,\n            )\n            # Typer override end\n            if default_string:\n                extra.append(_(\"default: {default}\").format(default=default_string))\n        if self.required:\n            extra.append(_(\"required\"))\n        if extra:\n            extra_str = \"; \".join(extra)\n            extra_str = f\"[{extra_str}]\"\n            if HAS_RICH:\n                # This is needed for when we want to export to HTML\n                from . import rich_utils\n\n                extra_str = rich_utils.escape_before_html_export(extra_str)\n\n            help = f\"{help}  {extra_str}\" if help else f\"{extra_str}\"\n        return name, help",
        "signature": {
          "args": [
            "self",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "make_metavar",
        "content": "    def make_metavar(self, ctx: Union[click.Context, None] = None) -> str:\n        # Modified version of click.core.Argument.make_metavar()\n        # to include Argument name\n        if self.metavar is not None:\n            return self.metavar\n        var = (self.name or \"\").upper()\n        if not self.required:\n            var = f\"[{var}]\"\n        # TODO: When deprecating Click < 8.2, remove this\n        signature = inspect.signature(self.type.get_metavar)\n        if \"ctx\" in signature.parameters:\n            # Click >= 8.2\n            type_var = self.type.get_metavar(self, ctx=ctx)  # type: ignore[arg-type]\n        else:\n            # Click < 8.2\n            type_var = self.type.get_metavar(self)  # type: ignore[call-arg]\n        # TODO: /When deprecating Click < 8.2, remove this, uncomment the line below\n        # type_var = self.type.get_metavar(self, ctx=ctx)\n        if type_var:\n            var += f\":{type_var}\"\n        if self.nargs != 1:\n            var += \"...\"\n        return var",
        "signature": {
          "args": [
            "self",
            "ctx"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      },
      {
        "name": "value_is_missing",
        "content": "    def value_is_missing(self, value: Any) -> bool:\n        return _value_is_missing(self, value)",
        "signature": {
          "args": [
            "self",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        # Parameter\n        param_decls: List[str],\n        type: Optional[Union[click.types.ParamType, Any]] = None,\n        required: Optional[bool] = None,\n        default: Optional[Any] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        nargs: Optional[int] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        # Option\n        show_default: Union[bool, str] = False,\n        prompt: Union[bool, str] = False,\n        confirmation_prompt: Union[bool, str] = False,\n        prompt_required: bool = True,\n        hide_input: bool = False,\n        is_flag: Optional[bool] = None,\n        multiple: bool = False,\n        count: bool = False,\n        allow_from_autoenv: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        show_choices: bool = True,\n        show_envvar: bool = False,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        super().__init__(\n            param_decls=param_decls,\n            type=type,\n            required=required,\n            default=default,\n            callback=callback,\n            nargs=nargs,\n            metavar=metavar,\n            expose_value=expose_value,\n            is_eager=is_eager,\n            envvar=envvar,\n            show_default=show_default,\n            prompt=prompt,\n            confirmation_prompt=confirmation_prompt,\n            hide_input=hide_input,\n            is_flag=is_flag,\n            multiple=multiple,\n            count=count,\n            allow_from_autoenv=allow_from_autoenv,\n            help=help,\n            hidden=hidden,\n            show_choices=show_choices,\n            show_envvar=show_envvar,\n            prompt_required=prompt_required,\n            shell_complete=shell_complete,\n        )\n        _typer_param_setup_autocompletion_compat(self, autocompletion=autocompletion)\n        self.rich_help_panel = rich_help_panel",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_get_default_string",
        "content": "    def _get_default_string(\n        self,\n        *,\n        ctx: click.Context,\n        show_default_is_str: bool,\n        default_value: Union[List[Any], Tuple[Any, ...], str, Callable[..., Any], Any],\n    ) -> str:\n        return _get_default_string(\n            self,\n            ctx=ctx,\n            show_default_is_str=show_default_is_str,\n            default_value=default_value,\n        )",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_extract_default_help_str",
        "content": "    def _extract_default_help_str(\n        self, *, ctx: click.Context\n    ) -> Optional[Union[Any, Callable[[], Any]]]:\n        return _extract_default_help_str(self, ctx=ctx)",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "make_metavar",
        "content": "    def make_metavar(self, ctx: Union[click.Context, None] = None) -> str:\n        signature = inspect.signature(super().make_metavar)\n        if \"ctx\" in signature.parameters:\n            # Click >= 8.2\n            return super().make_metavar(ctx=ctx)  # type: ignore[arg-type]\n        # Click < 8.2\n        return super().make_metavar()  # type: ignore[call-arg]",
        "signature": {
          "args": [
            "self",
            "ctx"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      },
      {
        "name": "get_help_record",
        "content": "    def get_help_record(self, ctx: click.Context) -> Optional[Tuple[str, str]]:\n        # Duplicate all of Click's logic only to modify a single line, to allow boolean\n        # flags with only names for False values as it's currently supported by Typer\n        # Ref: https://typer.tiangolo.com/tutorial/parameter-types/bool/#only-names-for-false\n        if self.hidden:\n            return None\n\n        any_prefix_is_slash = False\n\n        def _write_opts(opts: Sequence[str]) -> str:\n            nonlocal any_prefix_is_slash\n\n            rv, any_slashes = click.formatting.join_options(opts)\n\n            if any_slashes:\n                any_prefix_is_slash = True\n\n            if not self.is_flag and not self.count:\n                rv += f\" {self.make_metavar(ctx=ctx)}\"\n\n            return rv\n\n        rv = [_write_opts(self.opts)]\n\n        if self.secondary_opts:\n            rv.append(_write_opts(self.secondary_opts))\n\n        help = self.help or \"\"\n        extra = []\n\n        if self.show_envvar:\n            envvar = self.envvar\n\n            if envvar is None:\n                if (\n                    self.allow_from_autoenv\n                    and ctx.auto_envvar_prefix is not None\n                    and self.name is not None\n                ):\n                    envvar = f\"{ctx.auto_envvar_prefix}_{self.name.upper()}\"\n\n            if envvar is not None:\n                var_str = (\n                    envvar\n                    if isinstance(envvar, str)\n                    else \", \".join(str(d) for d in envvar)\n                )\n                extra.append(_(\"env var: {var}\").format(var=var_str))\n\n        # Typer override:\n        # Extracted to _extract_default() to allow re-using it in rich_utils\n        default_value = self._extract_default_help_str(ctx=ctx)\n        # Typer override end\n\n        show_default_is_str = isinstance(self.show_default, str)\n\n        if show_default_is_str or (\n            default_value is not None and (self.show_default or ctx.show_default)\n        ):\n            # Typer override:\n            # Extracted to _get_default_string() to allow re-using it in rich_utils\n            default_string = self._get_default_string(\n                ctx=ctx,\n                show_default_is_str=show_default_is_str,\n                default_value=default_value,\n            )\n            # Typer override end\n            if default_string:\n                extra.append(_(\"default: {default}\").format(default=default_string))\n\n        if isinstance(self.type, click.types._NumberRangeBase):\n            range_str = self.type._describe_range()\n\n            if range_str:\n                extra.append(range_str)\n\n        if self.required:\n            extra.append(_(\"required\"))\n\n        if extra:\n            extra_str = \"; \".join(extra)\n            extra_str = f\"[{extra_str}]\"\n            if HAS_RICH:\n                # This is needed for when we want to export to HTML\n                from . import rich_utils\n\n                extra_str = rich_utils.escape_before_html_export(extra_str)\n\n            help = f\"{help}  {extra_str}\" if help else f\"{extra_str}\"\n\n        return (\"; \" if any_prefix_is_slash else \" / \").join(rv), help",
        "signature": {
          "args": [
            "self",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "value_is_missing",
        "content": "    def value_is_missing(self, value: Any) -> bool:\n        return _value_is_missing(self, value)",
        "signature": {
          "args": [
            "self",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        name: Optional[str],\n        *,\n        context_settings: Optional[Dict[str, Any]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        params: Optional[List[click.Parameter]] = None,\n        help: Optional[str] = None,\n        epilog: Optional[str] = None,\n        short_help: Optional[str] = None,\n        options_metavar: Optional[str] = \"[OPTIONS]\",\n        add_help_option: bool = True,\n        no_args_is_help: bool = False,\n        hidden: bool = False,\n        deprecated: bool = False,\n        # Rich settings\n        rich_markup_mode: MarkupMode = DEFAULT_MARKUP_MODE,\n        rich_help_panel: Union[str, None] = None,\n    ) -> None:\n        super().__init__(\n            name=name,\n            context_settings=context_settings,\n            callback=callback,\n            params=params,\n            help=help,\n            epilog=epilog,\n            short_help=short_help,\n            options_metavar=options_metavar,\n            add_help_option=add_help_option,\n            no_args_is_help=no_args_is_help,\n            hidden=hidden,\n            deprecated=deprecated,\n        )\n        self.rich_markup_mode: MarkupMode = rich_markup_mode\n        self.rich_help_panel = rich_help_panel",
        "signature": {
          "args": [
            "self",
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "format_options",
        "content": "    def format_options(\n        self, ctx: click.Context, formatter: click.HelpFormatter\n    ) -> None:\n        _typer_format_options(self, ctx=ctx, formatter=formatter)",
        "signature": {
          "args": [
            "self",
            "ctx",
            "formatter"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_main_shell_completion",
        "content": "    def _main_shell_completion(\n        self,\n        ctx_args: MutableMapping[str, Any],\n        prog_name: str,\n        complete_var: Optional[str] = None,\n    ) -> None:\n        _typer_main_shell_completion(\n            self, ctx_args=ctx_args, prog_name=prog_name, complete_var=complete_var\n        )",
        "signature": {
          "args": [
            "self",
            "ctx_args",
            "prog_name",
            "complete_var"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(\n        self,\n        args: Optional[Sequence[str]] = None,\n        prog_name: Optional[str] = None,\n        complete_var: Optional[str] = None,\n        standalone_mode: bool = True,\n        windows_expand_args: bool = True,\n        **extra: Any,\n    ) -> Any:\n        return _main(\n            self,\n            args=args,\n            prog_name=prog_name,\n            complete_var=complete_var,\n            standalone_mode=standalone_mode,\n            windows_expand_args=windows_expand_args,\n            rich_markup_mode=self.rich_markup_mode,\n            **extra,\n        )",
        "signature": {
          "args": [
            "self",
            "args",
            "prog_name",
            "complete_var",
            "standalone_mode",
            "windows_expand_args"
          ],
          "defaults": [
            "None",
            "None",
            "None",
            "True",
            "True"
          ]
        },
        "decorators": []
      },
      {
        "name": "format_help",
        "content": "    def format_help(self, ctx: click.Context, formatter: click.HelpFormatter) -> None:\n        if not HAS_RICH or self.rich_markup_mode is None:\n            return super().format_help(ctx, formatter)\n        from . import rich_utils\n\n        return rich_utils.rich_format_help(\n            obj=self,\n            ctx=ctx,\n            markup_mode=self.rich_markup_mode,\n        )",
        "signature": {
          "args": [
            "self",
            "ctx",
            "formatter"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        name: Optional[str] = None,\n        commands: Optional[\n            Union[Dict[str, click.Command], Sequence[click.Command]]\n        ] = None,\n        # Rich settings\n        rich_markup_mode: MarkupMode = DEFAULT_MARKUP_MODE,\n        rich_help_panel: Union[str, None] = None,\n        **attrs: Any,\n    ) -> None:\n        super().__init__(name=name, commands=commands, **attrs)\n        self.rich_markup_mode: MarkupMode = rich_markup_mode\n        self.rich_help_panel = rich_help_panel",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "format_options",
        "content": "    def format_options(\n        self, ctx: click.Context, formatter: click.HelpFormatter\n    ) -> None:\n        _typer_format_options(self, ctx=ctx, formatter=formatter)\n        self.format_commands(ctx, formatter)",
        "signature": {
          "args": [
            "self",
            "ctx",
            "formatter"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_main_shell_completion",
        "content": "    def _main_shell_completion(\n        self,\n        ctx_args: MutableMapping[str, Any],\n        prog_name: str,\n        complete_var: Optional[str] = None,\n    ) -> None:\n        _typer_main_shell_completion(\n            self, ctx_args=ctx_args, prog_name=prog_name, complete_var=complete_var\n        )",
        "signature": {
          "args": [
            "self",
            "ctx_args",
            "prog_name",
            "complete_var"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      },
      {
        "name": "main",
        "content": "    def main(\n        self,\n        args: Optional[Sequence[str]] = None,\n        prog_name: Optional[str] = None,\n        complete_var: Optional[str] = None,\n        standalone_mode: bool = True,\n        windows_expand_args: bool = True,\n        **extra: Any,\n    ) -> Any:\n        return _main(\n            self,\n            args=args,\n            prog_name=prog_name,\n            complete_var=complete_var,\n            standalone_mode=standalone_mode,\n            windows_expand_args=windows_expand_args,\n            rich_markup_mode=self.rich_markup_mode,\n            **extra,\n        )",
        "signature": {
          "args": [
            "self",
            "args",
            "prog_name",
            "complete_var",
            "standalone_mode",
            "windows_expand_args"
          ],
          "defaults": [
            "None",
            "None",
            "None",
            "True",
            "True"
          ]
        },
        "decorators": []
      },
      {
        "name": "format_help",
        "content": "    def format_help(self, ctx: click.Context, formatter: click.HelpFormatter) -> None:\n        if not HAS_RICH or self.rich_markup_mode is None:\n            return super().format_help(ctx, formatter)\n        from . import rich_utils\n\n        return rich_utils.rich_format_help(\n            obj=self,\n            ctx=ctx,\n            markup_mode=self.rich_markup_mode,\n        )",
        "signature": {
          "args": [
            "self",
            "ctx",
            "formatter"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "list_commands",
        "content": "    def list_commands(self, ctx: click.Context) -> List[str]:\n        \"\"\"Returns a list of subcommand names.\n        Note that in Click's Group class, these are sorted.\n        In Typer, we wish to maintain the original order of creation (cf Issue #933)\"\"\"\n        return [n for n, c in self.commands.items()]",
        "signature": {
          "args": [
            "self",
            "ctx"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "typer/main.py",
    "type": "python",
    "imports": [
      {
        "module": "inspect",
        "type": "external"
      },
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "platform",
        "type": "external"
      },
      {
        "module": "shutil",
        "type": "external"
      },
      {
        "module": "subprocess",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "traceback",
        "type": "external"
      },
      {
        "module": "datetime",
        "type": "external"
      },
      {
        "module": "enum",
        "type": "external"
      },
      {
        "module": "functools",
        "type": "external"
      },
      {
        "module": "pathlib",
        "type": "external"
      },
      {
        "module": "traceback",
        "type": "external"
      },
      {
        "module": "types",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "uuid",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "typer._types",
        "type": "external"
      },
      {
        "module": "_typing",
        "type": "external"
      },
      {
        "module": "completion",
        "type": "external"
      },
      {
        "module": "core",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "utils",
        "type": "external"
      },
      {
        "module": "webbrowser",
        "type": "external"
      },
      {
        "module": "warnings",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "Typer",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        name: Optional[str] = Default(None),\n        cls: Optional[Type[TyperGroup]] = Default(None),\n        invoke_without_command: bool = Default(False),\n        no_args_is_help: bool = Default(False),\n        subcommand_metavar: Optional[str] = Default(None),\n        chain: bool = Default(False),\n        result_callback: Optional[Callable[..., Any]] = Default(None),\n        # Command\n        context_settings: Optional[Dict[Any, Any]] = Default(None),\n        callback: Optional[Callable[..., Any]] = Default(None),\n        help: Optional[str] = Default(None),\n        epilog: Optional[str] = Default(None),\n        short_help: Optional[str] = Default(None),\n        options_metavar: str = Default(\"[OPTIONS]\"),\n        add_help_option: bool = Default(True),\n        hidden: bool = Default(False),\n        deprecated: bool = Default(False),\n        add_completion: bool = True,\n        # Rich settings\n        rich_markup_mode: MarkupMode = Default(DEFAULT_MARKUP_MODE),\n        rich_help_panel: Union[str, None] = Default(None),\n        pretty_exceptions_enable: bool = True,\n        pretty_exceptions_show_locals: bool = True,\n        pretty_exceptions_short: bool = True,\n    ):\n        self._add_completion = add_completion\n        self.rich_markup_mode: MarkupMode = rich_markup_mode\n        self.rich_help_panel = rich_help_panel\n        self.pretty_exceptions_enable = pretty_exceptions_enable\n        self.pretty_exceptions_show_locals = pretty_exceptions_show_locals\n        self.pretty_exceptions_short = pretty_exceptions_short\n        self.info = TyperInfo(\n            name=name,\n            cls=cls,\n            invoke_without_command=invoke_without_command,\n            no_args_is_help=no_args_is_help,\n            subcommand_metavar=subcommand_metavar,\n            chain=chain,\n            result_callback=result_callback,\n            context_settings=context_settings,\n            callback=callback,\n            help=help,\n            epilog=epilog,\n            short_help=short_help,\n            options_metavar=options_metavar,\n            add_help_option=add_help_option,\n            hidden=hidden,\n            deprecated=deprecated,\n        )\n        self.registered_groups: List[TyperInfo] = []\n        self.registered_commands: List[CommandInfo] = []\n        self.registered_callback: Optional[TyperInfo] = None",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "callback",
            "content": "    def callback(\n        self,\n        *,\n        cls: Optional[Type[TyperGroup]] = Default(None),\n        invoke_without_command: bool = Default(False),\n        no_args_is_help: bool = Default(False),\n        subcommand_metavar: Optional[str] = Default(None),\n        chain: bool = Default(False),\n        result_callback: Optional[Callable[..., Any]] = Default(None),\n        # Command\n        context_settings: Optional[Dict[Any, Any]] = Default(None),\n        help: Optional[str] = Default(None),\n        epilog: Optional[str] = Default(None),\n        short_help: Optional[str] = Default(None),\n        options_metavar: str = Default(\"[OPTIONS]\"),\n        add_help_option: bool = Default(True),\n        hidden: bool = Default(False),\n        deprecated: bool = Default(False),\n        # Rich settings\n        rich_help_panel: Union[str, None] = Default(None),\n    ) -> Callable[[CommandFunctionType], CommandFunctionType]:\n        def decorator(f: CommandFunctionType) -> CommandFunctionType:\n            self.registered_callback = TyperInfo(\n                cls=cls,\n                invoke_without_command=invoke_without_command,\n                no_args_is_help=no_args_is_help,\n                subcommand_metavar=subcommand_metavar,\n                chain=chain,\n                result_callback=result_callback,\n                context_settings=context_settings,\n                callback=f,\n                help=help,\n                epilog=epilog,\n                short_help=short_help,\n                options_metavar=options_metavar,\n                add_help_option=add_help_option,\n                hidden=hidden,\n                deprecated=deprecated,\n                rich_help_panel=rich_help_panel,\n            )\n            return f\n\n        return decorator",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "command",
            "content": "    def command(\n        self,\n        name: Optional[str] = None,\n        *,\n        cls: Optional[Type[TyperCommand]] = None,\n        context_settings: Optional[Dict[Any, Any]] = None,\n        help: Optional[str] = None,\n        epilog: Optional[str] = None,\n        short_help: Optional[str] = None,\n        options_metavar: str = \"[OPTIONS]\",\n        add_help_option: bool = True,\n        no_args_is_help: bool = False,\n        hidden: bool = False,\n        deprecated: bool = False,\n        # Rich settings\n        rich_help_panel: Union[str, None] = Default(None),\n    ) -> Callable[[CommandFunctionType], CommandFunctionType]:\n        if cls is None:\n            cls = TyperCommand\n\n        def decorator(f: CommandFunctionType) -> CommandFunctionType:\n            self.registered_commands.append(\n                CommandInfo(\n                    name=name,\n                    cls=cls,\n                    context_settings=context_settings,\n                    callback=f,\n                    help=help,\n                    epilog=epilog,\n                    short_help=short_help,\n                    options_metavar=options_metavar,\n                    add_help_option=add_help_option,\n                    no_args_is_help=no_args_is_help,\n                    hidden=hidden,\n                    deprecated=deprecated,\n                    # Rich settings\n                    rich_help_panel=rich_help_panel,\n                )\n            )\n            return f\n\n        return decorator",
            "signature": {
              "args": [
                "self",
                "name"
              ],
              "defaults": [
                "None"
              ]
            },
            "decorators": []
          },
          {
            "name": "add_typer",
            "content": "    def add_typer(\n        self,\n        typer_instance: \"Typer\",\n        *,\n        name: Optional[str] = Default(None),\n        cls: Optional[Type[TyperGroup]] = Default(None),\n        invoke_without_command: bool = Default(False),\n        no_args_is_help: bool = Default(False),\n        subcommand_metavar: Optional[str] = Default(None),\n        chain: bool = Default(False),\n        result_callback: Optional[Callable[..., Any]] = Default(None),\n        # Command\n        context_settings: Optional[Dict[Any, Any]] = Default(None),\n        callback: Optional[Callable[..., Any]] = Default(None),\n        help: Optional[str] = Default(None),\n        epilog: Optional[str] = Default(None),\n        short_help: Optional[str] = Default(None),\n        options_metavar: str = Default(\"[OPTIONS]\"),\n        add_help_option: bool = Default(True),\n        hidden: bool = Default(False),\n        deprecated: bool = Default(False),\n        # Rich settings\n        rich_help_panel: Union[str, None] = Default(None),\n    ) -> None:\n        self.registered_groups.append(\n            TyperInfo(\n                typer_instance,\n                name=name,\n                cls=cls,\n                invoke_without_command=invoke_without_command,\n                no_args_is_help=no_args_is_help,\n                subcommand_metavar=subcommand_metavar,\n                chain=chain,\n                result_callback=result_callback,\n                context_settings=context_settings,\n                callback=callback,\n                help=help,\n                epilog=epilog,\n                short_help=short_help,\n                options_metavar=options_metavar,\n                add_help_option=add_help_option,\n                hidden=hidden,\n                deprecated=deprecated,\n                rich_help_panel=rich_help_panel,\n            )\n        )",
            "signature": {
              "args": [
                "self",
                "typer_instance"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__call__",
            "content": "    def __call__(self, *args: Any, **kwargs: Any) -> Any:\n        if sys.excepthook != except_hook:\n            sys.excepthook = except_hook\n        try:\n            return get_command(self)(*args, **kwargs)\n        except Exception as e:\n            # Set a custom attribute to tell the hook to show nice exceptions for user\n            # code. An alternative/first implementation was a custom exception with\n            # raise custom_exc from e\n            # but that means the last error shown is the custom exception, not the\n            # actual error. This trick improves developer experience by showing the\n            # actual error last.\n            setattr(\n                e,\n                _typer_developer_exception_attr_name,\n                DeveloperExceptionConfig(\n                    pretty_exceptions_enable=self.pretty_exceptions_enable,\n                    pretty_exceptions_show_locals=self.pretty_exceptions_show_locals,\n                    pretty_exceptions_short=self.pretty_exceptions_short,\n                ),\n            )\n            raise e",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      }
    ],
    "functions": [
      {
        "name": "except_hook",
        "content": "def except_hook(\n    exc_type: Type[BaseException], exc_value: BaseException, tb: Optional[TracebackType]\n) -> None:\n    exception_config: Union[DeveloperExceptionConfig, None] = getattr(\n        exc_value, _typer_developer_exception_attr_name, None\n    )\n    standard_traceback = os.getenv(\"_TYPER_STANDARD_TRACEBACK\")\n    if (\n        standard_traceback\n        or not exception_config\n        or not exception_config.pretty_exceptions_enable\n    ):\n        _original_except_hook(exc_type, exc_value, tb)\n        return\n    typer_path = os.path.dirname(__file__)\n    click_path = os.path.dirname(click.__file__)\n    internal_dir_names = [typer_path, click_path]\n    exc = exc_value\n    if HAS_RICH:\n        from . import rich_utils\n\n        rich_tb = rich_utils.get_traceback(exc, exception_config, internal_dir_names)\n        console_stderr = rich_utils._get_rich_console(stderr=True)\n        console_stderr.print(rich_tb)\n        return\n    tb_exc = traceback.TracebackException.from_exception(exc)\n    stack: List[FrameSummary] = []\n    for frame in tb_exc.stack:\n        if any(frame.filename.startswith(path) for path in internal_dir_names):\n            if not exception_config.pretty_exceptions_short:\n                # Hide the line for internal libraries, Typer and Click\n                stack.append(\n                    traceback.FrameSummary(\n                        filename=frame.filename,\n                        lineno=frame.lineno,\n                        name=frame.name,\n                        line=\"\",\n                    )\n                )\n        else:\n            stack.append(frame)\n    # Type ignore ref: https://github.com/python/typeshed/pull/8244\n    final_stack_summary = StackSummary.from_list(stack)\n    tb_exc.stack = final_stack_summary\n    for line in tb_exc.format():\n        print(line, file=sys.stderr)\n    return",
        "signature": {
          "args": [
            "exc_type",
            "exc_value",
            "tb"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_install_completion_arguments",
        "content": "def get_install_completion_arguments() -> Tuple[click.Parameter, click.Parameter]:\n    install_param, show_param = get_completion_inspect_parameters()\n    click_install_param, _ = get_click_param(install_param)\n    click_show_param, _ = get_click_param(show_param)\n    return click_install_param, click_show_param",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_group",
        "content": "def get_group(typer_instance: Typer) -> TyperGroup:\n    group = get_group_from_info(\n        TyperInfo(typer_instance),\n        pretty_exceptions_short=typer_instance.pretty_exceptions_short,\n        rich_markup_mode=typer_instance.rich_markup_mode,\n    )\n    return group",
        "signature": {
          "args": [
            "typer_instance"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_command",
        "content": "def get_command(typer_instance: Typer) -> click.Command:\n    if typer_instance._add_completion:\n        click_install_param, click_show_param = get_install_completion_arguments()\n    if (\n        typer_instance.registered_callback\n        or typer_instance.info.callback\n        or typer_instance.registered_groups\n        or len(typer_instance.registered_commands) > 1\n    ):\n        # Create a Group\n        click_command: click.Command = get_group(typer_instance)\n        if typer_instance._add_completion:\n            click_command.params.append(click_install_param)\n            click_command.params.append(click_show_param)\n        return click_command\n    elif len(typer_instance.registered_commands) == 1:\n        # Create a single Command\n        single_command = typer_instance.registered_commands[0]\n\n        if not single_command.context_settings and not isinstance(\n            typer_instance.info.context_settings, DefaultPlaceholder\n        ):\n            single_command.context_settings = typer_instance.info.context_settings\n\n        click_command = get_command_from_info(\n            single_command,\n            pretty_exceptions_short=typer_instance.pretty_exceptions_short,\n            rich_markup_mode=typer_instance.rich_markup_mode,\n        )\n        if typer_instance._add_completion:\n            click_command.params.append(click_install_param)\n            click_command.params.append(click_show_param)\n        return click_command\n    raise RuntimeError(\n        \"Could not get a command for this Typer instance\"\n    )  # pragma: no cover",
        "signature": {
          "args": [
            "typer_instance"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "solve_typer_info_help",
        "content": "def solve_typer_info_help(typer_info: TyperInfo) -> str:\n    # Priority 1: Explicit value was set in app.add_typer()\n    if not isinstance(typer_info.help, DefaultPlaceholder):\n        return inspect.cleandoc(typer_info.help or \"\")\n    # Priority 2: Explicit value was set in sub_app.callback()\n    try:\n        callback_help = typer_info.typer_instance.registered_callback.help\n        if not isinstance(callback_help, DefaultPlaceholder):\n            return inspect.cleandoc(callback_help or \"\")\n    except AttributeError:\n        pass\n    # Priority 3: Explicit value was set in sub_app = typer.Typer()\n    try:\n        instance_help = typer_info.typer_instance.info.help\n        if not isinstance(instance_help, DefaultPlaceholder):\n            return inspect.cleandoc(instance_help or \"\")\n    except AttributeError:\n        pass\n    # Priority 4: Implicit inference from callback docstring in app.add_typer()\n    if typer_info.callback:\n        doc = inspect.getdoc(typer_info.callback)\n        if doc:\n            return doc\n    # Priority 5: Implicit inference from callback docstring in @app.callback()\n    try:\n        callback = typer_info.typer_instance.registered_callback.callback\n        if not isinstance(callback, DefaultPlaceholder):\n            doc = inspect.getdoc(callback or \"\")\n            if doc:\n                return doc\n    except AttributeError:\n        pass\n    # Priority 6: Implicit inference from callback docstring in typer.Typer()\n    try:\n        instance_callback = typer_info.typer_instance.info.callback\n        if not isinstance(instance_callback, DefaultPlaceholder):\n            doc = inspect.getdoc(instance_callback)\n            if doc:\n                return doc\n    except AttributeError:\n        pass\n    # Value not set, use the default\n    return typer_info.help.value",
        "signature": {
          "args": [
            "typer_info"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "solve_typer_info_defaults",
        "content": "def solve_typer_info_defaults(typer_info: TyperInfo) -> TyperInfo:\n    values: Dict[str, Any] = {}\n    for name, value in typer_info.__dict__.items():\n        # Priority 1: Value was set in app.add_typer()\n        if not isinstance(value, DefaultPlaceholder):\n            values[name] = value\n            continue\n        # Priority 2: Value was set in @subapp.callback()\n        try:\n            callback_value = getattr(\n                typer_info.typer_instance.registered_callback,  # type: ignore\n                name,\n            )\n            if not isinstance(callback_value, DefaultPlaceholder):\n                values[name] = callback_value\n                continue\n        except AttributeError:\n            pass\n        # Priority 3: Value set in subapp = typer.Typer()\n        try:\n            instance_value = getattr(\n                typer_info.typer_instance.info,  # type: ignore\n                name,\n            )\n            if not isinstance(instance_value, DefaultPlaceholder):\n                values[name] = instance_value\n                continue\n        except AttributeError:\n            pass\n        # Value not set, use the default\n        values[name] = value.value\n    values[\"help\"] = solve_typer_info_help(typer_info)\n    return TyperInfo(**values)",
        "signature": {
          "args": [
            "typer_info"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_group_from_info",
        "content": "def get_group_from_info(\n    group_info: TyperInfo,\n    *,\n    pretty_exceptions_short: bool,\n    rich_markup_mode: MarkupMode,\n) -> TyperGroup:\n    assert group_info.typer_instance, (\n        \"A Typer instance is needed to generate a Click Group\"\n    )\n    commands: Dict[str, click.Command] = {}\n    for command_info in group_info.typer_instance.registered_commands:\n        command = get_command_from_info(\n            command_info=command_info,\n            pretty_exceptions_short=pretty_exceptions_short,\n            rich_markup_mode=rich_markup_mode,\n        )\n        if command.name:\n            commands[command.name] = command\n    for sub_group_info in group_info.typer_instance.registered_groups:\n        sub_group = get_group_from_info(\n            sub_group_info,\n            pretty_exceptions_short=pretty_exceptions_short,\n            rich_markup_mode=rich_markup_mode,\n        )\n        if sub_group.name:\n            commands[sub_group.name] = sub_group\n        else:\n            if sub_group.callback:\n                import warnings\n\n                warnings.warn(\n                    \"The 'callback' parameter is not supported by Typer when using `add_typer` without a name\",\n                    stacklevel=5,\n                )\n            for sub_command_name, sub_command in sub_group.commands.items():\n                commands[sub_command_name] = sub_command\n    solved_info = solve_typer_info_defaults(group_info)\n    (\n        params,\n        convertors,\n        context_param_name,\n    ) = get_params_convertors_ctx_param_name_from_function(solved_info.callback)\n    cls = solved_info.cls or TyperGroup\n    assert issubclass(cls, TyperGroup), f\"{cls} should be a subclass of {TyperGroup}\"\n    group = cls(\n        name=solved_info.name or \"\",\n        commands=commands,\n        invoke_without_command=solved_info.invoke_without_command,\n        no_args_is_help=solved_info.no_args_is_help,\n        subcommand_metavar=solved_info.subcommand_metavar,\n        chain=solved_info.chain,\n        result_callback=solved_info.result_callback,\n        context_settings=solved_info.context_settings,\n        callback=get_callback(\n            callback=solved_info.callback,\n            params=params,\n            convertors=convertors,\n            context_param_name=context_param_name,\n            pretty_exceptions_short=pretty_exceptions_short,\n        ),\n        params=params,\n        help=solved_info.help,\n        epilog=solved_info.epilog,\n        short_help=solved_info.short_help,\n        options_metavar=solved_info.options_metavar,\n        add_help_option=solved_info.add_help_option,\n        hidden=solved_info.hidden,\n        deprecated=solved_info.deprecated,\n        rich_markup_mode=rich_markup_mode,\n        # Rich settings\n        rich_help_panel=solved_info.rich_help_panel,\n    )\n    return group",
        "signature": {
          "args": [
            "group_info"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_command_name",
        "content": "def get_command_name(name: str) -> str:\n    return name.lower().replace(\"_\", \"-\")",
        "signature": {
          "args": [
            "name"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_params_convertors_ctx_param_name_from_function",
        "content": "def get_params_convertors_ctx_param_name_from_function(\n    callback: Optional[Callable[..., Any]],\n) -> Tuple[List[Union[click.Argument, click.Option]], Dict[str, Any], Optional[str]]:\n    params = []\n    convertors = {}\n    context_param_name = None\n    if callback:\n        parameters = get_params_from_function(callback)\n        for param_name, param in parameters.items():\n            if lenient_issubclass(param.annotation, click.Context):\n                context_param_name = param_name\n                continue\n            click_param, convertor = get_click_param(param)\n            if convertor:\n                convertors[param_name] = convertor\n            params.append(click_param)\n    return params, convertors, context_param_name",
        "signature": {
          "args": [
            "callback"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_command_from_info",
        "content": "def get_command_from_info(\n    command_info: CommandInfo,\n    *,\n    pretty_exceptions_short: bool,\n    rich_markup_mode: MarkupMode,\n) -> click.Command:\n    assert command_info.callback, \"A command must have a callback function\"\n    name = command_info.name or get_command_name(command_info.callback.__name__)\n    use_help = command_info.help\n    if use_help is None:\n        use_help = inspect.getdoc(command_info.callback)\n    else:\n        use_help = inspect.cleandoc(use_help)\n    (\n        params,\n        convertors,\n        context_param_name,\n    ) = get_params_convertors_ctx_param_name_from_function(command_info.callback)\n    cls = command_info.cls or TyperCommand\n    command = cls(\n        name=name,\n        context_settings=command_info.context_settings,\n        callback=get_callback(\n            callback=command_info.callback,\n            params=params,\n            convertors=convertors,\n            context_param_name=context_param_name,\n            pretty_exceptions_short=pretty_exceptions_short,\n        ),\n        params=params,  # type: ignore\n        help=use_help,\n        epilog=command_info.epilog,\n        short_help=command_info.short_help,\n        options_metavar=command_info.options_metavar,\n        add_help_option=command_info.add_help_option,\n        no_args_is_help=command_info.no_args_is_help,\n        hidden=command_info.hidden,\n        deprecated=command_info.deprecated,\n        rich_markup_mode=rich_markup_mode,\n        # Rich settings\n        rich_help_panel=command_info.rich_help_panel,\n    )\n    return command",
        "signature": {
          "args": [
            "command_info"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "determine_type_convertor",
        "content": "def determine_type_convertor(type_: Any) -> Optional[Callable[[Any], Any]]:\n    convertor: Optional[Callable[[Any], Any]] = None\n    if lenient_issubclass(type_, Path):\n        convertor = param_path_convertor\n    if lenient_issubclass(type_, Enum):\n        convertor = generate_enum_convertor(type_)\n    return convertor",
        "signature": {
          "args": [
            "type_"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "param_path_convertor",
        "content": "def param_path_convertor(value: Optional[str] = None) -> Optional[Path]:\n    if value is not None:\n        # allow returning any subclass of Path created by an annotated parser without converting\n        # it back to a Path\n        return value if isinstance(value, Path) else Path(value)\n    return None",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      },
      {
        "name": "generate_enum_convertor",
        "content": "def generate_enum_convertor(enum: Type[Enum]) -> Callable[[Any], Any]:\n    val_map = {str(val.value): val for val in enum}\n\n    def convertor(value: Any) -> Any:\n        if value is not None:\n            val = str(value)\n            if val in val_map:\n                key = val_map[val]\n                return enum(key)\n\n    return convertor",
        "signature": {
          "args": [
            "enum"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "convertor",
        "content": "    def convertor(value: Any) -> Any:\n        if value is not None:\n            val = str(value)\n            if val in val_map:\n                key = val_map[val]\n                return enum(key)",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "generate_list_convertor",
        "content": "def generate_list_convertor(\n    convertor: Optional[Callable[[Any], Any]], default_value: Optional[Any]\n) -> Callable[[Optional[Sequence[Any]]], Optional[List[Any]]]:\n    def internal_convertor(value: Optional[Sequence[Any]]) -> Optional[List[Any]]:\n        if value is None or len(value) == 0:\n            return default_value\n        return [convertor(v) if convertor else v for v in value]\n\n    return internal_convertor",
        "signature": {
          "args": [
            "convertor",
            "default_value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "internal_convertor",
        "content": "    def internal_convertor(value: Optional[Sequence[Any]]) -> Optional[List[Any]]:\n        if value is None or len(value) == 0:\n            return default_value\n        return [convertor(v) if convertor else v for v in value]",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "generate_tuple_convertor",
        "content": "def generate_tuple_convertor(\n    types: Sequence[Any],\n) -> Callable[[Optional[Tuple[Any, ...]]], Optional[Tuple[Any, ...]]]:\n    convertors = [determine_type_convertor(type_) for type_ in types]\n\n    def internal_convertor(\n        param_args: Optional[Tuple[Any, ...]],\n    ) -> Optional[Tuple[Any, ...]]:\n        if param_args is None:\n            return None\n        return tuple(\n            convertor(arg) if convertor else arg\n            for (convertor, arg) in zip(convertors, param_args)\n        )\n\n    return internal_convertor",
        "signature": {
          "args": [
            "types"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "internal_convertor",
        "content": "    def internal_convertor(\n        param_args: Optional[Tuple[Any, ...]],\n    ) -> Optional[Tuple[Any, ...]]:\n        if param_args is None:\n            return None\n        return tuple(\n            convertor(arg) if convertor else arg\n            for (convertor, arg) in zip(convertors, param_args)\n        )",
        "signature": {
          "args": [
            "param_args"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_callback",
        "content": "def get_callback(\n    *,\n    callback: Optional[Callable[..., Any]] = None,\n    params: Sequence[click.Parameter] = [],\n    convertors: Optional[Dict[str, Callable[[str], Any]]] = None,\n    context_param_name: Optional[str] = None,\n    pretty_exceptions_short: bool,\n) -> Optional[Callable[..., Any]]:\n    use_convertors = convertors or {}\n    if not callback:\n        return None\n    parameters = get_params_from_function(callback)\n    use_params: Dict[str, Any] = {}\n    for param_name in parameters:\n        use_params[param_name] = None\n    for param in params:\n        if param.name:\n            use_params[param.name] = param.default\n\n    def wrapper(**kwargs: Any) -> Any:\n        _rich_traceback_guard = pretty_exceptions_short  # noqa: F841\n        for k, v in kwargs.items():\n            if k in use_convertors:\n                use_params[k] = use_convertors[k](v)\n            else:\n                use_params[k] = v\n        if context_param_name:\n            use_params[context_param_name] = click.get_current_context()\n        return callback(**use_params)\n\n    update_wrapper(wrapper, callback)\n    return wrapper",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "wrapper",
        "content": "    def wrapper(**kwargs: Any) -> Any:\n        _rich_traceback_guard = pretty_exceptions_short  # noqa: F841\n        for k, v in kwargs.items():\n            if k in use_convertors:\n                use_params[k] = use_convertors[k](v)\n            else:\n                use_params[k] = v\n        if context_param_name:\n            use_params[context_param_name] = click.get_current_context()\n        return callback(**use_params)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_click_type",
        "content": "def get_click_type(\n    *, annotation: Any, parameter_info: ParameterInfo\n) -> click.ParamType:\n    if parameter_info.click_type is not None:\n        return parameter_info.click_type\n\n    elif parameter_info.parser is not None:\n        return click.types.FuncParamType(parameter_info.parser)\n\n    elif annotation is str:\n        return click.STRING\n    elif annotation is int:\n        if parameter_info.min is not None or parameter_info.max is not None:\n            min_ = None\n            max_ = None\n            if parameter_info.min is not None:\n                min_ = int(parameter_info.min)\n            if parameter_info.max is not None:\n                max_ = int(parameter_info.max)\n            return click.IntRange(min=min_, max=max_, clamp=parameter_info.clamp)\n        else:\n            return click.INT\n    elif annotation is float:\n        if parameter_info.min is not None or parameter_info.max is not None:\n            return click.FloatRange(\n                min=parameter_info.min,\n                max=parameter_info.max,\n                clamp=parameter_info.clamp,\n            )\n        else:\n            return click.FLOAT\n    elif annotation is bool:\n        return click.BOOL\n    elif annotation == UUID:\n        return click.UUID\n    elif annotation == datetime:\n        return click.DateTime(formats=parameter_info.formats)\n    elif (\n        annotation == Path\n        or parameter_info.allow_dash\n        or parameter_info.path_type\n        or parameter_info.resolve_path\n    ):\n        return TyperPath(\n            exists=parameter_info.exists,\n            file_okay=parameter_info.file_okay,\n            dir_okay=parameter_info.dir_okay,\n            writable=parameter_info.writable,\n            readable=parameter_info.readable,\n            resolve_path=parameter_info.resolve_path,\n            allow_dash=parameter_info.allow_dash,\n            path_type=parameter_info.path_type,\n        )\n    elif lenient_issubclass(annotation, FileTextWrite):\n        return click.File(\n            mode=parameter_info.mode or \"w\",\n            encoding=parameter_info.encoding,\n            errors=parameter_info.errors,\n            lazy=parameter_info.lazy,\n            atomic=parameter_info.atomic,\n        )\n    elif lenient_issubclass(annotation, FileText):\n        return click.File(\n            mode=parameter_info.mode or \"r\",\n            encoding=parameter_info.encoding,\n            errors=parameter_info.errors,\n            lazy=parameter_info.lazy,\n            atomic=parameter_info.atomic,\n        )\n    elif lenient_issubclass(annotation, FileBinaryRead):\n        return click.File(\n            mode=parameter_info.mode or \"rb\",\n            encoding=parameter_info.encoding,\n            errors=parameter_info.errors,\n            lazy=parameter_info.lazy,\n            atomic=parameter_info.atomic,\n        )\n    elif lenient_issubclass(annotation, FileBinaryWrite):\n        return click.File(\n            mode=parameter_info.mode or \"wb\",\n            encoding=parameter_info.encoding,\n            errors=parameter_info.errors,\n            lazy=parameter_info.lazy,\n            atomic=parameter_info.atomic,\n        )\n    elif lenient_issubclass(annotation, Enum):\n        # The custom TyperChoice is only needed for Click < 8.2.0, to parse the\n        # command line values matching them to the enum values. Click 8.2.0 added\n        # support for enum values but reading enum names.\n        # Passing here the list of enum values (instead of just the enum) accounts for\n        # Click < 8.2.0.\n        return TyperChoice(\n            [item.value for item in annotation],\n            case_sensitive=parameter_info.case_sensitive,\n        )\n    elif is_literal_type(annotation):\n        return click.Choice(\n            literal_values(annotation),\n            case_sensitive=parameter_info.case_sensitive,\n        )\n    raise RuntimeError(f\"Type not yet supported: {annotation}\")  # pragma: no cover",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "lenient_issubclass",
        "content": "def lenient_issubclass(\n    cls: Any, class_or_tuple: Union[AnyType, Tuple[AnyType, ...]]\n) -> bool:\n    return isinstance(cls, type) and issubclass(cls, class_or_tuple)",
        "signature": {
          "args": [
            "cls",
            "class_or_tuple"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_click_param",
        "content": "def get_click_param(\n    param: ParamMeta,\n) -> Tuple[Union[click.Argument, click.Option], Any]:\n    # First, find out what will be:\n    # * ParamInfo (ArgumentInfo or OptionInfo)\n    # * default_value\n    # * required\n    default_value = None\n    required = False\n    if isinstance(param.default, ParameterInfo):\n        parameter_info = param.default\n        if parameter_info.default == Required:\n            required = True\n        else:\n            default_value = parameter_info.default\n    elif param.default == Required or param.default is param.empty:\n        required = True\n        parameter_info = ArgumentInfo()\n    else:\n        default_value = param.default\n        parameter_info = OptionInfo()\n    annotation: Any\n    if param.annotation is not param.empty:\n        annotation = param.annotation\n    else:\n        annotation = str\n    main_type = annotation\n    is_list = False\n    is_tuple = False\n    parameter_type: Any = None\n    is_flag = None\n    origin = get_origin(main_type)\n\n    if origin is not None:\n        # Handle SomeType | None and Optional[SomeType]\n        if is_union(origin):\n            types = []\n            for type_ in get_args(main_type):\n                if type_ is NoneType:\n                    continue\n                types.append(type_)\n            assert len(types) == 1, \"Typer Currently doesn't support Union types\"\n            main_type = types[0]\n            origin = get_origin(main_type)\n        # Handle Tuples and Lists\n        if lenient_issubclass(origin, List):\n            main_type = get_args(main_type)[0]\n            assert not get_origin(main_type), (\n                \"List types with complex sub-types are not currently supported\"\n            )\n            is_list = True\n        elif lenient_issubclass(origin, Tuple):  # type: ignore\n            types = []\n            for type_ in get_args(main_type):\n                assert not get_origin(type_), (\n                    \"Tuple types with complex sub-types are not currently supported\"\n                )\n                types.append(\n                    get_click_type(annotation=type_, parameter_info=parameter_info)\n                )\n            parameter_type = tuple(types)\n            is_tuple = True\n    if parameter_type is None:\n        parameter_type = get_click_type(\n            annotation=main_type, parameter_info=parameter_info\n        )\n    convertor = determine_type_convertor(main_type)\n    if is_list:\n        convertor = generate_list_convertor(\n            convertor=convertor, default_value=default_value\n        )\n    if is_tuple:\n        convertor = generate_tuple_convertor(get_args(main_type))\n    if isinstance(parameter_info, OptionInfo):\n        if main_type is bool:\n            is_flag = True\n            # Click doesn't accept a flag of type bool, only None, and then it sets it\n            # to bool internally\n            parameter_type = None\n        default_option_name = get_command_name(param.name)\n        if is_flag:\n            default_option_declaration = (\n                f\"--{default_option_name}/--no-{default_option_name}\"\n            )\n        else:\n            default_option_declaration = f\"--{default_option_name}\"\n        param_decls = [param.name]\n        if parameter_info.param_decls:\n            param_decls.extend(parameter_info.param_decls)\n        else:\n            param_decls.append(default_option_declaration)\n        return (\n            TyperOption(\n                # Option\n                param_decls=param_decls,\n                show_default=parameter_info.show_default,\n                prompt=parameter_info.prompt,\n                confirmation_prompt=parameter_info.confirmation_prompt,\n                prompt_required=parameter_info.prompt_required,\n                hide_input=parameter_info.hide_input,\n                is_flag=is_flag,\n                multiple=is_list,\n                count=parameter_info.count,\n                allow_from_autoenv=parameter_info.allow_from_autoenv,\n                type=parameter_type,\n                help=parameter_info.help,\n                hidden=parameter_info.hidden,\n                show_choices=parameter_info.show_choices,\n                show_envvar=parameter_info.show_envvar,\n                # Parameter\n                required=required,\n                default=default_value,\n                callback=get_param_callback(\n                    callback=parameter_info.callback, convertor=convertor\n                ),\n                metavar=parameter_info.metavar,\n                expose_value=parameter_info.expose_value,\n                is_eager=parameter_info.is_eager,\n                envvar=parameter_info.envvar,\n                shell_complete=parameter_info.shell_complete,\n                autocompletion=get_param_completion(parameter_info.autocompletion),\n                # Rich settings\n                rich_help_panel=parameter_info.rich_help_panel,\n            ),\n            convertor,\n        )\n    elif isinstance(parameter_info, ArgumentInfo):\n        param_decls = [param.name]\n        nargs = None\n        if is_list:\n            nargs = -1\n        return (\n            TyperArgument(\n                # Argument\n                param_decls=param_decls,\n                type=parameter_type,\n                required=required,\n                nargs=nargs,\n                # TyperArgument\n                show_default=parameter_info.show_default,\n                show_choices=parameter_info.show_choices,\n                show_envvar=parameter_info.show_envvar,\n                help=parameter_info.help,\n                hidden=parameter_info.hidden,\n                # Parameter\n                default=default_value,\n                callback=get_param_callback(\n                    callback=parameter_info.callback, convertor=convertor\n                ),\n                metavar=parameter_info.metavar,\n                expose_value=parameter_info.expose_value,\n                is_eager=parameter_info.is_eager,\n                envvar=parameter_info.envvar,\n                shell_complete=parameter_info.shell_complete,\n                autocompletion=get_param_completion(parameter_info.autocompletion),\n                # Rich settings\n                rich_help_panel=parameter_info.rich_help_panel,\n            ),\n            convertor,\n        )\n    raise AssertionError(\"A click.Parameter should be returned\")  # pragma: no cover",
        "signature": {
          "args": [
            "param"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_param_callback",
        "content": "def get_param_callback(\n    *,\n    callback: Optional[Callable[..., Any]] = None,\n    convertor: Optional[Callable[..., Any]] = None,\n) -> Optional[Callable[..., Any]]:\n    if not callback:\n        return None\n    parameters = get_params_from_function(callback)\n    ctx_name = None\n    click_param_name = None\n    value_name = None\n    untyped_names: List[str] = []\n    for param_name, param_sig in parameters.items():\n        if lenient_issubclass(param_sig.annotation, click.Context):\n            ctx_name = param_name\n        elif lenient_issubclass(param_sig.annotation, click.Parameter):\n            click_param_name = param_name\n        else:\n            untyped_names.append(param_name)\n    # Extract value param name first\n    if untyped_names:\n        value_name = untyped_names.pop()\n    # If context and Click param were not typed (old/Click callback style) extract them\n    if untyped_names:\n        if ctx_name is None:\n            ctx_name = untyped_names.pop(0)\n        if click_param_name is None:\n            if untyped_names:\n                click_param_name = untyped_names.pop(0)\n        if untyped_names:\n            raise click.ClickException(\n                \"Too many CLI parameter callback function parameters\"\n            )\n\n    def wrapper(ctx: click.Context, param: click.Parameter, value: Any) -> Any:\n        use_params: Dict[str, Any] = {}\n        if ctx_name:\n            use_params[ctx_name] = ctx\n        if click_param_name:\n            use_params[click_param_name] = param\n        if value_name:\n            if convertor:\n                use_value = convertor(value)\n            else:\n                use_value = value\n            use_params[value_name] = use_value\n        return callback(**use_params)\n\n    update_wrapper(wrapper, callback)\n    return wrapper",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "wrapper",
        "content": "    def wrapper(ctx: click.Context, param: click.Parameter, value: Any) -> Any:\n        use_params: Dict[str, Any] = {}\n        if ctx_name:\n            use_params[ctx_name] = ctx\n        if click_param_name:\n            use_params[click_param_name] = param\n        if value_name:\n            if convertor:\n                use_value = convertor(value)\n            else:\n                use_value = value\n            use_params[value_name] = use_value\n        return callback(**use_params)",
        "signature": {
          "args": [
            "ctx",
            "param",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_param_completion",
        "content": "def get_param_completion(\n    callback: Optional[Callable[..., Any]] = None,\n) -> Optional[Callable[..., Any]]:\n    if not callback:\n        return None\n    parameters = get_params_from_function(callback)\n    ctx_name = None\n    args_name = None\n    incomplete_name = None\n    unassigned_params = list(parameters.values())\n    for param_sig in unassigned_params[:]:\n        origin = get_origin(param_sig.annotation)\n        if lenient_issubclass(param_sig.annotation, click.Context):\n            ctx_name = param_sig.name\n            unassigned_params.remove(param_sig)\n        elif lenient_issubclass(origin, List):\n            args_name = param_sig.name\n            unassigned_params.remove(param_sig)\n        elif lenient_issubclass(param_sig.annotation, str):\n            incomplete_name = param_sig.name\n            unassigned_params.remove(param_sig)\n    # If there are still unassigned parameters (not typed), extract by name\n    for param_sig in unassigned_params[:]:\n        if ctx_name is None and param_sig.name == \"ctx\":\n            ctx_name = param_sig.name\n            unassigned_params.remove(param_sig)\n        elif args_name is None and param_sig.name == \"args\":\n            args_name = param_sig.name\n            unassigned_params.remove(param_sig)\n        elif incomplete_name is None and param_sig.name == \"incomplete\":\n            incomplete_name = param_sig.name\n            unassigned_params.remove(param_sig)\n    # Extract value param name first\n    if unassigned_params:\n        show_params = \" \".join([param.name for param in unassigned_params])\n        raise click.ClickException(\n            f\"Invalid autocompletion callback parameters: {show_params}\"\n        )\n\n    def wrapper(ctx: click.Context, args: List[str], incomplete: Optional[str]) -> Any:\n        use_params: Dict[str, Any] = {}\n        if ctx_name:\n            use_params[ctx_name] = ctx\n        if args_name:\n            use_params[args_name] = args\n        if incomplete_name:\n            use_params[incomplete_name] = incomplete\n        return callback(**use_params)\n\n    update_wrapper(wrapper, callback)\n    return wrapper",
        "signature": {
          "args": [
            "callback"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      },
      {
        "name": "wrapper",
        "content": "    def wrapper(ctx: click.Context, args: List[str], incomplete: Optional[str]) -> Any:\n        use_params: Dict[str, Any] = {}\n        if ctx_name:\n            use_params[ctx_name] = ctx\n        if args_name:\n            use_params[args_name] = args\n        if incomplete_name:\n            use_params[incomplete_name] = incomplete\n        return callback(**use_params)",
        "signature": {
          "args": [
            "ctx",
            "args",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "run",
        "content": "def run(function: Callable[..., Any]) -> None:\n    app = Typer(add_completion=False)\n    app.command()(function)\n    app()",
        "signature": {
          "args": [
            "function"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_is_macos",
        "content": "def _is_macos() -> bool:\n    return platform.system() == \"Darwin\"",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_is_linux_or_bsd",
        "content": "def _is_linux_or_bsd() -> bool:\n    if platform.system() == \"Linux\":\n        return True\n\n    return \"BSD\" in platform.system()",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "launch",
        "content": "def launch(url: str, wait: bool = False, locate: bool = False) -> int:\n    \"\"\"This function launches the given URL (or filename) in the default\n    viewer application for this file type.  If this is an executable, it\n    might launch the executable in a new session.  The return value is\n    the exit code of the launched application.  Usually, ``0`` indicates\n    success.\n\n    This function handles url in different operating systems separately:\n    - On macOS (Darwin), it uses the 'open' command.\n    - On Linux and BSD, it uses 'xdg-open' if available.\n    - On Windows (and other OSes), it uses the standard webbrowser module.\n\n    The function avoids, when possible, using the webbrowser module on Linux and macOS\n    to prevent spammy terminal messages from some browsers (e.g., Chrome).\n\n    Examples::\n\n        typer.launch(\"https://typer.tiangolo.com/\")\n        typer.launch(\"/my/downloaded/file\", locate=True)\n\n    :param url: URL or filename of the thing to launch.\n    :param wait: Wait for the program to exit before returning. This\n        only works if the launched program blocks. In particular,\n        ``xdg-open`` on Linux does not block.\n    :param locate: if this is set to `True` then instead of launching the\n                   application associated with the URL it will attempt to\n                   launch a file manager with the file located.  This\n                   might have weird effects if the URL does not point to\n                   the filesystem.\n    \"\"\"\n\n    if url.startswith(\"http://\") or url.startswith(\"https://\"):\n        if _is_macos():\n            return subprocess.Popen(\n                [\"open\", url], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT\n            ).wait()\n\n        has_xdg_open = _is_linux_or_bsd() and shutil.which(\"xdg-open\") is not None\n\n        if has_xdg_open:\n            return subprocess.Popen(\n                [\"xdg-open\", url], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT\n            ).wait()\n\n        import webbrowser\n\n        webbrowser.open(url)\n\n        return 0\n\n    else:\n        return click.launch(url)",
        "signature": {
          "args": [
            "url",
            "wait",
            "locate"
          ],
          "defaults": [
            "False",
            "False"
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "getenv",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "_original_except_hook",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "dirname",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "dirname",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "get_traceback",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "_get_rich_console",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "from_exception",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "any",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "FrameSummary",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "from_list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "except_hook",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_install_completion_arguments",
        "caller_class": null,
        "called_function": "get_completion_inspect_parameters",
        "called_function_files": [
          "typer/completion.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_install_completion_arguments",
        "caller_class": null,
        "called_function": "get_click_param",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_install_completion_arguments",
        "caller_class": null,
        "called_function": "get_click_param",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "Typer",
        "called_function": "TyperInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "callback",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "decorator",
        "caller_class": "Typer",
        "called_function": "TyperInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "command",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "decorator",
        "caller_class": "Typer",
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "decorator",
        "caller_class": "Typer",
        "called_function": "CommandInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "add_typer",
        "caller_class": "Typer",
        "called_function": "TyperInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__call__",
        "caller_class": "Typer",
        "called_function": "get_command",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__call__",
        "caller_class": "Typer",
        "called_function": "setattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__call__",
        "caller_class": "Typer",
        "called_function": "DeveloperExceptionConfig",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_group",
        "caller_class": null,
        "called_function": "get_group_from_info",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_group",
        "caller_class": null,
        "called_function": "TyperInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "get_install_completion_arguments",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "get_group",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "get_command_from_info",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command",
        "caller_class": null,
        "called_function": "RuntimeError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "cleandoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "cleandoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "cleandoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "getdoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "getdoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_help",
        "caller_class": null,
        "called_function": "getdoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_defaults",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_defaults",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_defaults",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_defaults",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_defaults",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_defaults",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_defaults",
        "caller_class": null,
        "called_function": "solve_typer_info_help",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "solve_typer_info_defaults",
        "caller_class": null,
        "called_function": "TyperInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "get_command_from_info",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "get_group_from_info",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "warn",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "solve_typer_info_defaults",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "get_params_convertors_ctx_param_name_from_function",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "issubclass",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "cls",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_group_from_info",
        "caller_class": null,
        "called_function": "get_callback",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_command_name",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command_name",
        "caller_class": null,
        "called_function": "lower",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_convertors_ctx_param_name_from_function",
        "caller_class": null,
        "called_function": "get_params_from_function",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_convertors_ctx_param_name_from_function",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_convertors_ctx_param_name_from_function",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_convertors_ctx_param_name_from_function",
        "caller_class": null,
        "called_function": "get_click_param",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_convertors_ctx_param_name_from_function",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command_from_info",
        "caller_class": null,
        "called_function": "get_command_name",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_command_from_info",
        "caller_class": null,
        "called_function": "getdoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command_from_info",
        "caller_class": null,
        "called_function": "cleandoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command_from_info",
        "caller_class": null,
        "called_function": "get_params_convertors_ctx_param_name_from_function",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_command_from_info",
        "caller_class": null,
        "called_function": "cls",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_command_from_info",
        "caller_class": null,
        "called_function": "get_callback",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "determine_type_convertor",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "determine_type_convertor",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "determine_type_convertor",
        "caller_class": null,
        "called_function": "generate_enum_convertor",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "param_path_convertor",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "param_path_convertor",
        "caller_class": null,
        "called_function": "Path",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "generate_enum_convertor",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "convertor",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "convertor",
        "caller_class": null,
        "called_function": "enum",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "internal_convertor",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "internal_convertor",
        "caller_class": null,
        "called_function": "convertor",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "generate_tuple_convertor",
        "caller_class": null,
        "called_function": "determine_type_convertor",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "internal_convertor",
        "caller_class": null,
        "called_function": "tuple",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "internal_convertor",
        "caller_class": null,
        "called_function": "convertor",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "internal_convertor",
        "caller_class": null,
        "called_function": "zip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_callback",
        "caller_class": null,
        "called_function": "get_params_from_function",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "wrapper",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "wrapper",
        "caller_class": null,
        "called_function": "get_current_context",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "wrapper",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "FuncParamType",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "int",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "IntRange",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "FloatRange",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "DateTime",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "TyperPath",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "File",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "File",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "File",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "File",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "TyperChoice",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "is_literal_type",
        "called_function_files": [
          "typer/_typing.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "Choice",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "literal_values",
        "called_function_files": [
          "typer/_typing.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_type",
        "caller_class": null,
        "called_function": "RuntimeError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "lenient_issubclass",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "lenient_issubclass",
        "caller_class": null,
        "called_function": "issubclass",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "ArgumentInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "OptionInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_origin",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "is_union",
        "called_function_files": [
          "typer/_typing.py",
          "typer/_typing.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_args",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_origin",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_args",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_origin",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_args",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_origin",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_click_type",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "tuple",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_click_type",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "determine_type_convertor",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "generate_list_convertor",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "generate_tuple_convertor",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_args",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_command_name",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "extend",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "TyperOption",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_param_callback",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_param_completion",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "TyperArgument",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_param_callback",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "get_param_completion",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_click_param",
        "caller_class": null,
        "called_function": "AssertionError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "get_params_from_function",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "pop",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "pop",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "pop",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_callback",
        "caller_class": null,
        "called_function": "ClickException",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "wrapper",
        "caller_class": null,
        "called_function": "convertor",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "wrapper",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "get_params_from_function",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "list",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "values",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "get_origin",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "remove",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "remove",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "lenient_issubclass",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "remove",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "remove",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "remove",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "remove",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_param_completion",
        "caller_class": null,
        "called_function": "ClickException",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "wrapper",
        "caller_class": null,
        "called_function": "callback",
        "called_function_files": [
          "docs_src/commands/callback/tutorial002.py",
          "docs_src/commands/callback/tutorial003.py",
          "docs_src/commands/callback/tutorial004.py",
          "docs_src/commands/one_or_multiple/tutorial001.py",
          "docs_src/commands/one_or_multiple/tutorial002.py",
          "docs_src/using_click/tutorial003.py",
          "scripts/docs.py",
          "tests/assets/cli/app_other_name.py",
          "tests/test_callback_warning.py",
          "tests/test_callback_warning.py",
          "typer/cli.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "run",
        "caller_class": null,
        "called_function": "Typer",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "run",
        "caller_class": null,
        "called_function": "command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "run",
        "caller_class": null,
        "called_function": "app",
        "called_function_files": [
          "tests/test_tutorial/test_subcommands/test_tutorial001.py",
          "tests/test_tutorial/test_subcommands/test_tutorial003.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_is_macos",
        "caller_class": null,
        "called_function": "system",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_is_linux_or_bsd",
        "caller_class": null,
        "called_function": "system",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_is_linux_or_bsd",
        "caller_class": null,
        "called_function": "system",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "_is_macos",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "wait",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "Popen",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "_is_linux_or_bsd",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "which",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "wait",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "Popen",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "open",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "launch",
        "caller_class": null,
        "called_function": "launch",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        name: Optional[str] = Default(None),\n        cls: Optional[Type[TyperGroup]] = Default(None),\n        invoke_without_command: bool = Default(False),\n        no_args_is_help: bool = Default(False),\n        subcommand_metavar: Optional[str] = Default(None),\n        chain: bool = Default(False),\n        result_callback: Optional[Callable[..., Any]] = Default(None),\n        # Command\n        context_settings: Optional[Dict[Any, Any]] = Default(None),\n        callback: Optional[Callable[..., Any]] = Default(None),\n        help: Optional[str] = Default(None),\n        epilog: Optional[str] = Default(None),\n        short_help: Optional[str] = Default(None),\n        options_metavar: str = Default(\"[OPTIONS]\"),\n        add_help_option: bool = Default(True),\n        hidden: bool = Default(False),\n        deprecated: bool = Default(False),\n        add_completion: bool = True,\n        # Rich settings\n        rich_markup_mode: MarkupMode = Default(DEFAULT_MARKUP_MODE),\n        rich_help_panel: Union[str, None] = Default(None),\n        pretty_exceptions_enable: bool = True,\n        pretty_exceptions_show_locals: bool = True,\n        pretty_exceptions_short: bool = True,\n    ):\n        self._add_completion = add_completion\n        self.rich_markup_mode: MarkupMode = rich_markup_mode\n        self.rich_help_panel = rich_help_panel\n        self.pretty_exceptions_enable = pretty_exceptions_enable\n        self.pretty_exceptions_show_locals = pretty_exceptions_show_locals\n        self.pretty_exceptions_short = pretty_exceptions_short\n        self.info = TyperInfo(\n            name=name,\n            cls=cls,\n            invoke_without_command=invoke_without_command,\n            no_args_is_help=no_args_is_help,\n            subcommand_metavar=subcommand_metavar,\n            chain=chain,\n            result_callback=result_callback,\n            context_settings=context_settings,\n            callback=callback,\n            help=help,\n            epilog=epilog,\n            short_help=short_help,\n            options_metavar=options_metavar,\n            add_help_option=add_help_option,\n            hidden=hidden,\n            deprecated=deprecated,\n        )\n        self.registered_groups: List[TyperInfo] = []\n        self.registered_commands: List[CommandInfo] = []\n        self.registered_callback: Optional[TyperInfo] = None",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "callback",
        "content": "    def callback(\n        self,\n        *,\n        cls: Optional[Type[TyperGroup]] = Default(None),\n        invoke_without_command: bool = Default(False),\n        no_args_is_help: bool = Default(False),\n        subcommand_metavar: Optional[str] = Default(None),\n        chain: bool = Default(False),\n        result_callback: Optional[Callable[..., Any]] = Default(None),\n        # Command\n        context_settings: Optional[Dict[Any, Any]] = Default(None),\n        help: Optional[str] = Default(None),\n        epilog: Optional[str] = Default(None),\n        short_help: Optional[str] = Default(None),\n        options_metavar: str = Default(\"[OPTIONS]\"),\n        add_help_option: bool = Default(True),\n        hidden: bool = Default(False),\n        deprecated: bool = Default(False),\n        # Rich settings\n        rich_help_panel: Union[str, None] = Default(None),\n    ) -> Callable[[CommandFunctionType], CommandFunctionType]:\n        def decorator(f: CommandFunctionType) -> CommandFunctionType:\n            self.registered_callback = TyperInfo(\n                cls=cls,\n                invoke_without_command=invoke_without_command,\n                no_args_is_help=no_args_is_help,\n                subcommand_metavar=subcommand_metavar,\n                chain=chain,\n                result_callback=result_callback,\n                context_settings=context_settings,\n                callback=f,\n                help=help,\n                epilog=epilog,\n                short_help=short_help,\n                options_metavar=options_metavar,\n                add_help_option=add_help_option,\n                hidden=hidden,\n                deprecated=deprecated,\n                rich_help_panel=rich_help_panel,\n            )\n            return f\n\n        return decorator",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "command",
        "content": "    def command(\n        self,\n        name: Optional[str] = None,\n        *,\n        cls: Optional[Type[TyperCommand]] = None,\n        context_settings: Optional[Dict[Any, Any]] = None,\n        help: Optional[str] = None,\n        epilog: Optional[str] = None,\n        short_help: Optional[str] = None,\n        options_metavar: str = \"[OPTIONS]\",\n        add_help_option: bool = True,\n        no_args_is_help: bool = False,\n        hidden: bool = False,\n        deprecated: bool = False,\n        # Rich settings\n        rich_help_panel: Union[str, None] = Default(None),\n    ) -> Callable[[CommandFunctionType], CommandFunctionType]:\n        if cls is None:\n            cls = TyperCommand\n\n        def decorator(f: CommandFunctionType) -> CommandFunctionType:\n            self.registered_commands.append(\n                CommandInfo(\n                    name=name,\n                    cls=cls,\n                    context_settings=context_settings,\n                    callback=f,\n                    help=help,\n                    epilog=epilog,\n                    short_help=short_help,\n                    options_metavar=options_metavar,\n                    add_help_option=add_help_option,\n                    no_args_is_help=no_args_is_help,\n                    hidden=hidden,\n                    deprecated=deprecated,\n                    # Rich settings\n                    rich_help_panel=rich_help_panel,\n                )\n            )\n            return f\n\n        return decorator",
        "signature": {
          "args": [
            "self",
            "name"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      },
      {
        "name": "add_typer",
        "content": "    def add_typer(\n        self,\n        typer_instance: \"Typer\",\n        *,\n        name: Optional[str] = Default(None),\n        cls: Optional[Type[TyperGroup]] = Default(None),\n        invoke_without_command: bool = Default(False),\n        no_args_is_help: bool = Default(False),\n        subcommand_metavar: Optional[str] = Default(None),\n        chain: bool = Default(False),\n        result_callback: Optional[Callable[..., Any]] = Default(None),\n        # Command\n        context_settings: Optional[Dict[Any, Any]] = Default(None),\n        callback: Optional[Callable[..., Any]] = Default(None),\n        help: Optional[str] = Default(None),\n        epilog: Optional[str] = Default(None),\n        short_help: Optional[str] = Default(None),\n        options_metavar: str = Default(\"[OPTIONS]\"),\n        add_help_option: bool = Default(True),\n        hidden: bool = Default(False),\n        deprecated: bool = Default(False),\n        # Rich settings\n        rich_help_panel: Union[str, None] = Default(None),\n    ) -> None:\n        self.registered_groups.append(\n            TyperInfo(\n                typer_instance,\n                name=name,\n                cls=cls,\n                invoke_without_command=invoke_without_command,\n                no_args_is_help=no_args_is_help,\n                subcommand_metavar=subcommand_metavar,\n                chain=chain,\n                result_callback=result_callback,\n                context_settings=context_settings,\n                callback=callback,\n                help=help,\n                epilog=epilog,\n                short_help=short_help,\n                options_metavar=options_metavar,\n                add_help_option=add_help_option,\n                hidden=hidden,\n                deprecated=deprecated,\n                rich_help_panel=rich_help_panel,\n            )\n        )",
        "signature": {
          "args": [
            "self",
            "typer_instance"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__call__",
        "content": "    def __call__(self, *args: Any, **kwargs: Any) -> Any:\n        if sys.excepthook != except_hook:\n            sys.excepthook = except_hook\n        try:\n            return get_command(self)(*args, **kwargs)\n        except Exception as e:\n            # Set a custom attribute to tell the hook to show nice exceptions for user\n            # code. An alternative/first implementation was a custom exception with\n            # raise custom_exc from e\n            # but that means the last error shown is the custom exception, not the\n            # actual error. This trick improves developer experience by showing the\n            # actual error last.\n            setattr(\n                e,\n                _typer_developer_exception_attr_name,\n                DeveloperExceptionConfig(\n                    pretty_exceptions_enable=self.pretty_exceptions_enable,\n                    pretty_exceptions_show_locals=self.pretty_exceptions_show_locals,\n                    pretty_exceptions_short=self.pretty_exceptions_short,\n                ),\n            )\n            raise e",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "typer/models.py",
    "type": "python",
    "imports": [
      {
        "module": "inspect",
        "type": "external"
      },
      {
        "module": "io",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "click.shell_completion",
        "type": "external"
      },
      {
        "module": "core",
        "type": "external"
      },
      {
        "module": "main",
        "type": "external"
      },
      {
        "module": "warnings",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "Context",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "click.Context"
        ]
      },
      {
        "name": "FileText",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "io.TextIOWrapper"
        ]
      },
      {
        "name": "FileTextWrite",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "FileText"
        ]
      },
      {
        "name": "FileBinaryRead",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "io.BufferedReader"
        ]
      },
      {
        "name": "FileBinaryWrite",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "io.BufferedWriter"
        ]
      },
      {
        "name": "CallbackParam",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "click.Parameter"
        ]
      },
      {
        "name": "DefaultPlaceholder",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self, value: Any):\n        self.value = value",
            "signature": {
              "args": [
                "self",
                "value"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__bool__",
            "content": "    def __bool__(self) -> bool:\n        return bool(self.value)",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "CommandInfo",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        name: Optional[str] = None,\n        *,\n        cls: Optional[Type[\"TyperCommand\"]] = None,\n        context_settings: Optional[Dict[Any, Any]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        help: Optional[str] = None,\n        epilog: Optional[str] = None,\n        short_help: Optional[str] = None,\n        options_metavar: str = \"[OPTIONS]\",\n        add_help_option: bool = True,\n        no_args_is_help: bool = False,\n        hidden: bool = False,\n        deprecated: bool = False,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        self.name = name\n        self.cls = cls\n        self.context_settings = context_settings\n        self.callback = callback\n        self.help = help\n        self.epilog = epilog\n        self.short_help = short_help\n        self.options_metavar = options_metavar\n        self.add_help_option = add_help_option\n        self.no_args_is_help = no_args_is_help\n        self.hidden = hidden\n        self.deprecated = deprecated\n        # Rich settings\n        self.rich_help_panel = rich_help_panel",
            "signature": {
              "args": [
                "self",
                "name"
              ],
              "defaults": [
                "None"
              ]
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "TyperInfo",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        typer_instance: Optional[\"Typer\"] = Default(None),\n        *,\n        name: Optional[str] = Default(None),\n        cls: Optional[Type[\"TyperGroup\"]] = Default(None),\n        invoke_without_command: bool = Default(False),\n        no_args_is_help: bool = Default(False),\n        subcommand_metavar: Optional[str] = Default(None),\n        chain: bool = Default(False),\n        result_callback: Optional[Callable[..., Any]] = Default(None),\n        # Command\n        context_settings: Optional[Dict[Any, Any]] = Default(None),\n        callback: Optional[Callable[..., Any]] = Default(None),\n        help: Optional[str] = Default(None),\n        epilog: Optional[str] = Default(None),\n        short_help: Optional[str] = Default(None),\n        options_metavar: str = Default(\"[OPTIONS]\"),\n        add_help_option: bool = Default(True),\n        hidden: bool = Default(False),\n        deprecated: bool = Default(False),\n        # Rich settings\n        rich_help_panel: Union[str, None] = Default(None),\n    ):\n        self.typer_instance = typer_instance\n        self.name = name\n        self.cls = cls\n        self.invoke_without_command = invoke_without_command\n        self.no_args_is_help = no_args_is_help\n        self.subcommand_metavar = subcommand_metavar\n        self.chain = chain\n        self.result_callback = result_callback\n        self.context_settings = context_settings\n        self.callback = callback\n        self.help = help\n        self.epilog = epilog\n        self.short_help = short_help\n        self.options_metavar = options_metavar\n        self.add_help_option = add_help_option\n        self.hidden = hidden\n        self.deprecated = deprecated\n        self.rich_help_panel = rich_help_panel",
            "signature": {
              "args": [
                "self",
                "typer_instance"
              ],
              "defaults": [
                "Default(None)"
              ]
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "ParameterInfo",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        default: Optional[Any] = None,\n        param_decls: Optional[Sequence[str]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        default_factory: Optional[Callable[[], Any]] = None,\n        # Custom type\n        parser: Optional[Callable[[str], Any]] = None,\n        click_type: Optional[click.ParamType] = None,\n        # TyperArgument\n        show_default: Union[bool, str] = True,\n        show_choices: bool = True,\n        show_envvar: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        # Choice\n        case_sensitive: bool = True,\n        # Numbers\n        min: Optional[Union[int, float]] = None,\n        max: Optional[Union[int, float]] = None,\n        clamp: bool = False,\n        # DateTime\n        formats: Optional[List[str]] = None,\n        # File\n        mode: Optional[str] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = \"strict\",\n        lazy: Optional[bool] = None,\n        atomic: bool = False,\n        # Path\n        exists: bool = False,\n        file_okay: bool = True,\n        dir_okay: bool = True,\n        writable: bool = False,\n        readable: bool = True,\n        resolve_path: bool = False,\n        allow_dash: bool = False,\n        path_type: Union[None, Type[str], Type[bytes]] = None,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        # Check if user has provided multiple custom parsers\n        if parser and click_type:\n            raise ValueError(\n                \"Multiple custom type parsers provided. \"\n                \"`parser` and `click_type` may not both be provided.\"\n            )\n\n        self.default = default\n        self.param_decls = param_decls\n        self.callback = callback\n        self.metavar = metavar\n        self.expose_value = expose_value\n        self.is_eager = is_eager\n        self.envvar = envvar\n        self.shell_complete = shell_complete\n        self.autocompletion = autocompletion\n        self.default_factory = default_factory\n        # Custom type\n        self.parser = parser\n        self.click_type = click_type\n        # TyperArgument\n        self.show_default = show_default\n        self.show_choices = show_choices\n        self.show_envvar = show_envvar\n        self.help = help\n        self.hidden = hidden\n        # Choice\n        self.case_sensitive = case_sensitive\n        # Numbers\n        self.min = min\n        self.max = max\n        self.clamp = clamp\n        # DateTime\n        self.formats = formats\n        # File\n        self.mode = mode\n        self.encoding = encoding\n        self.errors = errors\n        self.lazy = lazy\n        self.atomic = atomic\n        # Path\n        self.exists = exists\n        self.file_okay = file_okay\n        self.dir_okay = dir_okay\n        self.writable = writable\n        self.readable = readable\n        self.resolve_path = resolve_path\n        self.allow_dash = allow_dash\n        self.path_type = path_type\n        # Rich settings\n        self.rich_help_panel = rich_help_panel",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "OptionInfo",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        # ParameterInfo\n        default: Optional[Any] = None,\n        param_decls: Optional[Sequence[str]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        default_factory: Optional[Callable[[], Any]] = None,\n        # Custom type\n        parser: Optional[Callable[[str], Any]] = None,\n        click_type: Optional[click.ParamType] = None,\n        # Option\n        show_default: Union[bool, str] = True,\n        prompt: Union[bool, str] = False,\n        confirmation_prompt: bool = False,\n        prompt_required: bool = True,\n        hide_input: bool = False,\n        # TODO: remove is_flag and flag_value in a future release\n        is_flag: Optional[bool] = None,\n        flag_value: Optional[Any] = None,\n        count: bool = False,\n        allow_from_autoenv: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        show_choices: bool = True,\n        show_envvar: bool = True,\n        # Choice\n        case_sensitive: bool = True,\n        # Numbers\n        min: Optional[Union[int, float]] = None,\n        max: Optional[Union[int, float]] = None,\n        clamp: bool = False,\n        # DateTime\n        formats: Optional[List[str]] = None,\n        # File\n        mode: Optional[str] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = \"strict\",\n        lazy: Optional[bool] = None,\n        atomic: bool = False,\n        # Path\n        exists: bool = False,\n        file_okay: bool = True,\n        dir_okay: bool = True,\n        writable: bool = False,\n        readable: bool = True,\n        resolve_path: bool = False,\n        allow_dash: bool = False,\n        path_type: Union[None, Type[str], Type[bytes]] = None,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        super().__init__(\n            default=default,\n            param_decls=param_decls,\n            callback=callback,\n            metavar=metavar,\n            expose_value=expose_value,\n            is_eager=is_eager,\n            envvar=envvar,\n            shell_complete=shell_complete,\n            autocompletion=autocompletion,\n            default_factory=default_factory,\n            # Custom type\n            parser=parser,\n            click_type=click_type,\n            # TyperArgument\n            show_default=show_default,\n            show_choices=show_choices,\n            show_envvar=show_envvar,\n            help=help,\n            hidden=hidden,\n            # Choice\n            case_sensitive=case_sensitive,\n            # Numbers\n            min=min,\n            max=max,\n            clamp=clamp,\n            # DateTime\n            formats=formats,\n            # File\n            mode=mode,\n            encoding=encoding,\n            errors=errors,\n            lazy=lazy,\n            atomic=atomic,\n            # Path\n            exists=exists,\n            file_okay=file_okay,\n            dir_okay=dir_okay,\n            writable=writable,\n            readable=readable,\n            resolve_path=resolve_path,\n            allow_dash=allow_dash,\n            path_type=path_type,\n            # Rich settings\n            rich_help_panel=rich_help_panel,\n        )\n        if is_flag is not None or flag_value is not None:\n            import warnings\n\n            warnings.warn(\n                \"The 'is_flag' and 'flag_value' parameters are not supported by Typer \"\n                \"and will be removed entirely in a future release.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        self.prompt = prompt\n        self.confirmation_prompt = confirmation_prompt\n        self.prompt_required = prompt_required\n        self.hide_input = hide_input\n        self.count = count\n        self.allow_from_autoenv = allow_from_autoenv",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "ParameterInfo"
        ]
      },
      {
        "name": "ArgumentInfo",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        # ParameterInfo\n        default: Optional[Any] = None,\n        param_decls: Optional[Sequence[str]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        default_factory: Optional[Callable[[], Any]] = None,\n        # Custom type\n        parser: Optional[Callable[[str], Any]] = None,\n        click_type: Optional[click.ParamType] = None,\n        # TyperArgument\n        show_default: Union[bool, str] = True,\n        show_choices: bool = True,\n        show_envvar: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        # Choice\n        case_sensitive: bool = True,\n        # Numbers\n        min: Optional[Union[int, float]] = None,\n        max: Optional[Union[int, float]] = None,\n        clamp: bool = False,\n        # DateTime\n        formats: Optional[List[str]] = None,\n        # File\n        mode: Optional[str] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = \"strict\",\n        lazy: Optional[bool] = None,\n        atomic: bool = False,\n        # Path\n        exists: bool = False,\n        file_okay: bool = True,\n        dir_okay: bool = True,\n        writable: bool = False,\n        readable: bool = True,\n        resolve_path: bool = False,\n        allow_dash: bool = False,\n        path_type: Union[None, Type[str], Type[bytes]] = None,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        super().__init__(\n            default=default,\n            param_decls=param_decls,\n            callback=callback,\n            metavar=metavar,\n            expose_value=expose_value,\n            is_eager=is_eager,\n            envvar=envvar,\n            shell_complete=shell_complete,\n            autocompletion=autocompletion,\n            default_factory=default_factory,\n            # Custom type\n            parser=parser,\n            click_type=click_type,\n            # TyperArgument\n            show_default=show_default,\n            show_choices=show_choices,\n            show_envvar=show_envvar,\n            help=help,\n            hidden=hidden,\n            # Choice\n            case_sensitive=case_sensitive,\n            # Numbers\n            min=min,\n            max=max,\n            clamp=clamp,\n            # DateTime\n            formats=formats,\n            # File\n            mode=mode,\n            encoding=encoding,\n            errors=errors,\n            lazy=lazy,\n            atomic=atomic,\n            # Path\n            exists=exists,\n            file_okay=file_okay,\n            dir_okay=dir_okay,\n            writable=writable,\n            readable=readable,\n            resolve_path=resolve_path,\n            allow_dash=allow_dash,\n            path_type=path_type,\n            # Rich settings\n            rich_help_panel=rich_help_panel,\n        )",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "ParameterInfo"
        ]
      },
      {
        "name": "ParamMeta",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        name: str,\n        default: Any = inspect.Parameter.empty,\n        annotation: Any = inspect.Parameter.empty,\n    ) -> None:\n        self.name = name\n        self.default = default\n        self.annotation = annotation",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "DeveloperExceptionConfig",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        *,\n        pretty_exceptions_enable: bool = True,\n        pretty_exceptions_show_locals: bool = True,\n        pretty_exceptions_short: bool = True,\n    ) -> None:\n        self.pretty_exceptions_enable = pretty_exceptions_enable\n        self.pretty_exceptions_show_locals = pretty_exceptions_show_locals\n        self.pretty_exceptions_short = pretty_exceptions_short",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": []
      },
      {
        "name": "TyperPath",
        "methods": [
          {
            "name": "shell_complete",
            "content": "    def shell_complete(\n        self, ctx: click.Context, param: click.Parameter, incomplete: str\n    ) -> List[click.shell_completion.CompletionItem]:\n        \"\"\"Return an empty list so that the autocompletion functionality\n        will work properly from the commandline.\n        \"\"\"\n        return []",
            "signature": {
              "args": [
                "self",
                "ctx",
                "param",
                "incomplete"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "click.Path"
        ]
      }
    ],
    "functions": [
      {
        "name": "Default",
        "content": "def Default(value: DefaultType) -> DefaultType:\n    \"\"\"\n    You shouldn't use this function directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the new value is `None`.\n    \"\"\"\n    return DefaultPlaceholder(value)  # type: ignore",
        "signature": {
          "args": [
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "__bool__",
        "caller_class": "DefaultPlaceholder",
        "called_function": "bool",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "Default",
        "caller_class": null,
        "called_function": "DefaultPlaceholder",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "TyperInfo",
        "called_function": "Default",
        "called_function_files": [
          "typer/models.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "ParameterInfo",
        "called_function": "ValueError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "OptionInfo",
        "called_function": "__init__",
        "called_function_files": [],
        "called_method_files": [
          "typer/models.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "__init__",
        "caller_class": "OptionInfo",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "OptionInfo",
        "called_function": "warn",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "__init__",
        "caller_class": "ArgumentInfo",
        "called_function": "__init__",
        "called_function_files": [],
        "called_method_files": [
          "typer/models.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "__init__",
        "caller_class": "ArgumentInfo",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(self, value: Any):\n        self.value = value",
        "signature": {
          "args": [
            "self",
            "value"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__bool__",
        "content": "    def __bool__(self) -> bool:\n        return bool(self.value)",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        name: Optional[str] = None,\n        *,\n        cls: Optional[Type[\"TyperCommand\"]] = None,\n        context_settings: Optional[Dict[Any, Any]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        help: Optional[str] = None,\n        epilog: Optional[str] = None,\n        short_help: Optional[str] = None,\n        options_metavar: str = \"[OPTIONS]\",\n        add_help_option: bool = True,\n        no_args_is_help: bool = False,\n        hidden: bool = False,\n        deprecated: bool = False,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        self.name = name\n        self.cls = cls\n        self.context_settings = context_settings\n        self.callback = callback\n        self.help = help\n        self.epilog = epilog\n        self.short_help = short_help\n        self.options_metavar = options_metavar\n        self.add_help_option = add_help_option\n        self.no_args_is_help = no_args_is_help\n        self.hidden = hidden\n        self.deprecated = deprecated\n        # Rich settings\n        self.rich_help_panel = rich_help_panel",
        "signature": {
          "args": [
            "self",
            "name"
          ],
          "defaults": [
            "None"
          ]
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        typer_instance: Optional[\"Typer\"] = Default(None),\n        *,\n        name: Optional[str] = Default(None),\n        cls: Optional[Type[\"TyperGroup\"]] = Default(None),\n        invoke_without_command: bool = Default(False),\n        no_args_is_help: bool = Default(False),\n        subcommand_metavar: Optional[str] = Default(None),\n        chain: bool = Default(False),\n        result_callback: Optional[Callable[..., Any]] = Default(None),\n        # Command\n        context_settings: Optional[Dict[Any, Any]] = Default(None),\n        callback: Optional[Callable[..., Any]] = Default(None),\n        help: Optional[str] = Default(None),\n        epilog: Optional[str] = Default(None),\n        short_help: Optional[str] = Default(None),\n        options_metavar: str = Default(\"[OPTIONS]\"),\n        add_help_option: bool = Default(True),\n        hidden: bool = Default(False),\n        deprecated: bool = Default(False),\n        # Rich settings\n        rich_help_panel: Union[str, None] = Default(None),\n    ):\n        self.typer_instance = typer_instance\n        self.name = name\n        self.cls = cls\n        self.invoke_without_command = invoke_without_command\n        self.no_args_is_help = no_args_is_help\n        self.subcommand_metavar = subcommand_metavar\n        self.chain = chain\n        self.result_callback = result_callback\n        self.context_settings = context_settings\n        self.callback = callback\n        self.help = help\n        self.epilog = epilog\n        self.short_help = short_help\n        self.options_metavar = options_metavar\n        self.add_help_option = add_help_option\n        self.hidden = hidden\n        self.deprecated = deprecated\n        self.rich_help_panel = rich_help_panel",
        "signature": {
          "args": [
            "self",
            "typer_instance"
          ],
          "defaults": [
            "Default(None)"
          ]
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        default: Optional[Any] = None,\n        param_decls: Optional[Sequence[str]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        default_factory: Optional[Callable[[], Any]] = None,\n        # Custom type\n        parser: Optional[Callable[[str], Any]] = None,\n        click_type: Optional[click.ParamType] = None,\n        # TyperArgument\n        show_default: Union[bool, str] = True,\n        show_choices: bool = True,\n        show_envvar: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        # Choice\n        case_sensitive: bool = True,\n        # Numbers\n        min: Optional[Union[int, float]] = None,\n        max: Optional[Union[int, float]] = None,\n        clamp: bool = False,\n        # DateTime\n        formats: Optional[List[str]] = None,\n        # File\n        mode: Optional[str] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = \"strict\",\n        lazy: Optional[bool] = None,\n        atomic: bool = False,\n        # Path\n        exists: bool = False,\n        file_okay: bool = True,\n        dir_okay: bool = True,\n        writable: bool = False,\n        readable: bool = True,\n        resolve_path: bool = False,\n        allow_dash: bool = False,\n        path_type: Union[None, Type[str], Type[bytes]] = None,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        # Check if user has provided multiple custom parsers\n        if parser and click_type:\n            raise ValueError(\n                \"Multiple custom type parsers provided. \"\n                \"`parser` and `click_type` may not both be provided.\"\n            )\n\n        self.default = default\n        self.param_decls = param_decls\n        self.callback = callback\n        self.metavar = metavar\n        self.expose_value = expose_value\n        self.is_eager = is_eager\n        self.envvar = envvar\n        self.shell_complete = shell_complete\n        self.autocompletion = autocompletion\n        self.default_factory = default_factory\n        # Custom type\n        self.parser = parser\n        self.click_type = click_type\n        # TyperArgument\n        self.show_default = show_default\n        self.show_choices = show_choices\n        self.show_envvar = show_envvar\n        self.help = help\n        self.hidden = hidden\n        # Choice\n        self.case_sensitive = case_sensitive\n        # Numbers\n        self.min = min\n        self.max = max\n        self.clamp = clamp\n        # DateTime\n        self.formats = formats\n        # File\n        self.mode = mode\n        self.encoding = encoding\n        self.errors = errors\n        self.lazy = lazy\n        self.atomic = atomic\n        # Path\n        self.exists = exists\n        self.file_okay = file_okay\n        self.dir_okay = dir_okay\n        self.writable = writable\n        self.readable = readable\n        self.resolve_path = resolve_path\n        self.allow_dash = allow_dash\n        self.path_type = path_type\n        # Rich settings\n        self.rich_help_panel = rich_help_panel",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        # ParameterInfo\n        default: Optional[Any] = None,\n        param_decls: Optional[Sequence[str]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        default_factory: Optional[Callable[[], Any]] = None,\n        # Custom type\n        parser: Optional[Callable[[str], Any]] = None,\n        click_type: Optional[click.ParamType] = None,\n        # Option\n        show_default: Union[bool, str] = True,\n        prompt: Union[bool, str] = False,\n        confirmation_prompt: bool = False,\n        prompt_required: bool = True,\n        hide_input: bool = False,\n        # TODO: remove is_flag and flag_value in a future release\n        is_flag: Optional[bool] = None,\n        flag_value: Optional[Any] = None,\n        count: bool = False,\n        allow_from_autoenv: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        show_choices: bool = True,\n        show_envvar: bool = True,\n        # Choice\n        case_sensitive: bool = True,\n        # Numbers\n        min: Optional[Union[int, float]] = None,\n        max: Optional[Union[int, float]] = None,\n        clamp: bool = False,\n        # DateTime\n        formats: Optional[List[str]] = None,\n        # File\n        mode: Optional[str] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = \"strict\",\n        lazy: Optional[bool] = None,\n        atomic: bool = False,\n        # Path\n        exists: bool = False,\n        file_okay: bool = True,\n        dir_okay: bool = True,\n        writable: bool = False,\n        readable: bool = True,\n        resolve_path: bool = False,\n        allow_dash: bool = False,\n        path_type: Union[None, Type[str], Type[bytes]] = None,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        super().__init__(\n            default=default,\n            param_decls=param_decls,\n            callback=callback,\n            metavar=metavar,\n            expose_value=expose_value,\n            is_eager=is_eager,\n            envvar=envvar,\n            shell_complete=shell_complete,\n            autocompletion=autocompletion,\n            default_factory=default_factory,\n            # Custom type\n            parser=parser,\n            click_type=click_type,\n            # TyperArgument\n            show_default=show_default,\n            show_choices=show_choices,\n            show_envvar=show_envvar,\n            help=help,\n            hidden=hidden,\n            # Choice\n            case_sensitive=case_sensitive,\n            # Numbers\n            min=min,\n            max=max,\n            clamp=clamp,\n            # DateTime\n            formats=formats,\n            # File\n            mode=mode,\n            encoding=encoding,\n            errors=errors,\n            lazy=lazy,\n            atomic=atomic,\n            # Path\n            exists=exists,\n            file_okay=file_okay,\n            dir_okay=dir_okay,\n            writable=writable,\n            readable=readable,\n            resolve_path=resolve_path,\n            allow_dash=allow_dash,\n            path_type=path_type,\n            # Rich settings\n            rich_help_panel=rich_help_panel,\n        )\n        if is_flag is not None or flag_value is not None:\n            import warnings\n\n            warnings.warn(\n                \"The 'is_flag' and 'flag_value' parameters are not supported by Typer \"\n                \"and will be removed entirely in a future release.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n        self.prompt = prompt\n        self.confirmation_prompt = confirmation_prompt\n        self.prompt_required = prompt_required\n        self.hide_input = hide_input\n        self.count = count\n        self.allow_from_autoenv = allow_from_autoenv",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        # ParameterInfo\n        default: Optional[Any] = None,\n        param_decls: Optional[Sequence[str]] = None,\n        callback: Optional[Callable[..., Any]] = None,\n        metavar: Optional[str] = None,\n        expose_value: bool = True,\n        is_eager: bool = False,\n        envvar: Optional[Union[str, List[str]]] = None,\n        # Note that shell_complete is not fully supported and will be removed in future versions\n        # TODO: Remove shell_complete in a future version (after 0.16.0)\n        shell_complete: Optional[\n            Callable[\n                [click.Context, click.Parameter, str],\n                Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n            ]\n        ] = None,\n        autocompletion: Optional[Callable[..., Any]] = None,\n        default_factory: Optional[Callable[[], Any]] = None,\n        # Custom type\n        parser: Optional[Callable[[str], Any]] = None,\n        click_type: Optional[click.ParamType] = None,\n        # TyperArgument\n        show_default: Union[bool, str] = True,\n        show_choices: bool = True,\n        show_envvar: bool = True,\n        help: Optional[str] = None,\n        hidden: bool = False,\n        # Choice\n        case_sensitive: bool = True,\n        # Numbers\n        min: Optional[Union[int, float]] = None,\n        max: Optional[Union[int, float]] = None,\n        clamp: bool = False,\n        # DateTime\n        formats: Optional[List[str]] = None,\n        # File\n        mode: Optional[str] = None,\n        encoding: Optional[str] = None,\n        errors: Optional[str] = \"strict\",\n        lazy: Optional[bool] = None,\n        atomic: bool = False,\n        # Path\n        exists: bool = False,\n        file_okay: bool = True,\n        dir_okay: bool = True,\n        writable: bool = False,\n        readable: bool = True,\n        resolve_path: bool = False,\n        allow_dash: bool = False,\n        path_type: Union[None, Type[str], Type[bytes]] = None,\n        # Rich settings\n        rich_help_panel: Union[str, None] = None,\n    ):\n        super().__init__(\n            default=default,\n            param_decls=param_decls,\n            callback=callback,\n            metavar=metavar,\n            expose_value=expose_value,\n            is_eager=is_eager,\n            envvar=envvar,\n            shell_complete=shell_complete,\n            autocompletion=autocompletion,\n            default_factory=default_factory,\n            # Custom type\n            parser=parser,\n            click_type=click_type,\n            # TyperArgument\n            show_default=show_default,\n            show_choices=show_choices,\n            show_envvar=show_envvar,\n            help=help,\n            hidden=hidden,\n            # Choice\n            case_sensitive=case_sensitive,\n            # Numbers\n            min=min,\n            max=max,\n            clamp=clamp,\n            # DateTime\n            formats=formats,\n            # File\n            mode=mode,\n            encoding=encoding,\n            errors=errors,\n            lazy=lazy,\n            atomic=atomic,\n            # Path\n            exists=exists,\n            file_okay=file_okay,\n            dir_okay=dir_okay,\n            writable=writable,\n            readable=readable,\n            resolve_path=resolve_path,\n            allow_dash=allow_dash,\n            path_type=path_type,\n            # Rich settings\n            rich_help_panel=rich_help_panel,\n        )",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        name: str,\n        default: Any = inspect.Parameter.empty,\n        annotation: Any = inspect.Parameter.empty,\n    ) -> None:\n        self.name = name\n        self.default = default\n        self.annotation = annotation",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        *,\n        pretty_exceptions_enable: bool = True,\n        pretty_exceptions_show_locals: bool = True,\n        pretty_exceptions_short: bool = True,\n    ) -> None:\n        self.pretty_exceptions_enable = pretty_exceptions_enable\n        self.pretty_exceptions_show_locals = pretty_exceptions_show_locals\n        self.pretty_exceptions_short = pretty_exceptions_short",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "shell_complete",
        "content": "    def shell_complete(\n        self, ctx: click.Context, param: click.Parameter, incomplete: str\n    ) -> List[click.shell_completion.CompletionItem]:\n        \"\"\"Return an empty list so that the autocompletion functionality\n        will work properly from the commandline.\n        \"\"\"\n        return []",
        "signature": {
          "args": [
            "self",
            "ctx",
            "param",
            "incomplete"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "typer/params.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      },
      {
        "module": "click.shell_completion",
        "type": "external"
      }
    ],
    "classes": [],
    "functions": [
      {
        "name": "Option",
        "content": "def Option(\n    # Parameter\n    default: Optional[Any] = ...,\n    *param_decls: str,\n    callback: Optional[Callable[..., Any]] = None,\n    metavar: Optional[str] = None,\n    expose_value: bool = True,\n    is_eager: bool = False,\n    envvar: Optional[Union[str, List[str]]] = None,\n    # Note that shell_complete is not fully supported and will be removed in future versions\n    # TODO: Remove shell_complete in a future version (after 0.16.0)\n    shell_complete: Optional[\n        Callable[\n            [click.Context, click.Parameter, str],\n            Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n        ]\n    ] = None,\n    autocompletion: Optional[Callable[..., Any]] = None,\n    default_factory: Optional[Callable[[], Any]] = None,\n    # Custom type\n    parser: Optional[Callable[[str], Any]] = None,\n    # Option\n    show_default: Union[bool, str] = True,\n    prompt: Union[bool, str] = False,\n    confirmation_prompt: bool = False,\n    prompt_required: bool = True,\n    hide_input: bool = False,\n    # TODO: remove is_flag and flag_value in a future release\n    is_flag: Optional[bool] = None,\n    flag_value: Optional[Any] = None,\n    count: bool = False,\n    allow_from_autoenv: bool = True,\n    help: Optional[str] = None,\n    hidden: bool = False,\n    show_choices: bool = True,\n    show_envvar: bool = True,\n    # Choice\n    case_sensitive: bool = True,\n    # Numbers\n    min: Optional[Union[int, float]] = None,\n    max: Optional[Union[int, float]] = None,\n    clamp: bool = False,\n    # DateTime\n    formats: Optional[List[str]] = None,\n    # File\n    mode: Optional[str] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = \"strict\",\n    lazy: Optional[bool] = None,\n    atomic: bool = False,\n    # Path\n    exists: bool = False,\n    file_okay: bool = True,\n    dir_okay: bool = True,\n    writable: bool = False,\n    readable: bool = True,\n    resolve_path: bool = False,\n    allow_dash: bool = False,\n    path_type: Union[None, Type[str], Type[bytes]] = None,\n    # Rich settings\n    rich_help_panel: Union[str, None] = None,\n) -> Any: ...",
        "signature": {
          "args": [
            "default"
          ],
          "defaults": [
            "..."
          ]
        },
        "decorators": [
          "overload"
        ]
      },
      {
        "name": "Option",
        "content": "def Option(\n    # Parameter\n    default: Optional[Any] = ...,\n    *param_decls: str,\n    callback: Optional[Callable[..., Any]] = None,\n    metavar: Optional[str] = None,\n    expose_value: bool = True,\n    is_eager: bool = False,\n    envvar: Optional[Union[str, List[str]]] = None,\n    # Note that shell_complete is not fully supported and will be removed in future versions\n    # TODO: Remove shell_complete in a future version (after 0.16.0)\n    shell_complete: Optional[\n        Callable[\n            [click.Context, click.Parameter, str],\n            Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n        ]\n    ] = None,\n    autocompletion: Optional[Callable[..., Any]] = None,\n    default_factory: Optional[Callable[[], Any]] = None,\n    # Custom type\n    click_type: Optional[click.ParamType] = None,\n    # Option\n    show_default: Union[bool, str] = True,\n    prompt: Union[bool, str] = False,\n    confirmation_prompt: bool = False,\n    prompt_required: bool = True,\n    hide_input: bool = False,\n    # TODO: remove is_flag and flag_value in a future release\n    is_flag: Optional[bool] = None,\n    flag_value: Optional[Any] = None,\n    count: bool = False,\n    allow_from_autoenv: bool = True,\n    help: Optional[str] = None,\n    hidden: bool = False,\n    show_choices: bool = True,\n    show_envvar: bool = True,\n    # Choice\n    case_sensitive: bool = True,\n    # Numbers\n    min: Optional[Union[int, float]] = None,\n    max: Optional[Union[int, float]] = None,\n    clamp: bool = False,\n    # DateTime\n    formats: Optional[List[str]] = None,\n    # File\n    mode: Optional[str] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = \"strict\",\n    lazy: Optional[bool] = None,\n    atomic: bool = False,\n    # Path\n    exists: bool = False,\n    file_okay: bool = True,\n    dir_okay: bool = True,\n    writable: bool = False,\n    readable: bool = True,\n    resolve_path: bool = False,\n    allow_dash: bool = False,\n    path_type: Union[None, Type[str], Type[bytes]] = None,\n    # Rich settings\n    rich_help_panel: Union[str, None] = None,\n) -> Any: ...",
        "signature": {
          "args": [
            "default"
          ],
          "defaults": [
            "..."
          ]
        },
        "decorators": [
          "overload"
        ]
      },
      {
        "name": "Option",
        "content": "def Option(\n    # Parameter\n    default: Optional[Any] = ...,\n    *param_decls: str,\n    callback: Optional[Callable[..., Any]] = None,\n    metavar: Optional[str] = None,\n    expose_value: bool = True,\n    is_eager: bool = False,\n    envvar: Optional[Union[str, List[str]]] = None,\n    # Note that shell_complete is not fully supported and will be removed in future versions\n    # TODO: Remove shell_complete in a future version (after 0.16.0)\n    shell_complete: Optional[\n        Callable[\n            [click.Context, click.Parameter, str],\n            Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n        ]\n    ] = None,\n    autocompletion: Optional[Callable[..., Any]] = None,\n    default_factory: Optional[Callable[[], Any]] = None,\n    # Custom type\n    parser: Optional[Callable[[str], Any]] = None,\n    click_type: Optional[click.ParamType] = None,\n    # Option\n    show_default: Union[bool, str] = True,\n    prompt: Union[bool, str] = False,\n    confirmation_prompt: bool = False,\n    prompt_required: bool = True,\n    hide_input: bool = False,\n    # TODO: remove is_flag and flag_value in a future release\n    is_flag: Optional[bool] = None,\n    flag_value: Optional[Any] = None,\n    count: bool = False,\n    allow_from_autoenv: bool = True,\n    help: Optional[str] = None,\n    hidden: bool = False,\n    show_choices: bool = True,\n    show_envvar: bool = True,\n    # Choice\n    case_sensitive: bool = True,\n    # Numbers\n    min: Optional[Union[int, float]] = None,\n    max: Optional[Union[int, float]] = None,\n    clamp: bool = False,\n    # DateTime\n    formats: Optional[List[str]] = None,\n    # File\n    mode: Optional[str] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = \"strict\",\n    lazy: Optional[bool] = None,\n    atomic: bool = False,\n    # Path\n    exists: bool = False,\n    file_okay: bool = True,\n    dir_okay: bool = True,\n    writable: bool = False,\n    readable: bool = True,\n    resolve_path: bool = False,\n    allow_dash: bool = False,\n    path_type: Union[None, Type[str], Type[bytes]] = None,\n    # Rich settings\n    rich_help_panel: Union[str, None] = None,\n) -> Any:\n    return OptionInfo(\n        # Parameter\n        default=default,\n        param_decls=param_decls,\n        callback=callback,\n        metavar=metavar,\n        expose_value=expose_value,\n        is_eager=is_eager,\n        envvar=envvar,\n        shell_complete=shell_complete,\n        autocompletion=autocompletion,\n        default_factory=default_factory,\n        # Custom type\n        parser=parser,\n        click_type=click_type,\n        # Option\n        show_default=show_default,\n        prompt=prompt,\n        confirmation_prompt=confirmation_prompt,\n        prompt_required=prompt_required,\n        hide_input=hide_input,\n        is_flag=is_flag,\n        flag_value=flag_value,\n        count=count,\n        allow_from_autoenv=allow_from_autoenv,\n        help=help,\n        hidden=hidden,\n        show_choices=show_choices,\n        show_envvar=show_envvar,\n        # Choice\n        case_sensitive=case_sensitive,\n        # Numbers\n        min=min,\n        max=max,\n        clamp=clamp,\n        # DateTime\n        formats=formats,\n        # File\n        mode=mode,\n        encoding=encoding,\n        errors=errors,\n        lazy=lazy,\n        atomic=atomic,\n        # Path\n        exists=exists,\n        file_okay=file_okay,\n        dir_okay=dir_okay,\n        writable=writable,\n        readable=readable,\n        resolve_path=resolve_path,\n        allow_dash=allow_dash,\n        path_type=path_type,\n        # Rich settings\n        rich_help_panel=rich_help_panel,\n    )",
        "signature": {
          "args": [
            "default"
          ],
          "defaults": [
            "..."
          ]
        },
        "decorators": []
      },
      {
        "name": "Argument",
        "content": "def Argument(\n    # Parameter\n    default: Optional[Any] = ...,\n    *,\n    callback: Optional[Callable[..., Any]] = None,\n    metavar: Optional[str] = None,\n    expose_value: bool = True,\n    is_eager: bool = False,\n    envvar: Optional[Union[str, List[str]]] = None,\n    # Note that shell_complete is not fully supported and will be removed in future versions\n    # TODO: Remove shell_complete in a future version (after 0.16.0)\n    shell_complete: Optional[\n        Callable[\n            [click.Context, click.Parameter, str],\n            Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n        ]\n    ] = None,\n    autocompletion: Optional[Callable[..., Any]] = None,\n    default_factory: Optional[Callable[[], Any]] = None,\n    # Custom type\n    parser: Optional[Callable[[str], Any]] = None,\n    # TyperArgument\n    show_default: Union[bool, str] = True,\n    show_choices: bool = True,\n    show_envvar: bool = True,\n    help: Optional[str] = None,\n    hidden: bool = False,\n    # Choice\n    case_sensitive: bool = True,\n    # Numbers\n    min: Optional[Union[int, float]] = None,\n    max: Optional[Union[int, float]] = None,\n    clamp: bool = False,\n    # DateTime\n    formats: Optional[List[str]] = None,\n    # File\n    mode: Optional[str] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = \"strict\",\n    lazy: Optional[bool] = None,\n    atomic: bool = False,\n    # Path\n    exists: bool = False,\n    file_okay: bool = True,\n    dir_okay: bool = True,\n    writable: bool = False,\n    readable: bool = True,\n    resolve_path: bool = False,\n    allow_dash: bool = False,\n    path_type: Union[None, Type[str], Type[bytes]] = None,\n    # Rich settings\n    rich_help_panel: Union[str, None] = None,\n) -> Any: ...",
        "signature": {
          "args": [
            "default"
          ],
          "defaults": [
            "..."
          ]
        },
        "decorators": [
          "overload"
        ]
      },
      {
        "name": "Argument",
        "content": "def Argument(\n    # Parameter\n    default: Optional[Any] = ...,\n    *,\n    callback: Optional[Callable[..., Any]] = None,\n    metavar: Optional[str] = None,\n    expose_value: bool = True,\n    is_eager: bool = False,\n    envvar: Optional[Union[str, List[str]]] = None,\n    # Note that shell_complete is not fully supported and will be removed in future versions\n    # TODO: Remove shell_complete in a future version (after 0.16.0)\n    shell_complete: Optional[\n        Callable[\n            [click.Context, click.Parameter, str],\n            Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n        ]\n    ] = None,\n    autocompletion: Optional[Callable[..., Any]] = None,\n    default_factory: Optional[Callable[[], Any]] = None,\n    # Custom type\n    click_type: Optional[click.ParamType] = None,\n    # TyperArgument\n    show_default: Union[bool, str] = True,\n    show_choices: bool = True,\n    show_envvar: bool = True,\n    help: Optional[str] = None,\n    hidden: bool = False,\n    # Choice\n    case_sensitive: bool = True,\n    # Numbers\n    min: Optional[Union[int, float]] = None,\n    max: Optional[Union[int, float]] = None,\n    clamp: bool = False,\n    # DateTime\n    formats: Optional[List[str]] = None,\n    # File\n    mode: Optional[str] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = \"strict\",\n    lazy: Optional[bool] = None,\n    atomic: bool = False,\n    # Path\n    exists: bool = False,\n    file_okay: bool = True,\n    dir_okay: bool = True,\n    writable: bool = False,\n    readable: bool = True,\n    resolve_path: bool = False,\n    allow_dash: bool = False,\n    path_type: Union[None, Type[str], Type[bytes]] = None,\n    # Rich settings\n    rich_help_panel: Union[str, None] = None,\n) -> Any: ...",
        "signature": {
          "args": [
            "default"
          ],
          "defaults": [
            "..."
          ]
        },
        "decorators": [
          "overload"
        ]
      },
      {
        "name": "Argument",
        "content": "def Argument(\n    # Parameter\n    default: Optional[Any] = ...,\n    *,\n    callback: Optional[Callable[..., Any]] = None,\n    metavar: Optional[str] = None,\n    expose_value: bool = True,\n    is_eager: bool = False,\n    envvar: Optional[Union[str, List[str]]] = None,\n    # Note that shell_complete is not fully supported and will be removed in future versions\n    # TODO: Remove shell_complete in a future version (after 0.16.0)\n    shell_complete: Optional[\n        Callable[\n            [click.Context, click.Parameter, str],\n            Union[List[\"click.shell_completion.CompletionItem\"], List[str]],\n        ]\n    ] = None,\n    autocompletion: Optional[Callable[..., Any]] = None,\n    default_factory: Optional[Callable[[], Any]] = None,\n    # Custom type\n    parser: Optional[Callable[[str], Any]] = None,\n    click_type: Optional[click.ParamType] = None,\n    # TyperArgument\n    show_default: Union[bool, str] = True,\n    show_choices: bool = True,\n    show_envvar: bool = True,\n    help: Optional[str] = None,\n    hidden: bool = False,\n    # Choice\n    case_sensitive: bool = True,\n    # Numbers\n    min: Optional[Union[int, float]] = None,\n    max: Optional[Union[int, float]] = None,\n    clamp: bool = False,\n    # DateTime\n    formats: Optional[List[str]] = None,\n    # File\n    mode: Optional[str] = None,\n    encoding: Optional[str] = None,\n    errors: Optional[str] = \"strict\",\n    lazy: Optional[bool] = None,\n    atomic: bool = False,\n    # Path\n    exists: bool = False,\n    file_okay: bool = True,\n    dir_okay: bool = True,\n    writable: bool = False,\n    readable: bool = True,\n    resolve_path: bool = False,\n    allow_dash: bool = False,\n    path_type: Union[None, Type[str], Type[bytes]] = None,\n    # Rich settings\n    rich_help_panel: Union[str, None] = None,\n) -> Any:\n    return ArgumentInfo(\n        # Parameter\n        default=default,\n        # Arguments can only have one param declaration\n        # it will be generated from the param name\n        param_decls=None,\n        callback=callback,\n        metavar=metavar,\n        expose_value=expose_value,\n        is_eager=is_eager,\n        envvar=envvar,\n        shell_complete=shell_complete,\n        autocompletion=autocompletion,\n        default_factory=default_factory,\n        # Custom type\n        parser=parser,\n        click_type=click_type,\n        # TyperArgument\n        show_default=show_default,\n        show_choices=show_choices,\n        show_envvar=show_envvar,\n        help=help,\n        hidden=hidden,\n        # Choice\n        case_sensitive=case_sensitive,\n        # Numbers\n        min=min,\n        max=max,\n        clamp=clamp,\n        # DateTime\n        formats=formats,\n        # File\n        mode=mode,\n        encoding=encoding,\n        errors=errors,\n        lazy=lazy,\n        atomic=atomic,\n        # Path\n        exists=exists,\n        file_okay=file_okay,\n        dir_okay=dir_okay,\n        writable=writable,\n        readable=readable,\n        resolve_path=resolve_path,\n        allow_dash=allow_dash,\n        path_type=path_type,\n        # Rich settings\n        rich_help_panel=rich_help_panel,\n    )",
        "signature": {
          "args": [
            "default"
          ],
          "defaults": [
            "..."
          ]
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "Option",
        "caller_class": null,
        "called_function": "OptionInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "Argument",
        "caller_class": null,
        "called_function": "ArgumentInfo",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "typer/rich_utils.py",
    "type": "python",
    "imports": [
      {
        "module": "inspect",
        "type": "external"
      },
      {
        "module": "io",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "collections",
        "type": "external"
      },
      {
        "module": "gettext",
        "type": "external"
      },
      {
        "module": "os",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click",
        "type": "external"
      },
      {
        "module": "rich",
        "type": "external"
      },
      {
        "module": "rich.align",
        "type": "external"
      },
      {
        "module": "rich.columns",
        "type": "external"
      },
      {
        "module": "rich.console",
        "type": "external"
      },
      {
        "module": "rich.emoji",
        "type": "external"
      },
      {
        "module": "rich.highlighter",
        "type": "external"
      },
      {
        "module": "rich.markdown",
        "type": "external"
      },
      {
        "module": "rich.markup",
        "type": "external"
      },
      {
        "module": "rich.padding",
        "type": "external"
      },
      {
        "module": "rich.panel",
        "type": "external"
      },
      {
        "module": "rich.table",
        "type": "external"
      },
      {
        "module": "rich.text",
        "type": "external"
      },
      {
        "module": "rich.theme",
        "type": "external"
      },
      {
        "module": "rich.traceback",
        "type": "external"
      },
      {
        "module": "typer.models",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "typing_extensions",
        "type": "external"
      },
      {
        "module": "core",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "OptionHighlighter",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "RegexHighlighter"
        ]
      },
      {
        "name": "NegativeOptionHighlighter",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "RegexHighlighter"
        ]
      },
      {
        "name": "MetavarHighlighter",
        "methods": [],
        "decorators": [],
        "inheritances": [
          "RegexHighlighter"
        ]
      }
    ],
    "functions": [
      {
        "name": "_get_rich_console",
        "content": "def _get_rich_console(stderr: bool = False) -> Console:\n    return Console(\n        theme=Theme(\n            {\n                \"option\": STYLE_OPTION,\n                \"switch\": STYLE_SWITCH,\n                \"negative_option\": STYLE_NEGATIVE_OPTION,\n                \"negative_switch\": STYLE_NEGATIVE_SWITCH,\n                \"metavar\": STYLE_METAVAR,\n                \"metavar_sep\": STYLE_METAVAR_SEPARATOR,\n                \"usage\": STYLE_USAGE,\n            },\n        ),\n        highlighter=highlighter,\n        color_system=COLOR_SYSTEM,\n        force_terminal=FORCE_TERMINAL,\n        width=MAX_WIDTH,\n        stderr=stderr,\n    )",
        "signature": {
          "args": [
            "stderr"
          ],
          "defaults": [
            "False"
          ]
        },
        "decorators": []
      },
      {
        "name": "_make_rich_text",
        "content": "def _make_rich_text(\n    *, text: str, style: str = \"\", markup_mode: MarkupMode\n) -> Union[Markdown, Text]:\n    \"\"\"Take a string, remove indentations, and return styled text.\n\n    By default, the text is not parsed for any special formatting.\n    If `markup_mode` is `\"rich\"`, the text is parsed for Rich markup strings.\n    If `markup_mode` is `\"markdown\"`, parse as Markdown.\n    \"\"\"\n    # Remove indentations from input text\n    text = inspect.cleandoc(text)\n    if markup_mode == MARKUP_MODE_MARKDOWN:\n        text = Emoji.replace(text)\n        return Markdown(text, style=style)\n    if markup_mode == MARKUP_MODE_RICH:\n        return highlighter(Text.from_markup(text, style=style))\n    else:\n        return highlighter(Text(text, style=style))",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_get_help_text",
        "content": "def _get_help_text(\n    *,\n    obj: Union[click.Command, click.Group],\n    markup_mode: MarkupMode,\n) -> Iterable[Union[Markdown, Text]]:\n    \"\"\"Build primary help text for a click command or group.\n\n    Returns the prose help text for a command or group, rendered either as a\n    Rich Text object or as Markdown.\n    If the command is marked as deprecated, the deprecated string will be prepended.\n    \"\"\"\n    # Prepend deprecated status\n    if obj.deprecated:\n        yield Text(DEPRECATED_STRING, style=STYLE_DEPRECATED)\n\n    # Fetch and dedent the help text\n    help_text = inspect.cleandoc(obj.help or \"\")\n\n    # Trim off anything that comes after \\f on its own line\n    help_text = help_text.partition(\"\\f\")[0]\n\n    # Get the first paragraph\n    first_line, *remaining_paragraphs = help_text.split(\"\\n\\n\")\n\n    # Remove single linebreaks\n    if markup_mode != MARKUP_MODE_MARKDOWN and not first_line.startswith(\"\\b\"):\n        first_line = first_line.replace(\"\\n\", \" \")\n    yield _make_rich_text(\n        text=first_line.strip(),\n        style=STYLE_HELPTEXT_FIRST_LINE,\n        markup_mode=markup_mode,\n    )\n\n    # Get remaining lines, remove single line breaks and format as dim\n    if remaining_paragraphs:\n        # Add a newline inbetween the header and the remaining paragraphs\n        yield Text(\"\")\n        if markup_mode not in (MARKUP_MODE_RICH, MARKUP_MODE_MARKDOWN):\n            # Remove single linebreaks\n            remaining_paragraphs = [\n                x.replace(\"\\n\", \" \").strip()\n                if not x.startswith(\"\\b\")\n                else \"{}\\n\".format(x.strip(\"\\b\\n\"))\n                for x in remaining_paragraphs\n            ]\n            # Join back together\n            remaining_lines = \"\\n\".join(remaining_paragraphs)\n        else:\n            # Join with double linebreaks if markdown or Rich markup\n            remaining_lines = \"\\n\\n\".join(remaining_paragraphs)\n\n        yield _make_rich_text(\n            text=remaining_lines,\n            style=STYLE_HELPTEXT,\n            markup_mode=markup_mode,\n        )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": [
          "group()"
        ]
      },
      {
        "name": "_get_parameter_help",
        "content": "def _get_parameter_help(\n    *,\n    param: Union[click.Option, click.Argument, click.Parameter],\n    ctx: click.Context,\n    markup_mode: MarkupMode,\n) -> Columns:\n    \"\"\"Build primary help text for a click option or argument.\n\n    Returns the prose help text for an option or argument, rendered either\n    as a Rich Text object or as Markdown.\n    Additional elements are appended to show the default and required status if\n    applicable.\n    \"\"\"\n    # import here to avoid cyclic imports\n    from .core import TyperArgument, TyperOption\n\n    items: List[Union[Text, Markdown]] = []\n\n    # Get the environment variable first\n\n    envvar = getattr(param, \"envvar\", None)\n    var_str = \"\"\n    # https://github.com/pallets/click/blob/0aec1168ac591e159baf6f61026d6ae322c53aaf/src/click/core.py#L2720-L2726\n    if envvar is None:\n        if (\n            getattr(param, \"allow_from_autoenv\", None)\n            and getattr(ctx, \"auto_envvar_prefix\", None) is not None\n            and param.name is not None\n        ):\n            envvar = f\"{ctx.auto_envvar_prefix}_{param.name.upper()}\"\n    if envvar is not None:\n        var_str = (\n            envvar if isinstance(envvar, str) else \", \".join(str(d) for d in envvar)\n        )\n\n    # Main help text\n    help_value: Union[str, None] = getattr(param, \"help\", None)\n    if help_value:\n        paragraphs = help_value.split(\"\\n\\n\")\n        # Remove single linebreaks\n        if markup_mode != MARKUP_MODE_MARKDOWN:\n            paragraphs = [\n                x.replace(\"\\n\", \" \").strip()\n                if not x.startswith(\"\\b\")\n                else \"{}\\n\".format(x.strip(\"\\b\\n\"))\n                for x in paragraphs\n            ]\n        items.append(\n            _make_rich_text(\n                text=\"\\n\".join(paragraphs).strip(),\n                style=STYLE_OPTION_HELP,\n                markup_mode=markup_mode,\n            )\n        )\n\n    # Environment variable AFTER help text\n    if envvar and getattr(param, \"show_envvar\", None):\n        items.append(Text(ENVVAR_STRING.format(var_str), style=STYLE_OPTION_ENVVAR))\n\n    # Default value\n    # This uses Typer's specific param._get_default_string\n    if isinstance(param, (TyperOption, TyperArgument)):\n        default_value = param._extract_default_help_str(ctx=ctx)\n        show_default_is_str = isinstance(param.show_default, str)\n        if show_default_is_str or (\n            default_value is not None and (param.show_default or ctx.show_default)\n        ):\n            default_str = param._get_default_string(\n                ctx=ctx,\n                show_default_is_str=show_default_is_str,\n                default_value=default_value,\n            )\n            if default_str:\n                items.append(\n                    Text(\n                        DEFAULT_STRING.format(default_str),\n                        style=STYLE_OPTION_DEFAULT,\n                    )\n                )\n\n    # Required?\n    if param.required:\n        items.append(Text(REQUIRED_LONG_STRING, style=STYLE_REQUIRED_LONG))\n\n    # Use Columns - this allows us to group different renderable types\n    # (Text, Markdown) onto a single line.\n    return Columns(items)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_make_command_help",
        "content": "def _make_command_help(\n    *,\n    help_text: str,\n    markup_mode: MarkupMode,\n) -> Union[Text, Markdown]:\n    \"\"\"Build cli help text for a click group command.\n\n    That is, when calling help on groups with multiple subcommands\n    (not the main help text when calling the subcommand help).\n\n    Returns the first paragraph of help text for a command, rendered either as a\n    Rich Text object or as Markdown.\n    Ignores single newlines as paragraph markers, looks for double only.\n    \"\"\"\n    paragraphs = inspect.cleandoc(help_text).split(\"\\n\\n\")\n    # Remove single linebreaks\n    if markup_mode != MARKUP_MODE_RICH and not paragraphs[0].startswith(\"\\b\"):\n        paragraphs[0] = paragraphs[0].replace(\"\\n\", \" \")\n    elif paragraphs[0].startswith(\"\\b\"):\n        paragraphs[0] = paragraphs[0].replace(\"\\b\\n\", \"\")\n    return _make_rich_text(\n        text=paragraphs[0].strip(),\n        style=STYLE_OPTION_HELP,\n        markup_mode=markup_mode,\n    )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_print_options_panel",
        "content": "def _print_options_panel(\n    *,\n    name: str,\n    params: Union[List[click.Option], List[click.Argument]],\n    ctx: click.Context,\n    markup_mode: MarkupMode,\n    console: Console,\n) -> None:\n    options_rows: List[List[RenderableType]] = []\n    required_rows: List[Union[str, Text]] = []\n    for param in params:\n        # Short and long form\n        opt_long_strs = []\n        opt_short_strs = []\n        secondary_opt_long_strs = []\n        secondary_opt_short_strs = []\n        for opt_str in param.opts:\n            if \"--\" in opt_str:\n                opt_long_strs.append(opt_str)\n            else:\n                opt_short_strs.append(opt_str)\n        for opt_str in param.secondary_opts:\n            if \"--\" in opt_str:\n                secondary_opt_long_strs.append(opt_str)\n            else:\n                secondary_opt_short_strs.append(opt_str)\n\n        # Column for a metavar, if we have one\n        metavar = Text(style=STYLE_METAVAR, overflow=\"fold\")\n        # TODO: when deprecating Click < 8.2, make ctx required\n        signature = inspect.signature(param.make_metavar)\n        if \"ctx\" in signature.parameters:\n            metavar_str = param.make_metavar(ctx=ctx)\n        else:\n            # Click < 8.2\n            metavar_str = param.make_metavar()  # type: ignore[call-arg]\n\n        # Do it ourselves if this is a positional argument\n        if (\n            isinstance(param, click.Argument)\n            and param.name\n            and metavar_str == param.name.upper()\n        ):\n            metavar_str = param.type.name.upper()\n\n        # Skip booleans and choices (handled above)\n        if metavar_str != \"BOOLEAN\":\n            metavar.append(metavar_str)\n\n        # Range - from\n        # https://github.com/pallets/click/blob/c63c70dabd3f86ca68678b4f00951f78f52d0270/src/click/core.py#L2698-L2706  # noqa: E501\n        # skip count with default range type\n        if (\n            isinstance(param.type, click.types._NumberRangeBase)\n            and isinstance(param, click.Option)\n            and not (param.count and param.type.min == 0 and param.type.max is None)\n        ):\n            range_str = param.type._describe_range()\n            if range_str:\n                metavar.append(RANGE_STRING.format(range_str))\n\n        # Required asterisk\n        required: Union[str, Text] = \"\"\n        if param.required:\n            required = Text(REQUIRED_SHORT_STRING, style=STYLE_REQUIRED_SHORT)\n\n        # Highlighter to make [ | ] and <> dim\n        class MetavarHighlighter(RegexHighlighter):\n            highlights = [\n                r\"^(?P<metavar_sep>(\\[|<))\",\n                r\"(?P<metavar_sep>\\|)\",\n                r\"(?P<metavar_sep>(\\]|>)$)\",\n            ]\n\n        metavar_highlighter = MetavarHighlighter()\n\n        required_rows.append(required)\n        options_rows.append(\n            [\n                highlighter(\",\".join(opt_long_strs)),\n                highlighter(\",\".join(opt_short_strs)),\n                negative_highlighter(\",\".join(secondary_opt_long_strs)),\n                negative_highlighter(\",\".join(secondary_opt_short_strs)),\n                metavar_highlighter(metavar),\n                _get_parameter_help(\n                    param=param,\n                    ctx=ctx,\n                    markup_mode=markup_mode,\n                ),\n            ]\n        )\n    rows_with_required: List[List[RenderableType]] = []\n    if any(required_rows):\n        for required, row in zip(required_rows, options_rows):\n            rows_with_required.append([required, *row])\n    else:\n        rows_with_required = options_rows\n    if options_rows:\n        t_styles: Dict[str, Any] = {\n            \"show_lines\": STYLE_OPTIONS_TABLE_SHOW_LINES,\n            \"leading\": STYLE_OPTIONS_TABLE_LEADING,\n            \"box\": STYLE_OPTIONS_TABLE_BOX,\n            \"border_style\": STYLE_OPTIONS_TABLE_BORDER_STYLE,\n            \"row_styles\": STYLE_OPTIONS_TABLE_ROW_STYLES,\n            \"pad_edge\": STYLE_OPTIONS_TABLE_PAD_EDGE,\n            \"padding\": STYLE_OPTIONS_TABLE_PADDING,\n        }\n        box_style = getattr(box, t_styles.pop(\"box\"), None)\n\n        options_table = Table(\n            highlight=True,\n            show_header=False,\n            expand=True,\n            box=box_style,\n            **t_styles,\n        )\n        for row in rows_with_required:\n            options_table.add_row(*row)\n        console.print(\n            Panel(\n                options_table,\n                border_style=STYLE_OPTIONS_PANEL_BORDER,\n                title=name,\n                title_align=ALIGN_OPTIONS_PANEL,\n            )\n        )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_print_commands_panel",
        "content": "def _print_commands_panel(\n    *,\n    name: str,\n    commands: List[click.Command],\n    markup_mode: MarkupMode,\n    console: Console,\n    cmd_len: int,\n) -> None:\n    t_styles: Dict[str, Any] = {\n        \"show_lines\": STYLE_COMMANDS_TABLE_SHOW_LINES,\n        \"leading\": STYLE_COMMANDS_TABLE_LEADING,\n        \"box\": STYLE_COMMANDS_TABLE_BOX,\n        \"border_style\": STYLE_COMMANDS_TABLE_BORDER_STYLE,\n        \"row_styles\": STYLE_COMMANDS_TABLE_ROW_STYLES,\n        \"pad_edge\": STYLE_COMMANDS_TABLE_PAD_EDGE,\n        \"padding\": STYLE_COMMANDS_TABLE_PADDING,\n    }\n    box_style = getattr(box, t_styles.pop(\"box\"), None)\n\n    commands_table = Table(\n        highlight=False,\n        show_header=False,\n        expand=True,\n        box=box_style,\n        **t_styles,\n    )\n    # Define formatting in first column, as commands don't match highlighter\n    # regex\n    commands_table.add_column(\n        style=STYLE_COMMANDS_TABLE_FIRST_COLUMN,\n        no_wrap=True,\n        width=cmd_len,\n    )\n\n    # A big ratio makes the description column be greedy and take all the space\n    # available instead of allowing the command column to grow and misalign with\n    # other panels.\n    commands_table.add_column(\"Description\", justify=\"left\", no_wrap=False, ratio=10)\n    rows: List[List[Union[RenderableType, None]]] = []\n    deprecated_rows: List[Union[RenderableType, None]] = []\n    for command in commands:\n        helptext = command.short_help or command.help or \"\"\n        command_name = command.name or \"\"\n        if command.deprecated:\n            command_name_text = Text(f\"{command_name}\", style=STYLE_DEPRECATED_COMMAND)\n            deprecated_rows.append(Text(DEPRECATED_STRING, style=STYLE_DEPRECATED))\n        else:\n            command_name_text = Text(command_name)\n            deprecated_rows.append(None)\n        rows.append(\n            [\n                command_name_text,\n                _make_command_help(\n                    help_text=helptext,\n                    markup_mode=markup_mode,\n                ),\n            ]\n        )\n    rows_with_deprecated = rows\n    if any(deprecated_rows):\n        rows_with_deprecated = []\n        for row, deprecated_text in zip(rows, deprecated_rows):\n            rows_with_deprecated.append([*row, deprecated_text])\n    for row in rows_with_deprecated:\n        commands_table.add_row(*row)\n    if commands_table.row_count:\n        console.print(\n            Panel(\n                commands_table,\n                border_style=STYLE_COMMANDS_PANEL_BORDER,\n                title=name,\n                title_align=ALIGN_COMMANDS_PANEL,\n            )\n        )",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "rich_format_help",
        "content": "def rich_format_help(\n    *,\n    obj: Union[click.Command, click.Group],\n    ctx: click.Context,\n    markup_mode: MarkupMode,\n) -> None:\n    \"\"\"Print nicely formatted help text using rich.\n\n    Based on original code from rich-cli, by @willmcgugan.\n    https://github.com/Textualize/rich-cli/blob/8a2767c7a340715fc6fbf4930ace717b9b2fc5e5/src/rich_cli/__main__.py#L162-L236\n\n    Replacement for the click function format_help().\n    Takes a command or group and builds the help text output.\n    \"\"\"\n    console = _get_rich_console()\n\n    # Print usage\n    console.print(\n        Padding(highlighter(obj.get_usage(ctx)), 1), style=STYLE_USAGE_COMMAND\n    )\n\n    # Print command / group help if we have some\n    if obj.help:\n        # Print with some padding\n        console.print(\n            Padding(\n                Align(\n                    _get_help_text(\n                        obj=obj,\n                        markup_mode=markup_mode,\n                    ),\n                    pad=False,\n                ),\n                (0, 1, 1, 1),\n            )\n        )\n    panel_to_arguments: DefaultDict[str, List[click.Argument]] = defaultdict(list)\n    panel_to_options: DefaultDict[str, List[click.Option]] = defaultdict(list)\n    for param in obj.get_params(ctx):\n        # Skip if option is hidden\n        if getattr(param, \"hidden\", False):\n            continue\n        if isinstance(param, click.Argument):\n            panel_name = (\n                getattr(param, _RICH_HELP_PANEL_NAME, None) or ARGUMENTS_PANEL_TITLE\n            )\n            panel_to_arguments[panel_name].append(param)\n        elif isinstance(param, click.Option):\n            panel_name = (\n                getattr(param, _RICH_HELP_PANEL_NAME, None) or OPTIONS_PANEL_TITLE\n            )\n            panel_to_options[panel_name].append(param)\n    default_arguments = panel_to_arguments.get(ARGUMENTS_PANEL_TITLE, [])\n    _print_options_panel(\n        name=ARGUMENTS_PANEL_TITLE,\n        params=default_arguments,\n        ctx=ctx,\n        markup_mode=markup_mode,\n        console=console,\n    )\n    for panel_name, arguments in panel_to_arguments.items():\n        if panel_name == ARGUMENTS_PANEL_TITLE:\n            # Already printed above\n            continue\n        _print_options_panel(\n            name=panel_name,\n            params=arguments,\n            ctx=ctx,\n            markup_mode=markup_mode,\n            console=console,\n        )\n    default_options = panel_to_options.get(OPTIONS_PANEL_TITLE, [])\n    _print_options_panel(\n        name=OPTIONS_PANEL_TITLE,\n        params=default_options,\n        ctx=ctx,\n        markup_mode=markup_mode,\n        console=console,\n    )\n    for panel_name, options in panel_to_options.items():\n        if panel_name == OPTIONS_PANEL_TITLE:\n            # Already printed above\n            continue\n        _print_options_panel(\n            name=panel_name,\n            params=options,\n            ctx=ctx,\n            markup_mode=markup_mode,\n            console=console,\n        )\n\n    if isinstance(obj, click.Group):\n        panel_to_commands: DefaultDict[str, List[click.Command]] = defaultdict(list)\n        for command_name in obj.list_commands(ctx):\n            command = obj.get_command(ctx, command_name)\n            if command and not command.hidden:\n                panel_name = (\n                    getattr(command, _RICH_HELP_PANEL_NAME, None)\n                    or COMMANDS_PANEL_TITLE\n                )\n                panel_to_commands[panel_name].append(command)\n\n        # Identify the longest command name in all panels\n        max_cmd_len = max(\n            [\n                len(command.name or \"\")\n                for commands in panel_to_commands.values()\n                for command in commands\n            ],\n            default=0,\n        )\n\n        # Print each command group panel\n        default_commands = panel_to_commands.get(COMMANDS_PANEL_TITLE, [])\n        _print_commands_panel(\n            name=COMMANDS_PANEL_TITLE,\n            commands=default_commands,\n            markup_mode=markup_mode,\n            console=console,\n            cmd_len=max_cmd_len,\n        )\n        for panel_name, commands in panel_to_commands.items():\n            if panel_name == COMMANDS_PANEL_TITLE:\n                # Already printed above\n                continue\n            _print_commands_panel(\n                name=panel_name,\n                commands=commands,\n                markup_mode=markup_mode,\n                console=console,\n                cmd_len=max_cmd_len,\n            )\n\n    # Epilogue if we have it\n    if obj.epilog:\n        # Remove single linebreaks, replace double with single\n        lines = obj.epilog.split(\"\\n\\n\")\n        epilogue = \"\\n\".join([x.replace(\"\\n\", \" \").strip() for x in lines])\n        epilogue_text = _make_rich_text(text=epilogue, markup_mode=markup_mode)\n        console.print(Padding(Align(epilogue_text, pad=False), 1))",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "rich_format_error",
        "content": "def rich_format_error(self: click.ClickException) -> None:\n    \"\"\"Print richly formatted click errors.\n\n    Called by custom exception handler to print richly formatted click errors.\n    Mimics original click.ClickException.echo() function but with rich formatting.\n    \"\"\"\n    # Don't do anything when it's a NoArgsIsHelpError (without importing it, cf. #1278)\n    if self.__class__.__name__ == \"NoArgsIsHelpError\":\n        return\n\n    console = _get_rich_console(stderr=True)\n    ctx: Union[click.Context, None] = getattr(self, \"ctx\", None)\n    if ctx is not None:\n        console.print(ctx.get_usage())\n\n    if ctx is not None and ctx.command.get_help_option(ctx) is not None:\n        console.print(\n            RICH_HELP.format(\n                command_path=ctx.command_path, help_option=ctx.help_option_names[0]\n            ),\n            style=STYLE_ERRORS_SUGGESTION,\n        )\n\n    console.print(\n        Panel(\n            highlighter(self.format_message()),\n            border_style=STYLE_ERRORS_PANEL_BORDER,\n            title=ERRORS_PANEL_TITLE,\n            title_align=ALIGN_ERRORS_PANEL,\n        )\n    )",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "rich_abort_error",
        "content": "def rich_abort_error() -> None:\n    \"\"\"Print richly formatted abort error.\"\"\"\n    console = _get_rich_console(stderr=True)\n    console.print(ABORTED_TEXT, style=STYLE_ABORTED)",
        "signature": {
          "args": [],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "escape_before_html_export",
        "content": "def escape_before_html_export(input_text: str) -> str:\n    \"\"\"Ensure that the input string can be used for HTML export.\"\"\"\n    return escape(input_text).strip()",
        "signature": {
          "args": [
            "input_text"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "rich_to_html",
        "content": "def rich_to_html(input_text: str) -> str:\n    \"\"\"Print the HTML version of a rich-formatted input string.\n\n    This function does not provide a full HTML page, but can be used to insert\n    HTML-formatted text spans into a markdown file.\n    \"\"\"\n    console = Console(record=True, highlight=False, file=io.StringIO())\n\n    console.print(input_text, overflow=\"ignore\", crop=False)\n\n    return console.export_html(inline_styles=True, code_format=\"{code}\").strip()",
        "signature": {
          "args": [
            "input_text"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "rich_render_text",
        "content": "def rich_render_text(text: str) -> str:\n    \"\"\"Remove rich tags and render a pure text representation\"\"\"\n    console = _get_rich_console()\n    return \"\".join(segment.text for segment in console.render(text)).rstrip(\"\\n\")",
        "signature": {
          "args": [
            "text"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_traceback",
        "content": "def get_traceback(\n    exc: BaseException,\n    exception_config: DeveloperExceptionConfig,\n    internal_dir_names: List[str],\n) -> Traceback:\n    rich_tb = Traceback.from_exception(\n        type(exc),\n        exc,\n        exc.__traceback__,\n        show_locals=exception_config.pretty_exceptions_show_locals,\n        suppress=internal_dir_names,\n        width=MAX_WIDTH,\n    )\n    return rich_tb",
        "signature": {
          "args": [
            "exc",
            "exception_config",
            "internal_dir_names"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "_get_rich_console",
        "caller_class": null,
        "called_function": "Console",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_rich_console",
        "caller_class": null,
        "called_function": "Theme",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_rich_text",
        "caller_class": null,
        "called_function": "cleandoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_rich_text",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_rich_text",
        "caller_class": null,
        "called_function": "Markdown",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_rich_text",
        "caller_class": null,
        "called_function": "highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_rich_text",
        "caller_class": null,
        "called_function": "from_markup",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_rich_text",
        "caller_class": null,
        "called_function": "highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_rich_text",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "cleandoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "partition",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "split",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "_make_rich_text",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "_make_rich_text",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_get_help_text",
        "caller_class": null,
        "called_function": "group",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "upper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "str",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "split",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "_make_rich_text",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "_extract_default_help_str",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "_get_default_string",
        "called_function_files": [
          "typer/core.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_get_parameter_help",
        "caller_class": null,
        "called_function": "Columns",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_command_help",
        "caller_class": null,
        "called_function": "split",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_command_help",
        "caller_class": null,
        "called_function": "cleandoc",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_command_help",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_command_help",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_command_help",
        "caller_class": null,
        "called_function": "startswith",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_command_help",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_make_command_help",
        "caller_class": null,
        "called_function": "_make_rich_text",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_make_command_help",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "signature",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "make_metavar",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "make_metavar",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "upper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "upper",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "_describe_range",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "MetavarHighlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "negative_highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "negative_highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "metavar_highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "_get_parameter_help",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "any",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "zip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "pop",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "Table",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "add_row",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_options_panel",
        "caller_class": null,
        "called_function": "Panel",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "pop",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "Table",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "add_column",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "add_column",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "Text",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "_make_command_help",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "any",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "zip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "add_row",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_print_commands_panel",
        "caller_class": null,
        "called_function": "Panel",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_get_rich_console",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "Padding",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "get_usage",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "Padding",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "Align",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_get_help_text",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "defaultdict",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "defaultdict",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "get_params",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_print_options_panel",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_print_options_panel",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_print_options_panel",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_print_options_panel",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "defaultdict",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "list_commands",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "get_command",
        "called_function_files": [
          "typer/main.py"
        ],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "append",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "max",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "values",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "get",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_print_commands_panel",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "items",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_print_commands_panel",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "split",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "replace",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "_make_rich_text",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "Padding",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_help",
        "caller_class": null,
        "called_function": "Align",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "_get_rich_console",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "getattr",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "get_usage",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "get_help_option",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "format",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "Panel",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "highlighter",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_format_error",
        "caller_class": null,
        "called_function": "format_message",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_abort_error",
        "caller_class": null,
        "called_function": "_get_rich_console",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_abort_error",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "escape_before_html_export",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "escape_before_html_export",
        "caller_class": null,
        "called_function": "escape",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_to_html",
        "caller_class": null,
        "called_function": "Console",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_to_html",
        "caller_class": null,
        "called_function": "StringIO",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_to_html",
        "caller_class": null,
        "called_function": "print",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_to_html",
        "caller_class": null,
        "called_function": "strip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_to_html",
        "caller_class": null,
        "called_function": "export_html",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_render_text",
        "caller_class": null,
        "called_function": "_get_rich_console",
        "called_function_files": [
          "typer/rich_utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "rich_render_text",
        "caller_class": null,
        "called_function": "rstrip",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_render_text",
        "caller_class": null,
        "called_function": "join",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "rich_render_text",
        "caller_class": null,
        "called_function": "render",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_traceback",
        "caller_class": null,
        "called_function": "from_exception",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_traceback",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": []
  },
  {
    "file": "typer/testing.py",
    "type": "python",
    "imports": [
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "click.testing",
        "type": "external"
      },
      {
        "module": "click.testing",
        "type": "external"
      },
      {
        "module": "typer.main",
        "type": "external"
      },
      {
        "module": "typer.main",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "CliRunner",
        "methods": [
          {
            "name": "invoke",
            "content": "    def invoke(  # type: ignore\n        self,\n        app: Typer,\n        args: Optional[Union[str, Sequence[str]]] = None,\n        input: Optional[Union[bytes, str, IO[Any]]] = None,\n        env: Optional[Mapping[str, Optional[str]]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: Any,\n    ) -> Result:\n        use_cli = _get_command(app)\n        return super().invoke(\n            use_cli,\n            args=args,\n            input=input,\n            env=env,\n            catch_exceptions=catch_exceptions,\n            color=color,\n            **extra,\n        )",
            "signature": {
              "args": [
                "self",
                "app",
                "args",
                "input",
                "env",
                "catch_exceptions",
                "color"
              ],
              "defaults": [
                "None",
                "None",
                "None",
                "True",
                "False"
              ]
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "ClickCliRunner"
        ]
      }
    ],
    "functions": [],
    "calls": [
      {
        "caller_function": "invoke",
        "caller_class": "CliRunner",
        "called_function": "_get_command",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "invoke",
        "caller_class": "CliRunner",
        "called_function": "invoke",
        "called_function_files": [],
        "called_method_files": [
          "typer/testing.py"
        ],
        "self_call_function": false,
        "self_call_method": true
      },
      {
        "caller_function": "invoke",
        "caller_class": "CliRunner",
        "called_function": "super",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "invoke",
        "content": "    def invoke(  # type: ignore\n        self,\n        app: Typer,\n        args: Optional[Union[str, Sequence[str]]] = None,\n        input: Optional[Union[bytes, str, IO[Any]]] = None,\n        env: Optional[Mapping[str, Optional[str]]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: Any,\n    ) -> Result:\n        use_cli = _get_command(app)\n        return super().invoke(\n            use_cli,\n            args=args,\n            input=input,\n            env=env,\n            catch_exceptions=catch_exceptions,\n            color=color,\n            **extra,\n        )",
        "signature": {
          "args": [
            "self",
            "app",
            "args",
            "input",
            "env",
            "catch_exceptions",
            "color"
          ],
          "defaults": [
            "None",
            "None",
            "None",
            "True",
            "False"
          ]
        },
        "decorators": []
      }
    ]
  },
  {
    "file": "typer/utils.py",
    "type": "python",
    "imports": [
      {
        "module": "inspect",
        "type": "external"
      },
      {
        "module": "sys",
        "type": "external_builtin"
      },
      {
        "module": "copy",
        "type": "external"
      },
      {
        "module": "typing",
        "type": "external"
      },
      {
        "module": "_typing",
        "type": "external"
      },
      {
        "module": "models",
        "type": "external"
      }
    ],
    "classes": [
      {
        "name": "AnnotatedParamWithDefaultValueError",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self, argument_name: str, param_type: Type[ParameterInfo]):\n        self.argument_name = argument_name\n        self.param_type = param_type",
            "signature": {
              "args": [
                "self",
                "argument_name",
                "param_type"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__str__",
            "content": "    def __str__(self) -> str:\n        param_type_str = _param_type_to_user_string(self.param_type)\n        return (\n            f\"{param_type_str} default value cannot be set in `Annotated`\"\n            f\" for {self.argument_name!r}. Set the default value with `=` instead.\"\n        )",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "Exception"
        ]
      },
      {
        "name": "MixedAnnotatedAndDefaultStyleError",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(\n        self,\n        argument_name: str,\n        annotated_param_type: Type[ParameterInfo],\n        default_param_type: Type[ParameterInfo],\n    ):\n        self.argument_name = argument_name\n        self.annotated_param_type = annotated_param_type\n        self.default_param_type = default_param_type",
            "signature": {
              "args": [
                "self",
                "argument_name",
                "annotated_param_type",
                "default_param_type"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__str__",
            "content": "    def __str__(self) -> str:\n        annotated_param_type_str = _param_type_to_user_string(self.annotated_param_type)\n        default_param_type_str = _param_type_to_user_string(self.default_param_type)\n        msg = f\"Cannot specify {annotated_param_type_str} in `Annotated` and\"\n        if self.annotated_param_type is self.default_param_type:\n            msg += \" default value\"\n        else:\n            msg += f\" {default_param_type_str} as a default value\"\n        msg += f\" together for {self.argument_name!r}\"\n        return msg",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "Exception"
        ]
      },
      {
        "name": "MultipleTyperAnnotationsError",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self, argument_name: str):\n        self.argument_name = argument_name",
            "signature": {
              "args": [
                "self",
                "argument_name"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__str__",
            "content": "    def __str__(self) -> str:\n        return (\n            \"Cannot specify multiple `Annotated` Typer arguments\"\n            f\" for {self.argument_name!r}\"\n        )",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "Exception"
        ]
      },
      {
        "name": "DefaultFactoryAndDefaultValueError",
        "methods": [
          {
            "name": "__init__",
            "content": "    def __init__(self, argument_name: str, param_type: Type[ParameterInfo]):\n        self.argument_name = argument_name\n        self.param_type = param_type",
            "signature": {
              "args": [
                "self",
                "argument_name",
                "param_type"
              ],
              "defaults": []
            },
            "decorators": []
          },
          {
            "name": "__str__",
            "content": "    def __str__(self) -> str:\n        param_type_str = _param_type_to_user_string(self.param_type)\n        return (\n            \"Cannot specify `default_factory` and a default value together\"\n            f\" for {param_type_str}\"\n        )",
            "signature": {
              "args": [
                "self"
              ],
              "defaults": []
            },
            "decorators": []
          }
        ],
        "decorators": [],
        "inheritances": [
          "Exception"
        ]
      }
    ],
    "functions": [
      {
        "name": "_param_type_to_user_string",
        "content": "def _param_type_to_user_string(param_type: Type[ParameterInfo]) -> str:\n    # Render a `ParameterInfo` subclass for use in error messages.\n    # User code doesn't call `*Info` directly, so errors should present the classes how\n    # they were (probably) defined in the user code.\n    if param_type is OptionInfo:\n        return \"`Option`\"\n    elif param_type is ArgumentInfo:\n        return \"`Argument`\"\n    # This line shouldn't be reachable during normal use.\n    return f\"`{param_type.__name__}`\"  # pragma: no cover",
        "signature": {
          "args": [
            "param_type"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "_split_annotation_from_typer_annotations",
        "content": "def _split_annotation_from_typer_annotations(\n    base_annotation: Type[Any],\n) -> Tuple[Type[Any], List[ParameterInfo]]:\n    if get_origin(base_annotation) is not Annotated:\n        return base_annotation, []\n    base_annotation, *maybe_typer_annotations = get_args(base_annotation)\n    return base_annotation, [\n        annotation\n        for annotation in maybe_typer_annotations\n        if isinstance(annotation, ParameterInfo)\n    ]",
        "signature": {
          "args": [
            "base_annotation"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "get_params_from_function",
        "content": "def get_params_from_function(func: Callable[..., Any]) -> Dict[str, ParamMeta]:\n    if sys.version_info >= (3, 10):\n        signature = inspect.signature(func, eval_str=True)\n    else:\n        signature = inspect.signature(func)\n\n    type_hints = get_type_hints(func)\n    params = {}\n    for param in signature.parameters.values():\n        annotation, typer_annotations = _split_annotation_from_typer_annotations(\n            param.annotation,\n        )\n        if len(typer_annotations) > 1:\n            raise MultipleTyperAnnotationsError(param.name)\n\n        default = param.default\n        if typer_annotations:\n            # It's something like `my_param: Annotated[str, Argument()]`\n            [parameter_info] = typer_annotations\n\n            # Forbid `my_param: Annotated[str, Argument()] = Argument(\"...\")`\n            if isinstance(param.default, ParameterInfo):\n                raise MixedAnnotatedAndDefaultStyleError(\n                    argument_name=param.name,\n                    annotated_param_type=type(parameter_info),\n                    default_param_type=type(param.default),\n                )\n\n            parameter_info = copy(parameter_info)\n\n            # When used as a default, `Option` takes a default value and option names\n            # as positional arguments:\n            #   `Option(some_value, \"--some-argument\", \"-s\")`\n            # When used in `Annotated` (ie, what this is handling), `Option` just takes\n            # option names as positional arguments:\n            #   `Option(\"--some-argument\", \"-s\")`\n            # In this case, the `default` attribute of `parameter_info` is actually\n            # meant to be the first item of `param_decls`.\n            if (\n                isinstance(parameter_info, OptionInfo)\n                and parameter_info.default is not ...\n            ):\n                parameter_info.param_decls = (\n                    cast(str, parameter_info.default),\n                    *(parameter_info.param_decls or ()),\n                )\n                parameter_info.default = ...\n\n            # Forbid `my_param: Annotated[str, Argument('some-default')]`\n            if parameter_info.default is not ...:\n                raise AnnotatedParamWithDefaultValueError(\n                    param_type=type(parameter_info),\n                    argument_name=param.name,\n                )\n            if param.default is not param.empty:\n                # Put the parameter's default (set by `=`) into `parameter_info`, where\n                # typer can find it.\n                parameter_info.default = param.default\n\n            default = parameter_info\n        elif param.name in type_hints:\n            # Resolve forward references.\n            annotation = type_hints[param.name]\n\n        if isinstance(default, ParameterInfo):\n            parameter_info = copy(default)\n            # Click supports `default` as either\n            # - an actual value; or\n            # - a factory function (returning a default value.)\n            # The two are not interchangeable for static typing, so typer allows\n            # specifying `default_factory`. Move the `default_factory` into `default`\n            # so click can find it.\n            if parameter_info.default is ... and parameter_info.default_factory:\n                parameter_info.default = parameter_info.default_factory\n            elif parameter_info.default_factory:\n                raise DefaultFactoryAndDefaultValueError(\n                    argument_name=param.name, param_type=type(parameter_info)\n                )\n            default = parameter_info\n\n        params[param.name] = ParamMeta(\n            name=param.name, default=default, annotation=annotation\n        )\n    return params",
        "signature": {
          "args": [
            "func"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ],
    "calls": [
      {
        "caller_function": "__str__",
        "caller_class": "AnnotatedParamWithDefaultValueError",
        "called_function": "_param_type_to_user_string",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__str__",
        "caller_class": "MixedAnnotatedAndDefaultStyleError",
        "called_function": "_param_type_to_user_string",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__str__",
        "caller_class": "MixedAnnotatedAndDefaultStyleError",
        "called_function": "_param_type_to_user_string",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "__str__",
        "caller_class": "DefaultFactoryAndDefaultValueError",
        "called_function": "_param_type_to_user_string",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "_split_annotation_from_typer_annotations",
        "caller_class": null,
        "called_function": "get_origin",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_split_annotation_from_typer_annotations",
        "caller_class": null,
        "called_function": "get_args",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "_split_annotation_from_typer_annotations",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "signature",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "signature",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "get_type_hints",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "values",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "_split_annotation_from_typer_annotations",
        "called_function_files": [
          "typer/utils.py"
        ],
        "called_method_files": [],
        "self_call_function": true,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "len",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "MultipleTyperAnnotationsError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "MixedAnnotatedAndDefaultStyleError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "copy",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "cast",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "AnnotatedParamWithDefaultValueError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "isinstance",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "copy",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "DefaultFactoryAndDefaultValueError",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "type",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      },
      {
        "caller_function": "get_params_from_function",
        "caller_class": null,
        "called_function": "ParamMeta",
        "called_function_files": [],
        "called_method_files": [],
        "self_call_function": false,
        "self_call_method": false
      }
    ],
    "methods": [
      {
        "name": "__init__",
        "content": "    def __init__(self, argument_name: str, param_type: Type[ParameterInfo]):\n        self.argument_name = argument_name\n        self.param_type = param_type",
        "signature": {
          "args": [
            "self",
            "argument_name",
            "param_type"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__str__",
        "content": "    def __str__(self) -> str:\n        param_type_str = _param_type_to_user_string(self.param_type)\n        return (\n            f\"{param_type_str} default value cannot be set in `Annotated`\"\n            f\" for {self.argument_name!r}. Set the default value with `=` instead.\"\n        )",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(\n        self,\n        argument_name: str,\n        annotated_param_type: Type[ParameterInfo],\n        default_param_type: Type[ParameterInfo],\n    ):\n        self.argument_name = argument_name\n        self.annotated_param_type = annotated_param_type\n        self.default_param_type = default_param_type",
        "signature": {
          "args": [
            "self",
            "argument_name",
            "annotated_param_type",
            "default_param_type"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__str__",
        "content": "    def __str__(self) -> str:\n        annotated_param_type_str = _param_type_to_user_string(self.annotated_param_type)\n        default_param_type_str = _param_type_to_user_string(self.default_param_type)\n        msg = f\"Cannot specify {annotated_param_type_str} in `Annotated` and\"\n        if self.annotated_param_type is self.default_param_type:\n            msg += \" default value\"\n        else:\n            msg += f\" {default_param_type_str} as a default value\"\n        msg += f\" together for {self.argument_name!r}\"\n        return msg",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(self, argument_name: str):\n        self.argument_name = argument_name",
        "signature": {
          "args": [
            "self",
            "argument_name"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__str__",
        "content": "    def __str__(self) -> str:\n        return (\n            \"Cannot specify multiple `Annotated` Typer arguments\"\n            f\" for {self.argument_name!r}\"\n        )",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__init__",
        "content": "    def __init__(self, argument_name: str, param_type: Type[ParameterInfo]):\n        self.argument_name = argument_name\n        self.param_type = param_type",
        "signature": {
          "args": [
            "self",
            "argument_name",
            "param_type"
          ],
          "defaults": []
        },
        "decorators": []
      },
      {
        "name": "__str__",
        "content": "    def __str__(self) -> str:\n        param_type_str = _param_type_to_user_string(self.param_type)\n        return (\n            \"Cannot specify `default_factory` and a default value together\"\n            f\" for {param_type_str}\"\n        )",
        "signature": {
          "args": [
            "self"
          ],
          "defaults": []
        },
        "decorators": []
      }
    ]
  }
]